services:
  ####################################################################################################
  #                                 AI Platform Engineer A2A P2P                                  #
  ####################################################################################################
  platform-engineer-p2p:
    image: ghcr.io/cnoe-io/ai-platform-engineering:0.2.0
    container_name: platform-engineer-p2p
    volumes:
      - ./prompt_config.yaml:/app/prompt_config.deep_agent.yaml
    profiles:
      - p2p
      - p2p-tracing
    # The following block uses the extended 'depends_on' syntax to specify that these agent services are not strictly required for the platform-engineer container to start.
    # Each agent is marked with 'required: false', so platform-engineer will start even if the agent is missing.
    # 'condition: service_started' means Docker Compose will wait until the service has started (not necessarily healthy) before starting platform-engineer.
    depends_on:
      - agent-github-p2p
      - agent_rag
      - agent-slack-p2p
      - agent-weather-p2p
    env_file:
      - .env
    ports:
      # Expose the AI Platform Engineer agent on port 8000
      - "8000:8000"
    environment:
      - AGENT_CONNECTIVITY_ENABLE_BACKGROUND=true # Routinely checks each subagent connectivity to add or remove any from existing tools list.
      - AGENT_PROTOCOL=a2a # Use A2A protocol for agent-to-agent communication.
      - SKIP_AGENT_CONNECTIVITY_CHECK=false # Do not skip the connectivity check; supervisor agent will check each subagent is reachable and only add reachable tools.
      - A2A_TRANSPORT=p2p # Use A2A protocol for agent-to-agent communication.

      # Agent hosts
      - GITHUB_AGENT_HOST=agent-github-p2p
      - SLACK_AGENT_HOST=agent-slack-p2p
      - WEATHER_AGENT_HOST=agent-weather-p2p
      - WEBEX_AGENT_HOST=agent-webex-p2p
      - PETSTORE_AGENT_HOST=agent-petstore-p2p
      - RAG_AGENT_HOST=agent_rag
      - RAG_AGENT_PORT=8099

      # Enable agents
      - ENABLE_GITHUB=true
      - ENABLE_SLACK=true
      - ENABLE_WEATHER=true
      - ENABLE_PETSTORE=true
      - ENABLE_RAG=true

      # Tracing
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-NOT_SET}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-NOT_SET}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
      - LANGFUSE_SESSION_ID=${LANGFUSE_SESSION_ID:-ai-platform-engineering}
      - LANGFUSE_USER_ID=${LANGFUSE_USER_ID:-platform-engineer}
    command: platform-engineer

  ####################################################################################################
  #                                      AGENT GITHUB A2A P2P                                        #
  ####################################################################################################
  agent-github-p2p:
    image: ghcr.io/cnoe-io/agent-github:0.2.0
    container_name: agent-github-p2p
    profiles:
      - p2p
      - p2p-tracing
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    ports:
      - "8007:8000"
    environment:
      - A2A_TRANSPORT=p2p
      - MCP_MODE=${MCP_MODE:-http}
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}

  ####################################################################################################
  #                                      AGENT SLACK A2A P2P                                         #
  ####################################################################################################
  agent-slack-p2p:
    image: ghcr.io/cnoe-io/agent-slack:0.2.0
    container_name: agent-slack-p2p
    profiles:
      - p2p
      - p2p-tracing
    env_file:
      - .env
    ports:
      - "8015:8000"
    environment:
      - A2A_TRANSPORT=p2p
      - MCP_MODE=${MCP_MODE:-http}
      - MCP_PORT=8000
      - MCP_HOST=mcp-slack
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}

  ####################################################################################################
  #                                      MCP SLACK                                                   #
  ####################################################################################################
  mcp-slack:
    image: ghcr.io/cnoe-io/mcp-slack:0.2.0
    container_name: mcp-slack
    profiles:
      - p2p
      - p2p-tracing
    env_file:
      - .env
    ports:
      - "18006:8000"
    environment:
      - MCP_MODE=${MCP_MODE:-http}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000

  ####################################################################################################
  #                                      AGENT WEATHER A2A P2P                                       #
  ####################################################################################################
  agent-weather-p2p:
    image: ghcr.io/cnoe-io/agent-weather:0.2.0
    container_name: agent-weather-p2p
    profiles:
      - p2p
      - p2p-tracing
    env_file:
      - .env
    ports:
      - "8021:8000"
    environment:
      - A2A_TRANSPORT=p2p
      - MCP_MODE=${MCP_MODE:-http}
      - MCP_PORT=443
      - MCP_HOST=weather.outshift.io
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}

  ####################################################################################################
  #                                      AGENT PETSTORE A2A P2P                                       #
  ####################################################################################################
  agent-petstore-p2p:
    image: ghcr.io/cnoe-io/agent-template:0.2.0
    container_name: agent-petstore-p2p
    profiles:
      - p2p
      - p2p-tracing
    env_file:
      - .env
    ports:
      - "8023:8000"
    environment:
      - A2A_TRANSPORT=p2p
      - MCP_MODE=${MCP_MODE:-http}
      - MCP_PORT=443
      - MCP_HOST=petstore.outshift.io
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}

  ####################################################################################################
  #                                      BACKSTAGE AGENT FORGE                                       #
  ####################################################################################################
  backstage-agent-forge:
    image: ghcr.io/cnoe-io/backstage-plugin-agent-forge:latest
    container_name: backstage-agent-forge
    ports:
      - "13000:3000"

  ####################################################################################################
  #                                             RAG SERVICES                                         #
  ####################################################################################################
  rag_server:
    ports:
      - "9446:9446"
    environment:
        LOG_LEVEL: DEBUG
        REDIS_URL: redis://rag-redis:6379/0
        NEO4J_ADDR: neo4j://neo4j:7687
        NEO4J_ONTOLOGY_ADDR: neo4j://neo4j-ontology:7688
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: dummy_password
        MILVUS_URI: http://milvus-standalone:19530
        ONTOLOGY_AGENT_RESTAPI_ADDR: http://agent_ontology:8098
        ENABLE_GRAPH_RAG: false
        CLEANUP_INTERVAL: 86400
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - rag-redis
    image: ghcr.io/cnoe-io/caipe-rag-server:0.2.0
    profiles:
      - p2p
      - p2p-tracing

  agent_rag:
    container_name: agent_rag
    ports:
      - "8099:8099"
    env_file:
      - .env
    environment:
        # LOG_LEVEL: DEBUG
        REDIS_URL: redis://rag-redis:6379/0
        NEO4J_ADDR: neo4j://neo4j:7687
        NEO4J_ONTOLOGY_ADDR: neo4j://neo4j-ontology:7688
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: dummy_password
        RAG_SERVER_URL: http://rag_server:9446
        ENABLE_GRAPH_RAG: false
    restart: unless-stopped
    image: ghcr.io/cnoe-io/caipe-rag-agent-rag:0.2.0
    profiles:
      - p2p
      - p2p-tracing

  rag_webui:
    build:
      context: ai_platform_engineering/knowledge_bases/rag
      dockerfile: ./build/Dockerfile.webui
    container_name: rag-webui
    environment:
      RAG_SERVER_URL: http://rag_server:9446
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: ".conf"
    depends_on:
      - rag_server
    ports:
      - "9447:80"
    profiles:
      - p2p
      - p2p-tracing

  ###########################################
  # Dependent services for RAG              #
  ###########################################
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    volumes:
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j/logs:/logs
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j/config:/config
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j/data:/data
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j/plugins:/plugins
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: unless-stopped
    profiles:
      - p2p
      - p2p-tracing
    environment:
      NEO4J_AUTH: neo4j/dummy_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true

  neo4j-ontology:
    image: neo4j:latest
    container_name: neo4j-ontology
    volumes:
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j-ontology/logs:/logs
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j-ontology/config:/config
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j-ontology/data:/data
        - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j-ontology/plugins:/plugins
    ports:
      - "7688:7687"
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/dummy_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    profiles:
      - p2p
      - p2p-tracing

  rag-redis:
    image: redis
    command:
      - /bin/sh
      - -c
      - redis-server
    ports:
      - ":6379"
    restart: unless-stopped
    profiles:
      - p2p
      - p2p-tracing

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.6.0
    command: ["milvus", "run", "standalone"]
    profiles:
      - p2p
      - p2p-tracing
    security_opt:
      - seccomp:unconfined
    environment:
      MINIO_REGION: us-east-1
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      LOG_LEVEL: error
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - ":19530"
      - ":9091"
    depends_on:
      - etcd
      - milvus-minio

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    profiles:
      - p2p
      - p2p-tracing
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    profiles:
      - p2p
      - p2p-tracing
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - ":9001"
      - ":9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  ####################################################################################################
  #                                      LANGFUSE TRACING SERVICES                                   #
  ####################################################################################################
  # Langfuse Tracing Services (use ENABLE_TRACING=true to enable)
  langfuse-worker:
    image: langfuse/langfuse-worker:3
    container_name: langfuse-worker
    restart: always
    profiles:
      - p2p-tracing
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "127.0.0.1:3030:3030"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@langfuse-postgres:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      CLICKHOUSE_MIGRATION_URL: clickhouse://langfuse-clickhouse:9000
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      # S3 Event Upload Configuration (Required for tracing)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: "events/"
      # S3 Media Upload Configuration
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: "media/"
      REDIS_HOST: langfuse-redis
      REDIS_AUTH: myredissecret

  langfuse-web:
    image: langfuse/langfuse:3
    container_name: langfuse-web
    restart: always
    profiles:
      - p2p-tracing
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@langfuse-postgres:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      CLICKHOUSE_MIGRATION_URL: clickhouse://langfuse-clickhouse:9000
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      HOSTNAME: "0.0.0.0"
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      # S3 Event Upload Configuration (Required for tracing)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: "events/"
      # S3 Media Upload Configuration
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: "media/"
      REDIS_HOST: langfuse-redis
      REDIS_AUTH: myredissecret
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: mysecret

  langfuse-clickhouse:
    image: clickhouse/clickhouse-server
    container_name: langfuse-clickhouse
    restart: always
    profiles:
      - p2p-tracing
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - "127.0.0.1:8123:8123"
      - "127.0.0.1:9000:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  langfuse-minio:
    image: minio/minio
    container_name: langfuse-minio
    restart: always
    profiles:
      - p2p-tracing
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9090:9000"
      - "127.0.0.1:9091:9001"
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  langfuse-redis:
    image: redis:7
    container_name: langfuse-redis
    restart: always
    profiles:
      - p2p-tracing
    command: >
      --requirepass ${REDIS_AUTH:-myredissecret}
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  langfuse-postgres:
    image: postgres:15
    container_name: langfuse-postgres
    restart: always
    profiles:
      - p2p-tracing
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

  ####################################################################################################
  #                                      EVALUATION WEBHOOK SERVICE                                   #
  ####################################################################################################
  evaluation-webhook:
    build:
      context: ./evals
      dockerfile: Dockerfile
    container_name: evaluation-webhook
    restart: unless-stopped
    profiles:
      - p2p-tracing
      - evaluation
    depends_on:
      langfuse-web:
        condition: service_started
    ports:
      - "8024:8000"
    env_file:
      - .env
    environment:
      - PLATFORM_ENGINEER_URL=http://platform-engineering:8000
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      # Mount datasets for development
      - ./evals/datasets:/app/datasets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  langfuse_postgres_data:
    driver: local
  langfuse_clickhouse_data:
    driver: local
  langfuse_clickhouse_logs:
    driver: local
  langfuse_minio_data:
    driver: local
  milvus_etcd:
    driver: local
  milvus_minio:
    driver: local
  milvus_data:
    driver: local
