tags:
  basic: false
  complete: false
  backstage-agent-forge: false
  agent-argocd: false
  agent-aws: false
  agent-backstage: false
  agent-confluence: false
  agent-github: false
  agent-jira: false
  agent-komodor: false
  agent-pagerduty: false
  agent-slack: false
  agent-splunk: false
  agent-webex: false
  graphrag: false
  kb-rag-stack: false

# Global configuration shared across all subcharts
global:
  createLlmSecret: false # if true, llm secret will be created by the parent chart. Otherwise, expect existing llm secret
  llmSecrets:
    create: false # do not create llm secret in subcharts (use global or existing llm secret)
    secretName: "llm-secret"
  externalSecrets:
    enabled: false
  slim:
    enabled: false
    endpoint: "http://ai-platform-engineering-slim:46357"
    transport: "slim"

######### Supervisor agent configuration #########
supervisor-agent:
  nameOverride: "supervisor-agent"
  image:
    repository: "ghcr.io/cnoe-io/ai-platform-engineering"
    tag: "stable"
    pullPolicy: "Always"
    args: ["platform-engineer"]
  env:
    EXTERNAL_URL: "http://localhost:8000"  # Agent url for the client. NOTE: this will be user applicaiton specific
    SKIP_AGENT_CONNECTIVITY_CHECK: "false"
    AGENT_CONNECTIVITY_ENABLE_BACKGROUND: "true"
  multiAgentConfig:
    protocol: "a2a"
    port: "8000"
    promptConfig:
      create: true # if false, expect existing prompt config with promptConfig.name
      name: prompt-config

######### Sub-agent configurations #########
# Agent configurations using aliases from Chart.yaml
agent-argocd:
  nameOverride: "agent-argocd"
  image:
    repository: "ghcr.io/cnoe-io/agent-argocd"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-argocd"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-backstage:
  nameOverride: "agent-backstage"
  image:
    repository: "ghcr.io/cnoe-io/agent-backstage"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-backstage"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-confluence:
  nameOverride: "agent-confluence"
  image:
    repository: "ghcr.io/cnoe-io/agent-confluence"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-confluence"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-github:
  nameOverride: "agent-github"
  image:
    repository: "ghcr.io/cnoe-io/agent-github"
    pullPolicy: "Always"
  mcp:
    useRemoteMcpServer: true

agent-jira:
  nameOverride: "agent-jira"
  image:
    repository: "ghcr.io/cnoe-io/agent-jira"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-jira"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-pagerduty:
  nameOverride: "agent-pagerduty"
  image:
    repository: "ghcr.io/cnoe-io/agent-pagerduty"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-pagerduty"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-slack:
  nameOverride: "agent-slack"
  image:
    repository: "ghcr.io/cnoe-io/agent-slack"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-slack"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
    pullPolicy: "Always"

agent-aws:
  nameOverride: "agent-aws"
  image:
    repository: "ghcr.io/cnoe-io/agent-aws"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-aws"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-splunk:
  nameOverride: "agent-splunk"
  image:
    repository: "ghcr.io/cnoe-io/agent-splunk"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-splunk"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-webex:
  nameOverride: "agent-webex"
  image:
    repository: "ghcr.io/cnoe-io/agent-webex"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-webex"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-komodor:
  nameOverride: "agent-komodor"
  image:
    repository: "ghcr.io/cnoe-io/agent-komodor"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-komodor"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

######### Backstage plugin agent forge configuration #########
backstage-plugin-agent-forge:
  nameOverride: "backstage-plugin-agent-forge"
  image:
    repository: "ghcr.io/cnoe-io/backstage-plugin-agent-forge"
    tag: "latest"
    pullPolicy: "Always"
  service:
    ports:
      - name: http
        port: 3000
        protocol: TCP
      - name: backend
        port: 7007
        protocol: TCP

######### GraphRAG configuration #########
graphrag:
  neo4jNameOverride: "graphrag-neo4j" # This needs to match the value in neo4j.fullnameOverride

# neo4j is used by graphrag to store the graph data. If graphrag.enabled is false, neo4j is not deployed.
neo4j:
  fullnameOverride: "graphrag-neo4j"
  config:
    server.directories.plugins: "/var/lib/neo4j/labs"
    dbms.security.procedures.unrestricted: "apoc.*"
    dbms.security.procedures.allowlist: "apoc.*"
    server.config.strict_validation.enabled: "false"
  apoc_config:
    apoc.trigger.enabled: "true"
    apoc.import.file.enabled: "true"
  disableLookups: true
  services:
    neo4j:
      enabled: false
  neo4j:
    name: graphrag-neo4j
    password: "dummy_password" # This dummy password needs to match the value in graphrag.neo4j.auth.password
    resources:
      cpu: "1"
      memory: "2Gi"

  volumes:
    data:
      mode: "dynamic"
      dynamic:
        storageClassName: gp2

######### KB-RAG Stack configuration #########
# KB-RAG Stack - Complete stack including web, server, agent, Redis, and Milvus
kb-rag-stack:
  # KB-RAG Web configuration
  kb-rag-web:
    enabled: true
    image:
      repository: "ghcr.io/cnoe-io/kb-rag-web"
      tag: "latest"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 80

    ingress:
      enabled: false
      className: ""
      annotations: {}
      hosts:
        - host: kb-rag-web.local
          paths:
            - path: /
              pathType: Prefix
      tls: []

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

  # KB-RAG Server configuration
  kb-rag-server:
    enabled: true
    image:
      repository: "ghcr.io/cnoe-io/kb-rag-server"
      tag: "latest"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 9446

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
        ephemeral-storage: 1Gi

  # Agent configuration (standard agent chart)
  kb-rag-agent:
    enabled: true
    nameOverride: "kb-rag-agent"
    image:
      repository: "ghcr.io/cnoe-io/kb-rag-agent-a2a"
      tag: "latest"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 8000

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 256Mi
      limits:
        cpu: 500m
        memory: 2Gi
        ephemeral-storage: 1Gi

  # KB-RAG Redis configuration
  kb-rag-redis:
    enabled: true
    image:
      repository: "redis"
      tag: "7.2-alpine"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 6379

    persistence:
      enabled: true
      size: 1Gi
      storageClass: ""

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

    # Redis configuration
    redis:
      maxmemory: "256mb"
      maxmemoryPolicy: "allkeys-lru"
      save: "60 1"
      appendonly: "yes"

# Minimal Milvus cluster configuration using Zilliz Helm chart defaults
milvus:
  # Only override what differs from chart defaults
  pulsarv3:
    enabled: false  # Default is true, we need false
  woodpecker:
    enabled: true   # Default is false, we need true

  # Performance overrides only for compute nodes
  queryNode:
    resources:
      limits:
        cpu: 200m
        memory: 256Mi

  dataNode:
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
