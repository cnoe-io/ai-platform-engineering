# Global configuration shared across all subcharts
global:
  slim:
    enabled: false
    endpoint: "http://ai-platform-engineering-slim:46357"
    transport: "slim"
  secrets:
    secretName: "llm-secret"

# AI Platform Engineer Multi-Agent
ai-platform-engineering:
  enabled: true
  nameOverride: "ai-platform-engineering"
  isMultiAgent: true
  image:
    repository: "ghcr.io/cnoe-io/ai-platform-engineering"
    tag: "stable"
    pullPolicy: "Always"
    args: ["platform-engineer"]
  env:
    EXTERNAL_URL: "http://localhost:8000"  # Agent url for the client
  multiAgentConfig:
    protocol: "a2a"
    port: "8000"
    releasePrefix: "ai-platform-engineering"
    agents:
      - argocd
      - backstage
      - confluence
      - github
      - jira
      - pagerduty
      - slack
  mcp: #TODO
    mode: "stdio"

# Backstage plugin agent forge
backstage-plugin-agent-forge:
  enabled: true
  nameOverride: "backstage-plugin-agent-forge"
  image:
    repository: "ghcr.io/cnoe-io/backstage-plugin-agent-forge"
    tag: "latest"
    pullPolicy: "Always"
  isBackstagePlugin: true
  service:
    ports:
      - name: http
        port: 3000
        protocol: TCP
      - name: backend
        port: 7007
        protocol: TCP
  mcp: #TODO
    mode: "stdio"

# Agent configurations using aliases from Chart.yaml
agent-argocd:
  enabled: false
  nameOverride: "agent-argocd"
  image:
    repository: "ghcr.io/cnoe-io/agent-argocd"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-argocd"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-backstage:
  enabled: false
  nameOverride: "agent-backstage"
  image:
    repository: "ghcr.io/cnoe-io/agent-backstage"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-backstage"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-confluence:
  enabled: false
  nameOverride: "agent-confluence"
  image:
    repository: "ghcr.io/cnoe-io/agent-confluence"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-confluence"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-github:
  enabled: false
  nameOverride: "agent-github"
  image:
    repository: "ghcr.io/cnoe-io/agent-github"
    pullPolicy: "Always"
  mcp:
    useRemoteMcpServer: true

agent-jira:
  enabled: false
  nameOverride: "agent-jira"
  image:
    repository: "ghcr.io/cnoe-io/agent-jira"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-jira"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-pagerduty:
  enabled: false
  nameOverride: "agent-pagerduty"
  image:
    repository: "ghcr.io/cnoe-io/agent-pagerduty"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-pagerduty"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000

agent-slack:
  enabled: false
  nameOverride: "agent-slack"
  image:
    repository: "ghcr.io/cnoe-io/agent-slack"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-slack"
      tag: "stable"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
    pullPolicy: "Always"

agent-reflection:
  enabled: false
  nameOverride: "agent-reflection"
  image:
    repository: "ghcr.io/cnoe-io/agent-reflection"
    pullPolicy: "Always"

graphrag:
  enabled: false
  neo4jNameOverride: "graphrag-neo4j" # This needs to match the value in neo4j.fullnameOverride

# neo4j is used by graphrag to store the graph data. If graphrag.enabled is false, neo4j is not deployed.
neo4j:
  fullnameOverride: "graphrag-neo4j"
  config:
    server.directories.plugins: "/var/lib/neo4j/labs"
    dbms.security.procedures.unrestricted: "apoc.*"
    dbms.security.procedures.allowlist: "apoc.*"
    server.config.strict_validation.enabled: "false"
  apoc_config:
    apoc.trigger.enabled: "true"
    apoc.import.file.enabled: "true"
  disableLookups: true
  services:
    neo4j:
      enabled: false
  neo4j:
    name: graphrag-neo4j
    password: "dummy_password" # This dummy password needs to match the value in graphrag.neo4j.auth.password
    resources:
      cpu: "1"
      memory: "2Gi"

  volumes:
    data:
      mode: "dynamic"
      dynamic:
        storageClassName: gp2

# KB-RAG Stack - Complete stack including web, server, agent, Redis, and Milvus
kb-rag-stack:
  enabled: false

  # Milvus configuration
  milvus:
    enabled: true
    cluster:
      enabled: false
    etcd:
      replicaCount: 1
    pulsar:
      enabled: false
    minio:
      mode: standalone
    standalone:
      replicas: 1
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi

  # KB-RAG Web configuration
  kb-rag-web:
    enabled: true
    image:
      repository: "ghcr.io/cnoe-io/kb-rag-web"
      tag: "latest"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 80

    ingress:
      enabled: false
      className: ""
      annotations: {}
      hosts:
        - host: kb-rag-web.local
          paths:
            - path: /
              pathType: Prefix
      tls: []

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

  # KB-RAG Server configuration
  kb-rag-server:
    enabled: true
    image:
      repository: "ghcr.io/cnoe-io/kb-rag-server"
      tag: "latest"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 9446

    env:
      REDIS_URL: "redis://kb-rag-redis:6379/0"
      MILVUS_HOST: "milvus-standalone"
      MILVUS_PORT: "19530"

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

  # Agent configuration (standard agent chart)
  kb-rag-agent:
    enabled: true
    nameOverride: "kb-rag-agent"
    image:
      repository: "ghcr.io/cnoe-io/kb-rag-agent-a2a"
      tag: "latest"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 8000

    env:
      MILVUS_HOST: "milvus-standalone"
      MILVUS_PORT: "19530"

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 2Gi

  # KB-RAG Redis configuration
  kb-rag-redis:
    enabled: true
    image:
      repository: "redis"
      tag: "7.2-alpine"
      pullPolicy: "Always"

    service:
      type: ClusterIP
      port: 6379

    persistence:
      enabled: true
      size: 1Gi
      storageClass: ""

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

    # Redis configuration
    redis:
      maxmemory: "256mb"
      maxmemoryPolicy: "allkeys-lru"
      save: "60 1"
      appendonly: "yes"
