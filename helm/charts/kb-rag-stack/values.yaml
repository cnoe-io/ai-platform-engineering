# Default values for kb-rag-stack
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  secrets:
    secretName: "llm-secret"
  slim:
    enabled: false

# Milvus configuration
milvus:
  enabled: true
  cluster:
    enabled: false
  etcd:
    replicaCount: 1
  pulsar:
    enabled: false
  minio:
    mode: standalone
  standalone:
    replicas: 1
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

# KB-RAG Web configuration
kb-rag-web:
  enabled: true
  image:
    repository: "ghcr.io/cnoe-io/kb-rag-web"
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    className: ""
    annotations: {}
    hosts:
      - host: kb-rag-web.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# KB-RAG Server configuration
kb-rag-server:
  enabled: true
  image:
    repository: "ghcr.io/cnoe-io/kb-rag-server"
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 9446

  env:
    REDIS_URL: "redis://kb-rag-redis:6379/0"
    MILVUS_HOST: "milvus-standalone"
    MILVUS_PORT: "19530"

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Agent configuration (standard agent chart)
agent:
  enabled: true
  nameOverride: "agent-kb-rag"
  image:
    repository: "ghcr.io/cnoe-io/kb-rag-agent-a2a"
    tag: "latest"
    pullPolicy: "Always"

  service:
    type: ClusterIP
    port: 8000

  env:
    MILVUS_HOST: "milvus-standalone"
    MILVUS_PORT: "19530"

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 2Gi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
# KB-RAG Redis configuration
kb-rag-redis:
  enabled: true
  image:
    repository: "redis"
    tag: "7.2-alpine"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 6379

  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""

  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

  # Redis configuration
  redis:
    maxmemory: "256mb"
    maxmemoryPolicy: "allkeys-lru"
    save: "60 1"
    appendonly: "yes"

# Service dependencies configuration
dependencies:
  kb-rag-web:
    dependsOn:
      - kb-rag-server
  kb-rag-server:
    dependsOn:
      - kb-rag-redis
      - milvus
  agent:
    dependsOn:
      - milvus
  kb-rag-redis:
    dependsOn: []
  milvus:
    dependsOn: []

# Common labels and annotations
commonLabels: {}
commonAnnotations: {}

# Node selector, tolerations, and affinity
nodeSelector: {}
tolerations: []
affinity: {}