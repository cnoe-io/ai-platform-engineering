global:
  externalSecrets:
    enabled: true # Enable external secrets management globally
    secretStoreRef:
      name: "vault" # Use your secret store
      kind: ClusterSecretStore # Use your secret store kind

  agentSecrets:
    create: true

  llmSecrets:
    secretName: "external-llm-secret" # this is your target name
    externalSecrets:
      data:
      - secretKey: LLM_PROVIDER
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/llm-provider # Use your key path
          property: LLM_PROVIDER

      # Azure OpenAI configuration
      - secretKey: AZURE_OPENAI_API_KEY
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/azure-openai # Use your key path
          property: AZURE_OPENAI_API_KEY
      - secretKey: AZURE_OPENAI_ENDPOINT
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/azure-openai # Use your key path
          property: AZURE_OPENAI_ENDPOINT
      - secretKey: AZURE_OPENAI_API_VERSION
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/azure-openai # Use your key path
          property: AZURE_OPENAI_API_VERSION
      - secretKey: AZURE_OPENAI_DEPLOYMENT
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/azure-openai # Use your key path
          property: AZURE_OPENAI_DEPLOYMENT

      # OpenAI configuration
      # - secretKey: OPENAI_API_KEY
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/openai # Use your key path
      #     property: OPENAI_API_KEY
      # - secretKey: OPENAI_ENDPOINT
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/openai # Use your key path
      #     property: OPENAI_ENDPOINT
      # - secretKey: OPENAI_MODEL_NAME
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/openai # Use your key path
      #     property: OPENAI_MODEL_NAME

      # AWS Bedrock configuration
      # - secretKey: AWS_ACCESS_KEY_ID
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/aws-bedrock # Use your key path
      #     property: AWS_ACCESS_KEY_ID
      # - secretKey: AWS_SECRET_ACCESS_KEY
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/aws-bedrock # Use your key path
      #     property: AWS_SECRET_ACCESS_KEY
      # - secretKey: AWS_REGION
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/aws-bedrock # Use your key path
      #     property: AWS_REGION
      # - secretKey: AWS_BEDROCK_MODEL_ID
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/aws-bedrock # Use your key path
      #     property: AWS_BEDROCK_MODEL_ID
      # - secretKey: AWS_BEDROCK_PROVIDER
      #   remoteRef:
      #     conversionStrategy: Default
      #     decodingStrategy: None
      #     key: dev/aws-bedrock # Use your key path
      #     property: AWS_BEDROCK_PROVIDER

agent-argocd:
  agentSecrets:
    secretName: "external-argocd-secret"
    externalSecrets:
      data:
      - secretKey: ARGOCD_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/argocd # Use your key path
          property: ARGOCD_TOKEN
      - secretKey: ARGOCD_API_URL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/argocd # Use your key path
          property: ARGOCD_API_URL
      - secretKey: ARGOCD_VERIFY_SSL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/argocd # Use your key path
          property: ARGOCD_VERIFY_SSL

agent-pagerduty:
  agentSecrets:
    secretName: "external-pagerduty-secret"
    externalSecrets:
      data:
      - secretKey: PAGERDUTY_API_KEY
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/pagerduty # Use your key path
          property: PAGERDUTY_API_KEY
      - secretKey: PAGERDUTY_API_URL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/pagerduty # Use your key path
          property: PAGERDUTY_API_URL

agent-github:
  agentSecrets:
    secretName: "external-github-secret"
    externalSecrets:
      data:
      - secretKey: GITHUB_PERSONAL_ACCESS_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/github # Use your key path
          property: GITHUB_PERSONAL_ACCESS_TOKEN

agent-atlassian:
  agentSecrets:
    secretName: "external-atlassian-secret"
    externalSecrets:
      data:
      - secretKey: ATLASSIAN_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/atlassian # Use your key path
          property: ATLASSIAN_TOKEN
      - secretKey: ATLASSIAN_EMAIL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/atlassian # Use your key path
          property: ATLASSIAN_EMAIL
      - secretKey: ATLASSIAN_API_URL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/atlassian # Use your key path
          property: ATLASSIAN_API_URL

agent-backstage:
  agentSecrets:
    secretName: "external-backstage-secret"
    externalSecrets:
      data:
      - secretKey: BACKSTAGE_API_KEY
        remoteRef:
          conversionStrategy: Default

agent-slack:
  agentSecrets:
    secretName: "external-slack-secret"
    externalSecrets:
      data:
      - secretKey: SLACK_BOT_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/slack # Use your key path
          property: SLACK_BOT_TOKEN
      - secretKey: SLACK_APP_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/slack # Use your key path
          property: SLACK_APP_TOKEN
      - secretKey: SLACK_SIGNING_SECRET
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/slack # Use your key path
          property: SLACK_SIGNING_SECRET
      - secretKey: SLACK_CLIENT_SECRET
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/slack # Use your key path
          property: SLACK_CLIENT_SECRET
      - secretKey: SLACK_TEAM_ID
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/slack # Use your key path
          property: SLACK_TEAM_ID

agent-confluence:
  agentSecrets:
    secretName: "external-confluence-secret"
    externalSecrets:
      data:
      - secretKey: ATLASSIAN_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_TOKEN
      - secretKey: ATLASSIAN_EMAIL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_EMAIL
      - secretKey: ATLASSIAN_API_URL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_API_URL
      - secretKey: ATLASSIAN_VERIFY_SSL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_VERIFY_SSL

agent-jira:
  agentSecrets:
    secretName: "external-jira-secret"
    externalSecrets:
      data:
      - secretKey: ATLASSIAN_TOKEN
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_TOKEN
      - secretKey: ATLASSIAN_EMAIL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_EMAIL
      - secretKey: ATLASSIAN_API_URL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_API_URL
      - secretKey: ATLASSIAN_VERIFY_SSL
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/confluence # Use your key path
          property: ATLASSIAN_VERIFY_SSL

agent-litellm:
  agentSecrets:
    secretName: "external-litellm-secret"
    externalSecrets:
      # TODO: is this correct?
      data:
      - secretKey: LITEMM_API_KEY
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/litellm # Use your key path
          property: LITEMM_API_KEY

kb-rag-stack:
  kb-rag-agent:
    agentSecrets:
      data:
      - secretKey: MILVUS_SECRET
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: dev/milvus # Use your key path
          property: MILVUS_SECRET
