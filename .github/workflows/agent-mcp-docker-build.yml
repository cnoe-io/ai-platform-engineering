name: MCP Docker Build and Push

on:
  push:
    branches:
      - main
    # Build on all new tags as well
    tags:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  determine-agents:
    runs-on: ubuntu-latest
    outputs:
      agents: ${{ steps.set-matrix.outputs.agents }}
      should_build: ${{ steps.set-matrix.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Detect changed paths (MCP)
        id: filter
        uses: dorny/paths-filter@v3
        with:
          predicate-quantifier: 'every'
          filters: |
            argocd:
              - 'ai_platform_engineering/agents/argocd/mcp/**'
              - 'ai_platform_engineering/agents/argocd/build/Dockerfile.mcp'
            backstage:
              - 'ai_platform_engineering/agents/backstage/mcp/**'
              - 'ai_platform_engineering/agents/backstage/build/Dockerfile.mcp'
            confluence:
              - 'ai_platform_engineering/agents/confluence/mcp/**'
              - 'ai_platform_engineering/agents/confluence/build/Dockerfile.mcp'
            jira:
              - 'ai_platform_engineering/agents/jira/mcp/**'
              - 'ai_platform_engineering/agents/jira/build/Dockerfile.mcp'
            komodor:
              - 'ai_platform_engineering/agents/komodor/mcp/**'
              - 'ai_platform_engineering/agents/komodor/build/Dockerfile.mcp'
            pagerduty:
              - 'ai_platform_engineering/agents/pagerduty/mcp/**'
              - 'ai_platform_engineering/agents/pagerduty/build/Dockerfile.mcp'
            slack:
              - 'ai_platform_engineering/agents/slack/mcp/**'
              - 'ai_platform_engineering/agents/slack/build/Dockerfile.mcp'
            splunk:
              - 'ai_platform_engineering/agents/splunk/mcp/**'
              - 'ai_platform_engineering/agents/splunk/build/Dockerfile.mcp'
            litellm:
              - 'ai_platform_engineering/agents/litellm/mcp/**'
              - 'ai_platform_engineering/agents/litellm/build/Dockerfile.mcp'

      - name: Set matrix based on changes (MCP)
        id: set-matrix
        uses: actions/github-script@v7
        env:
          BUILD_ALL: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
          CHANGED_ARGOCD: ${{ steps.filter.outputs.argocd }}
          CHANGED_BACKSTAGE: ${{ steps.filter.outputs.backstage }}
          CHANGED_CONFLUENCE: ${{ steps.filter.outputs.confluence }}
          CHANGED_JIRA: ${{ steps.filter.outputs.jira }}
          CHANGED_KOMODOR: ${{ steps.filter.outputs.komodor }}
          CHANGED_PAGERDUTY: ${{ steps.filter.outputs.pagerduty }}
          CHANGED_SLACK: ${{ steps.filter.outputs.slack }}
          CHANGED_SPLUNK: ${{ steps.filter.outputs.splunk }}
          CHANGED_LITTELM: ${{ steps.filter.outputs.litellm }}
        with:
          script: |
            const allAgents = [
              'argocd','backstage','confluence','jira','komodor','pagerduty','slack','splunk','litellm'
            ];
            const buildAll = process.env.BUILD_ALL === 'true';
            let selected;
            if (buildAll) {
              selected = allAgents;
            } else {
              const env = process.env;
              selected = allAgents.filter(a => env['CHANGED_' + a.toUpperCase()] === 'true');
            }
            core.setOutput('agents', JSON.stringify(selected));
            core.setOutput('should_build', String(selected.length > 0));

  build-and-push:
    runs-on: ubuntu-latest
    needs: determine-agents
    if: needs.determine-agents.outputs.should_build == 'true'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        agent: ${{ fromJson(needs.determine-agents.outputs.agents) }}
      fail-fast: false

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: cnoe-io/mcp-${{ matrix.agent }}
      AGENT_DIR: ai_platform_engineering/agents/${{ matrix.agent }}

    steps:
      - name: ðŸ”’ harden runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch,prefix=
            type=ref,event=tag,prefix=
            type=sha,format=short,prefix=

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build and Push MCP Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.AGENT_DIR }}
          file: ${{ env.AGENT_DIR }}/build/Dockerfile.mcp
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max