name: Detailed Integration Tests

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detailed-sanity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env from GitHub Secrets
        run: |
          set -euo pipefail
          # Create .env using commonly referenced keys. Add more as needed.
          # If your repo has `.env.example`, update this list to match its keys, and
          # ensure corresponding GitHub Action secrets exist with the same names.
          cat > .env << 'EOF'

          # Optional/if used by agents or knowledge base services
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
          AZURE_OPENAI_API_VERSION=${{ secrets.AZURE_OPENAI_API_VERSION }}

          ARGOCD_TOKEN=${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_API_URL=${{ secrets.ARGOCD_API_URL }}
          ARGOCD_VERIFY_SSL=true

          BACKSTAGE_API_TOKEN=${{ secrets.BACKSTAGE_API_TOKEN }}
          BACKSTAGE_URL=${{ secrets.BACKSTAGE_URL }}

          ATLASSIAN_TOKEN=${{ secrets.ATLASSIAN_TOKEN }}
          ATLASSIAN_EMAIL=${{ secrets.ATLASSIAN_EMAIL }}
          ATLASSIAN_API_URL=${{ secrets.ATLASSIAN_API_URL }}
          ATLASSIAN_VERIFY_SSL=true

          CONFLUENCE_API_URL=${{ secrets.CONFLUENCE_API_URL }}

          PAGERDUTY_API_KEY=${{ secrets.PAGERDUTY_API_KEY }}
          PAGERDUTY_API_URL=https://api.pagerduty.com

          SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}
          SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }}
          SLACK_CLIENT_SECRET=${{ secrets.SLACK_CLIENT_SECRET }}
          SLACK_TEAM_ID=${{ secrets.SLACK_TEAM_ID }}


          A2A_TRANSPORT=p2p
          ENABLE_TRACING=false
          EOF
          # Mask non-empty values to avoid accidental log exposure
          while IFS='=' read -r k v; do
            [ -z "${k:-}" ] && continue
            [ "${k#\#}" != "$k" ] && continue
            if [ -n "${v:-}" ]; then
              echo "::add-mask::${v}"
            fi
          done < .env

      - name: Show Docker version
        run: |
          docker version
          docker compose version || true

      - name: Start AI Platform Engineering services
        run: |
          IMAGE_TAG=stable docker compose -f docker-compose.yaml --profile=p2p up -d

      - name: Wait for ai-platform-engineering services to be ready
        run: |
          set -euo pipefail
          for i in $(seq 1 36); do
            if curl -sfS http://localhost:8000/ >/dev/null 2>&1; then
              echo "Service responded on /"
              exit 0
            fi
            if curl -sfS http://localhost:8000/.well-known/agent.json >/dev/null 2>&1; then
              echo "Service responded on /.well-known/agent.json"
              exit 0
            fi
            echo "Waiting for service on http://localhost:8000 ... ($i)"
            sleep 5
          done
          echo "Service on http://localhost:8000 did not become ready in time"
          exit 1

      - name: Setup Python for A2A client test
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Run detailed integration tests
        run: |
          make detailed-test