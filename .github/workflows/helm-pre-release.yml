name: "[Pre-Release] Helm Chart"
description: "Publish pre-release Helm charts"

on:
  pull_request:
    paths:
      - charts/**
  pull_request_target:
    types: [closed]
    paths:
      - charts/**

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  publish-pre-release:
    name: Publish Pre-release Helm Chart
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      startsWith(github.head_ref, 'pre/') &&
      github.event.action != 'closed'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: ⚙️ Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: 🔐 Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 🔍 Detect Changed Charts
        id: detect
        run: |
          # Detect which charts have changes (excluding Chart.lock only changes)
          git fetch origin main

          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check which charts changed (excluding Chart.lock only changes)
          RAG_STACK_CHANGED=false
          AI_PLATFORM_CHANGED=false

          # Check rag-stack changes
          if echo "$CHANGED_FILES" | grep -q "^charts/rag-stack/"; then
            # Check if changes are more than just Chart.lock
            if echo "$CHANGED_FILES" | grep "^charts/rag-stack/" | grep -qv "Chart.lock$"; then
              RAG_STACK_CHANGED=true
              echo "✅ rag-stack chart has substantive changes"
            else
              echo "ℹ️  rag-stack only has Chart.lock changes, skipping pre-release"
            fi
          fi

          # Check ai-platform-engineering changes
          if echo "$CHANGED_FILES" | grep -q "^charts/ai-platform-engineering/"; then
            # Check if changes are more than just Chart.lock
            if echo "$CHANGED_FILES" | grep "^charts/ai-platform-engineering/" | grep -qv "Chart.lock$"; then
              AI_PLATFORM_CHANGED=true
              echo "✅ ai-platform-engineering chart has substantive changes"
            else
              echo "ℹ️  ai-platform-engineering only has Chart.lock changes, skipping pre-release"
            fi
          fi

          echo "rag-stack-changed=$RAG_STACK_CHANGED" >> $GITHUB_OUTPUT
          echo "ai-platform-changed=$AI_PLATFORM_CHANGED" >> $GITHUB_OUTPUT

      - name: 🏷️ Generate Pre-release Versions
        id: version
        run: |
          # Get branch name without 'pre/' prefix and sanitize for version
          BRANCH_NAME="${{ github.head_ref }}"
          CLEAN_BRANCH=$(echo "${BRANCH_NAME#pre/}" | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')

          # Get commit count for this PR
          COMMIT_COUNT=$(git rev-list --count origin/${{ github.event.pull_request.base.ref }}..HEAD)

          echo "clean-branch=$CLEAN_BRANCH" >> $GITHUB_OUTPUT
          echo "commit-count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

          # Generate version for rag-stack if changed
          if [[ "${{ steps.detect.outputs.rag-stack-changed }}" == "true" ]]; then
            # Check if chart exists in main
            if git show origin/main:charts/rag-stack/Chart.yaml &>/dev/null; then
              RAG_STACK_BASE=$(git show origin/main:charts/rag-stack/Chart.yaml | grep "^version:" | awk '{print $2}')
              IFS='.' read -r MAJOR MINOR PATCH <<< "$RAG_STACK_BASE"
              NEXT_PATCH=$((PATCH + 1))
              RAG_STACK_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-${CLEAN_BRANCH}-${COMMIT_COUNT}"
            else
              echo "ℹ️ rag-stack is a new chart (doesn't exist in main), using PR version"
              RAG_STACK_VERSION=$(grep "^version:" charts/rag-stack/Chart.yaml | awk '{print $2}')
              RAG_STACK_VERSION="${RAG_STACK_VERSION}-${CLEAN_BRANCH}-${COMMIT_COUNT}"
            fi
            echo "rag-stack version: $RAG_STACK_VERSION"
            echo "rag-stack-version=$RAG_STACK_VERSION" >> $GITHUB_OUTPUT
          fi

          # Generate version for ai-platform-engineering if changed
          if [[ "${{ steps.detect.outputs.ai-platform-changed }}" == "true" ]]; then
            # Check if chart exists in main
            if git show origin/main:charts/ai-platform-engineering/Chart.yaml &>/dev/null; then
              AI_PLATFORM_BASE=$(git show origin/main:charts/ai-platform-engineering/Chart.yaml | grep "^version:" | awk '{print $2}')
              IFS='.' read -r MAJOR MINOR PATCH <<< "$AI_PLATFORM_BASE"
              NEXT_PATCH=$((PATCH + 1))
              AI_PLATFORM_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-${CLEAN_BRANCH}-${COMMIT_COUNT}"
            else
              echo "ℹ️ ai-platform-engineering is a new chart (doesn't exist in main), using PR version"
              AI_PLATFORM_VERSION=$(grep "^version:" charts/ai-platform-engineering/Chart.yaml | awk '{print $2}')
              AI_PLATFORM_VERSION="${AI_PLATFORM_VERSION}-${CLEAN_BRANCH}-${COMMIT_COUNT}"
            fi
            echo "ai-platform-engineering version: $AI_PLATFORM_VERSION"
            echo "ai-platform-version=$AI_PLATFORM_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Package rag-stack Chart
        if: steps.detect.outputs.rag-stack-changed == 'true'
        run: |
          echo "📦 Packaging rag-stack..."

          mkdir -p ./packaged-charts

          # Update Chart.yaml with pre-release version
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.rag-stack-version }}/" charts/rag-stack/Chart.yaml

          # Update dependencies and package
          helm dependency update charts/rag-stack/
          helm package charts/rag-stack/ --destination ./packaged-charts/

          echo "✅ rag-stack packaged successfully"

      - name: 📦 Package ai-platform-engineering Chart
        if: steps.detect.outputs.ai-platform-changed == 'true'
        run: |
          echo "📦 Packaging ai-platform-engineering..."

          mkdir -p ./packaged-charts

          # Update Chart.yaml with pre-release version
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.ai-platform-version }}/" charts/ai-platform-engineering/Chart.yaml

          # If rag-stack was also changed, update its dependency version
          if [[ "${{ steps.detect.outputs.rag-stack-changed }}" == "true" ]]; then
            echo "📝 Updating rag-stack dependency version to ${{ steps.version.outputs.rag-stack-version }}"
            sed -i "/name: rag-stack/,/repository:/ s/version:.*/version: ${{ steps.version.outputs.rag-stack-version }}/" charts/ai-platform-engineering/Chart.yaml
          fi

          # CRITICAL: Always update rag-stack dependencies first
          # ai-platform-engineering depends on rag-stack, which depends on neo4j and milvus
          # These external dependencies must be downloaded regardless of path changes
          echo "Updating rag-stack dependencies..."
          helm dependency update charts/rag-stack/
          
          echo "Updating ai-platform-engineering dependencies..."
          helm dependency update charts/ai-platform-engineering/
          
          helm package charts/ai-platform-engineering/ --destination ./packaged-charts/
          
          # Verify dependencies are packaged correctly
          echo "🔍 Verifying rag-stack dependencies..."
          if tar -tzf charts/ai-platform-engineering/charts/rag-stack-*.tgz | grep -q "neo4j.*\.tgz"; then
            echo "✅ neo4j dependency verified"
          else
            echo "❌ ERROR: neo4j missing from rag-stack package"
            exit 1
          fi
          
          if tar -tzf charts/ai-platform-engineering/charts/rag-stack-*.tgz | grep -q "milvus.*\.tgz"; then
            echo "✅ milvus dependency verified"
          else
            echo "❌ ERROR: milvus missing from rag-stack package"
            exit 1
          fi

          echo "✅ ai-platform-engineering packaged successfully with all dependencies"

      - name: 🚀 Push Pre-release Charts to GHCR
        run: |
          REGISTRY="oci://ghcr.io/${{ github.repository_owner }}/pre-release-helm-charts"

          echo "📦 Pushing pre-release charts to $REGISTRY"

          for CHART_FILE in ./packaged-charts/*.tgz; do
            if [ -f "$CHART_FILE" ]; then
              CHART_NAME=$(helm show chart "$CHART_FILE" | grep '^name:' | awk '{print $2}')
              CHART_VERSION=$(helm show chart "$CHART_FILE" | grep '^version:' | awk '{print $2}')

              echo "📦 Pushing $CHART_NAME:$CHART_VERSION"
              helm push "$CHART_FILE" "$REGISTRY"
              echo "✅ $CHART_NAME:$CHART_VERSION published successfully!"
            fi
          done

      - name: 💬 Comment on PR
        uses: actions/github-script@v8
        with:
          script: |
            const registry = `ghcr.io/${{ github.repository_owner }}/pre-release-helm-charts`;
            const ragStackChanged = '${{ steps.detect.outputs.rag-stack-changed }}' === 'true';
            const aiPlatformChanged = '${{ steps.detect.outputs.ai-platform-changed }}' === 'true';

            let body = `## 📦 Pre-release Helm Charts Published\n\n`;
            body += `**Registry:** \`${registry}\`\n\n`;

            if (ragStackChanged) {
              const version = '${{ steps.version.outputs.rag-stack-version }}';
              body += `### rag-stack\n`;
              body += `**Version:** \`${version}\`\n\n`;
              body += `\`\`\`bash\n`;
              body += `helm upgrade --install rag oci://${registry}/rag-stack --version ${version}\n`;
              body += `\`\`\`\n\n`;
            }

            if (aiPlatformChanged) {
              const version = '${{ steps.version.outputs.ai-platform-version }}';
              body += `### ai-platform-engineering\n`;
              body += `**Version:** \`${version}\`\n\n`;
              body += `\`\`\`bash\n`;
              body += `helm upgrade --install ai-platform oci://${registry}/ai-platform-engineering --version ${version}\n`;
              body += `\`\`\`\n\n`;
            }

            body += `> **Note:** These pre-release versions will be automatically cleaned up when the PR is closed or merged.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  cleanup-pre-release:
    name: Cleanup Pre-release Charts
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' &&
      github.event.action == 'closed' &&
      startsWith(github.event.pull_request.head.ref, 'pre/')

    steps:
      - name: 🔐 Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 🗑️ Delete Pre-release Chart Versions
        run: |
          # Get branch name and sanitize
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          CLEAN_BRANCH=$(echo "${BRANCH_NAME#pre/}" | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')

          echo "🧹 Cleaning up pre-release versions for branch: $CLEAN_BRANCH"

          OWNER="${{ github.repository_owner }}"

          # Function to cleanup a chart
          cleanup_chart() {
            local CHART_NAME=$1
            local PACKAGE_NAME="pre-release-helm-charts/${CHART_NAME}"

            echo "🔍 Checking ${CHART_NAME} for pre-release versions matching pattern: *-${CLEAN_BRANCH}-*"

            # Get package versions using GitHub CLI (for OCI packages)
            # Note: Forward slash in package name must be URL encoded as %2F
            gh api \
              "/orgs/${OWNER}/packages/container/$(echo "${PACKAGE_NAME}" | sed 's|/|%2F|g')/versions" \
              --jq '.[] | select(.metadata.container.tags[]? | test(".*-'${CLEAN_BRANCH}'-.*")) | {id: .id, tags: .metadata.container.tags}' > "${CHART_NAME}_versions.json" || true

            if [ -s "${CHART_NAME}_versions.json" ]; then
              echo "🗑️ Found ${CHART_NAME} pre-release versions to delete:"
              cat "${CHART_NAME}_versions.json"

              # Delete each version
              while IFS= read -r version; do
                VERSION_ID=$(echo "$version" | jq -r '.id')
                TAGS=$(echo "$version" | jq -r '.tags | join(", ")')

                echo "Deleting ${CHART_NAME} version $VERSION_ID with tags: $TAGS"

                gh api \
                  --method DELETE \
                  "/orgs/${OWNER}/packages/container/$(echo "${PACKAGE_NAME}" | sed 's|/|%2F|g')/versions/${VERSION_ID}" || true
              done < <(cat "${CHART_NAME}_versions.json" | jq -c '.')

              echo "✅ ${CHART_NAME} pre-release cleanup completed"
            else
              echo "ℹ️ No ${CHART_NAME} pre-release versions found for branch: $CLEAN_BRANCH"
            fi
          }

          # Cleanup both charts
          cleanup_chart "rag-stack"
          cleanup_chart "ai-platform-engineering"

          echo "✅ All pre-release chart cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
