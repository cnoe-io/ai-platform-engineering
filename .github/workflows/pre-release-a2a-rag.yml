name: "[Pre-Release][A2A] CAIPE RAG Build and Push"
description: "Build and push CAIPE RAG Docker image"

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - 'ai_platform_engineering/knowledge_bases/rag/**'
      - '.github/**'
  workflow_dispatch:

jobs:
  determine-components:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      startsWith(github.head_ref, 'prebuild/') &&
      github.event.action != 'closed'
    outputs:
      components: ${{ steps.set-matrix.outputs.components }}
      should_build: ${{ steps.set-matrix.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            shared:
              - 'ai_platform_engineering/knowledge_bases/rag/common/**'
              - 'ai_platform_engineering/knowledge_bases/rag/requirements.txt'
              - '.github/**'
            agent-rag:
              - 'ai_platform_engineering/knowledge_bases/rag/agent_rag/**'
              - 'ai_platform_engineering/knowledge_bases/rag/build/Dockerfile.agent-rag'
            agent-ontology:
              - 'ai_platform_engineering/knowledge_bases/rag/agent_ontology/**'
              - 'ai_platform_engineering/knowledge_bases/rag/build/Dockerfile.agent-ontology'
            server:
              - 'ai_platform_engineering/knowledge_bases/rag/server/**'
              - 'ai_platform_engineering/knowledge_bases/rag/build/Dockerfile.server'
            webui:
              - 'ai_platform_engineering/knowledge_bases/rag/webui/**'
              - 'ai_platform_engineering/knowledge_bases/rag/build/Dockerfile.webui'


      - name: Set matrix based on changes
        id: set-matrix
        uses: actions/github-script@v8
        env:
          BUILD_ALL: ${{ steps.filter.outputs.shared == 'true' }}
          CHANGED_AGENT_RAG: ${{ steps.filter.outputs.agent-rag }}
          CHANGED_AGENT_ONTOLOGY: ${{ steps.filter.outputs.agent-ontology }}
          CHANGED_SERVER: ${{ steps.filter.outputs.server }}
          CHANGED_WEBUI: ${{ steps.filter.outputs.webui }}
        with:
          script: |
            const allComponents = ['agent-rag', 'agent-ontology', 'server', 'webui'];
            const buildAll = process.env.BUILD_ALL === 'true';
            let selected;
            if (buildAll) {
              selected = allComponents;
            } else {
              const env = process.env;
              selected = allComponents.filter(c => {
                const envKey = 'CHANGED_' + c.toUpperCase().replace(/-/g, '_');
                return env[envKey] === 'true';
              });
            }
            core.setOutput('components', JSON.stringify(selected));
            core.setOutput('should_build', String(selected.length > 0));

  build-and-push:
    runs-on: ubuntu-latest
    needs: determine-components
    if: |
      needs.determine-components.outputs.should_build == 'true' &&
      startsWith(github.head_ref, 'prebuild/') &&
      github.event.action != 'closed'
    permissions:
      contents: read
      packages: write
      pull-requests: write

    strategy:
      matrix:
        component: ${{ fromJson(needs.determine-components.outputs.components) }}
      fail-fast: false

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: cnoe-io/prebuild/caipe-rag-${{ matrix.component }}
      BUILD_CTX: ai_platform_engineering/knowledge_bases/rag
      DOCKERFILE: ai_platform_engineering/knowledge_bases/rag/build/Dockerfile.${{ matrix.component }}

    steps:
      - name: 🔒 harden runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Free disk space
        run: |
          echo "Disk usage before cleanup:"
          df -h

          # Remove unnecessary packages and files
          sudo apt-get remove -y '^ghc-*' || true
          sudo apt-get remove -y '^dotnet-*' || true
          sudo apt-get remove -y '^llvm-*' || true
          sudo apt-get remove -y 'php*' || true
          sudo apt-get remove -y azure-cli google-cloud-cli hhvm google-chrome-stable firefox powershell mono-devel || true
          sudo apt-get autoremove -y
          sudo apt-get clean

          # Remove large directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          # Clean Docker system
          docker system prune -af --volumes || true

          echo "Disk usage after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute prebuild tag
        id: compute_tag
        shell: bash
        run: |
          BRANCH="${{ github.head_ref || github.ref_name }}"
          BRANCH_NO_PREFIX="${BRANCH#prebuild/}"
          BRANCH_SANITIZED="${BRANCH_NO_PREFIX//\//-}"
          git fetch origin ${{ github.event.pull_request.base.ref }}
          COMMIT_COUNT=$(git rev-list --count origin/${{ github.event.pull_request.base.ref }}..HEAD)
          echo "BRANCH_BARE=${BRANCH_SANITIZED}" >> $GITHUB_ENV
          echo "PREBUILD_TAG=${BRANCH_SANITIZED}-${COMMIT_COUNT}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.PREBUILD_TAG }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Clean up before build
        run: |
          echo "Cleaning up Docker system before build..."
          docker system prune -f --volumes || true
          echo "Current disk usage:"
          df -h

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BUILD_CTX }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        env:
          COMPONENT: ${{ matrix.component }}
          IMAGE_REPO: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_REF: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PREBUILD_TAG }}
          PREBUILD_TAG: ${{ env.PREBUILD_TAG }}
        with:
          script: |
            const body = `## 🐳 Prebuild Docker Image Published

            **Component:** \`${process.env.COMPONENT}\`
            **Repository:** \`${process.env.IMAGE_REPO}\`
            **Tag:** \`${process.env.PREBUILD_TAG}\`

            ### Usage
            \`\`\`bash
            docker pull ${process.env.IMAGE_REF}
            \`\`\`

            > **Note:** This prebuild image will be automatically cleaned up when the PR is closed or merged.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  cleanup-images:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && startsWith(github.event.pull_request.head.ref, 'prebuild/')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: ['agent-rag', 'agent-ontology', 'server', 'webui']
      fail-fast: false
    env:
      OWNER: ${{ github.repository_owner }}
      PACKAGE_NAME: prebuild/caipe-rag-${{ matrix.component }}
    steps:
      - name: Delete prebuild images for branch
        uses: actions/github-script@v8
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        with:
          script: |
            const owner = process.env.OWNER;
            const rawBranch = process.env.HEAD_REF || '';
            const branchNoPrefix = rawBranch.startsWith('prebuild/') ? rawBranch.substring('prebuild/'.length) : rawBranch;
            const sanitized = branchNoPrefix.replace(/\//g, '-');
            const prefix = `${sanitized}-`;
            const packageName = process.env.PACKAGE_NAME;
            const packageType = 'container';
            try {
              const versions = await github.paginate(github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg, {
                org: owner,
                package_type: packageType,
                package_name: packageName,
                per_page: 100,
              });
              const toDelete = versions.filter(v => (v.metadata?.container?.tags || []).some(t => t.startsWith(prefix)));
              for (const v of toDelete) {
                await github.rest.packages.deletePackageVersionForOrg({
                  org: owner,
                  package_type: packageType,
                  package_name: packageName,
                  package_version_id: v.id,
                });
              }
              core.info(`Deleted ${toDelete.length} versions for ${packageName} with tag prefix ${prefix}`);
            } catch (e) {
              if (e.status === 404) {
                core.info(`Package ${packageName} not found in org ${owner}, skipping.`);
              } else {
                throw e;
              }
            }