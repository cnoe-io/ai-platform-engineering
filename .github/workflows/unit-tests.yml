---
name: Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

          /home/runner/.local/bin/uv venv

          echo "Installing ai_platform_engineering, agents, and argocd..."

          source .venv/bin/activate && uv add pytest-asyncio pytest-cov --group unittest
          source .venv/bin/activate && uv add ai_platform_engineering/agents/argocd --dev
          source .venv/bin/activate && uv add ai_platform_engineering/agents/komodor --dev

          echo "Running tests with coverage..."
          source .venv/bin/activate && uv run pytest --ignore=integration --cov=ai_platform_engineering --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-main
          path: |
            coverage.xml
            htmlcov/

  run-rag-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Run RAG tests
        run: |
          /home/runner/.local/bin/uv venv
          source .venv/bin/activate && uv sync --no-dev
          source .venv/bin/activate && uv add --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match torch --force-reinstall
          source .venv/bin/activate && make test-rag-all

      - name: Upload RAG coverage reports
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-rag
          path: |
            ai_platform_engineering/knowledge_bases/rag/coverage.xml
            ai_platform_engineering/knowledge_bases/rag/htmlcov/

  coverage-report:
    runs-on: ubuntu-latest
    needs: [run-tests, run-rag-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download main coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-main
          path: ./main-coverage/

      - name: Download RAG coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-rag
          path: ./rag-coverage/

      - name: Generate coverage summary
        run: |
          echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for main coverage
          if [ -f "./main-coverage/coverage.xml" ]; then
            echo "### Main Tests Coverage" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "Main test suite coverage data available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for RAG coverage
          if [ -f "./rag-coverage/coverage.xml" ]; then
            echo "### RAG Tests Coverage" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "RAG test suite coverage data available" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ ! -f "./main-coverage/coverage.xml" ] && [ ! -f "./rag-coverage/coverage.xml" ]; then
            echo "‚ùå No coverage data available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Install coverage parsing dependencies
        run: |
          npm install xml2js

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const xml2js = require('xml2js');

            // Function to parse coverage XML and extract coverage data
            async function parseCoverageXML(filePath, testSuite) {
              try {
                if (!fs.existsSync(filePath)) {
                  return null;
                }

                const xmlContent = fs.readFileSync(filePath, 'utf8');
                const parser = new xml2js.Parser();
                const result = await parser.parseStringPromise(xmlContent);

                const coverage = result.coverage;
                if (!coverage || !coverage.$) {
                  return null;
                }

                const lineRate = parseFloat(coverage.$.line_rate) * 100;
                const branchRate = parseFloat(coverage.$.branch_rate) * 100;
                const linesCovered = parseInt(coverage.$.lines_covered);
                const linesValid = parseInt(coverage.$.lines_valid);
                const branchesCovered = parseInt(coverage.$.branches_covered);
                const branchesValid = parseInt(coverage.$.branches_valid);

                return {
                  testSuite,
                  lineRate: lineRate.toFixed(1),
                  branchRate: branchRate.toFixed(1),
                  linesCovered,
                  linesValid,
                  branchesCovered,
                  branchesValid
                };
              } catch (error) {
                console.log(`Error parsing ${filePath}:`, error.message);
                return null;
              }
            }

            // Generate coverage summary
            let coverageSummary = '## üìä Test Coverage Report\n\n';

            // Parse main coverage
            const mainCoverage = await parseCoverageXML('./main-coverage/coverage.xml', 'Main Tests');
            if (mainCoverage) {
              coverageSummary += `### ${mainCoverage.testSuite} Coverage\n`;
              coverageSummary += `| Metric | Coverage | Details |\n`;
              coverageSummary += `|--------|----------|----------|\n`;
              coverageSummary += `| **Lines** | ${mainCoverage.lineRate}% | ${mainCoverage.linesCovered}/${mainCoverage.linesValid} lines |\n`;
              coverageSummary += `| **Branches** | ${mainCoverage.branchRate}% | ${mainCoverage.branchesCovered}/${mainCoverage.branchesValid} branches |\n\n`;
            }

            // Parse RAG coverage
            const ragCoverage = await parseCoverageXML('./rag-coverage/coverage.xml', 'RAG Tests');
            if (ragCoverage) {
              coverageSummary += `### ${ragCoverage.testSuite} Coverage\n`;
              coverageSummary += `| Metric | Coverage | Details |\n`;
              coverageSummary += `|--------|----------|----------|\n`;
              coverageSummary += `| **Lines** | ${ragCoverage.lineRate}% | ${ragCoverage.linesCovered}/${ragCoverage.linesValid} lines |\n`;
              coverageSummary += `| **Branches** | ${ragCoverage.branchRate}% | ${ragCoverage.branchesCovered}/${ragCoverage.branchesValid} branches |\n\n`;
            }

            if (!mainCoverage && !ragCoverage) {
              coverageSummary += '‚ùå No coverage data available\n\n';
            }

            // Add coverage artifacts info
            coverageSummary += '### üìÅ Coverage Artifacts\n';
            coverageSummary += '- **Main tests**: `coverage-reports-main` artifact\n';
            coverageSummary += '- **RAG tests**: `coverage-reports-rag` artifact\n';
            coverageSummary += '- **Download artifacts** to view detailed HTML coverage reports\n';

            // Post comment to PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageSummary
            });
