name: "[Pre-Release][Agent Forge] Plugin Build and Push"
description: "Build and push pre-release Docker images for Agent Forge Plugin"

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - 'build/agent-forge/**'
      - '.github/workflows/ci-agent-forge-plugin.yml'
      - '.github/workflows/pre-release-agent-forge-plugin.yaml'

jobs:
  determine-build:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      startsWith(github.head_ref, 'prebuild/') &&
      github.event.action != 'closed'
    outputs:
      should_build: ${{ steps.set-build.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            agent-forge:
              - 'build/agent-forge/**'
              - '.github/workflows/ci-agent-forge-plugin.yml'
              - '.github/workflows/pre-release-agent-forge-plugin.yaml'

      - name: Set build flag
        id: set-build
        uses: actions/github-script@v8
        env:
          CHANGED_AGENT_FORGE: ${{ steps.filter.outputs.agent-forge }}
        with:
          script: |
            const shouldBuild = process.env.CHANGED_AGENT_FORGE === 'true';
            core.setOutput('should_build', String(shouldBuild));

  build-and-push:
    runs-on: ubuntu-latest
    needs: determine-build
    if: |
      needs.determine-build.outputs.should_build == 'true' &&
      startsWith(github.head_ref, 'prebuild/') &&
      github.event.action != 'closed'
    permissions:
      contents: read
      packages: write
      pull-requests: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: cnoe-io/prebuild/backstage-plugin-agent-forge

    steps:
      - name: 🔒 harden runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: main-repo
          fetch-depth: 0
          
      - name: Checkout community-plugins repository
        uses: actions/checkout@v4
        with:
          repository: cnoe-io/community-plugins
          ref: agent-forge-upstream-docker
          token: ${{ secrets.GITHUB_TOKEN }}
          path: community-plugins

      - name: Copy custom Dockerfile
        run: |
          cp main-repo/build/agent-forge/Dockerfile community-plugins/Dockerfile
          echo "Using custom Dockerfile from build/agent-forge/"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute prebuild tag
        id: compute_tag
        shell: bash
        run: |
          BRANCH="${{ github.head_ref || github.ref_name }}"
          BRANCH_NO_PREFIX="${BRANCH#prebuild/}"
          BRANCH_SANITIZED="${BRANCH_NO_PREFIX//\//-}"
          git -C main-repo fetch origin ${{ github.event.pull_request.base.ref }}
          COMMIT_COUNT=$(git -C main-repo rev-list --count origin/${{ github.event.pull_request.base.ref }}..HEAD)
          echo "BRANCH_BARE=${BRANCH_SANITIZED}" >> $GITHUB_ENV
          echo "PREBUILD_TAG=${BRANCH_SANITIZED}-${COMMIT_COUNT}" >> $GITHUB_ENV

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.PREBUILD_TAG }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build and push prebuild Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: community-plugins
          file: community-plugins/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        env:
          IMAGE_REPO: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_REF: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PREBUILD_TAG }}
          PREBUILD_TAG: ${{ env.PREBUILD_TAG }}
        with:
          script: |
            const body = `## 🐳 Prebuild Docker Image Published

            **Component:** Agent Forge Plugin
            **Repository:** \`${process.env.IMAGE_REPO}\`
            **Tag:** \`${process.env.PREBUILD_TAG}\`

            ### Usage
            \`\`\`bash
            docker pull ${process.env.IMAGE_REF}
            \`\`\`

            > **Note:** This prebuild image will be automatically cleaned up when the PR is closed or merged.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  cleanup-images:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && startsWith(github.event.pull_request.head.ref, 'prebuild/')
    permissions:
      contents: read
      packages: write
    env:
      OWNER: ${{ github.repository_owner }}
      PACKAGE_NAME: prebuild/backstage-plugin-agent-forge
    steps:
      - name: Delete prebuild images for branch
        uses: actions/github-script@v8
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        with:
          script: |
            const owner = process.env.OWNER;
            const rawBranch = process.env.HEAD_REF || '';
            const branchNoPrefix = rawBranch.startsWith('prebuild/') ? rawBranch.substring('prebuild/'.length) : rawBranch;
            const sanitized = branchNoPrefix.replace(/\//g, '-');
            const prefix = `${sanitized}-`;
            const packageName = process.env.PACKAGE_NAME;
            const packageType = 'container';
            try {
              const versions = await github.paginate(github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg, {
                org: owner,
                package_type: packageType,
                package_name: packageName,
                per_page: 100,
              });
              const toDelete = versions.filter(v => (v.metadata?.container?.tags || []).some(t => t.startsWith(prefix)));
              for (const v of toDelete) {
                await github.rest.packages.deletePackageVersionForOrg({
                  org: owner,
                  package_type: packageType,
                  package_name: packageName,
                  package_version_id: v.id,
                });
              }
              core.info(`Deleted ${toDelete.length} versions for ${packageName} with tag prefix ${prefix}`);
            } catch (e) {
              if (e.status === 404) {
                core.info(`Package ${packageName} not found in org ${owner}, skipping.`);
              } else {
                throw e;
              }
            }
