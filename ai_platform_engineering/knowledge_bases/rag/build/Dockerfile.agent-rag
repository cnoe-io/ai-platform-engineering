# First, build the application in the `/app` directory.
# See `Dockerfile` for details.
FROM ghcr.io/astral-sh/uv:python3.13-bookworm-slim AS builder
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy

# Disable Python downloads, because we want to use the system interpreter
# across both images. If using a managed Python version, it needs to be
# copied from the build image into the final image; see `standalone.Dockerfile`
# for an example.
ENV UV_PYTHON_DOWNLOADS=0

# Copy over the local dependencies
COPY knowledge_bases/rag/common /app/common

# Copy ai_platform_engineering utils for base agent classes
COPY utils /app/ai_platform_engineering/utils
COPY __init__.py /app/ai_platform_engineering/__init__.py

WORKDIR /app/agent_rag
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=knowledge_bases/rag/agent_rag/uv.lock,target=uv.lock \
    --mount=type=bind,source=knowledge_bases/rag/agent_rag/pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-dev

COPY knowledge_bases/rag/agent_rag .
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-dev


# Then, use a final image without uv
FROM python:3.13-slim-bookworm
# It is important to use the image that matches the builder, as the path to the
# Python executable must be the same, e.g., using `python:3.13-slim-bookworm`
# will fail.

# Create a non-root user
RUN groupadd --gid 1001 app && \
    useradd --uid 1001 --gid app --shell /bin/bash --create-home app

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

WORKDIR /app/agent_rag

# Place executables in the environment at the front of the path
ENV PATH="/app/agent_rag/.venv/bin:$PATH"

# Add /app to PYTHONPATH so ai_platform_engineering module can be imported
ENV PYTHONPATH="/app:${PYTHONPATH}"

# Use a non-root user to run the application
USER app

# Run the application by default
CMD ["python3", "src/agent_rag"]