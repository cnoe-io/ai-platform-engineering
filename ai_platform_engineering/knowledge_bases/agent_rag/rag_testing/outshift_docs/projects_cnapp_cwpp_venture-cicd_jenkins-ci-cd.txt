CWPP Jenkins
CWPP ci cd
development
ventures
Jenkins CI/CD
¶
The build lifecycle for Panoptica is currently forked from the usage of the SRE pipeline library to fit their needs. The SRE team is working on improving the usage of the SRE pipeline library so that it may be properly leveraged in the Panoptica pipelines and meet the customization/configuration of their pipelines.
All Jenkins pipelines can be found here:
K8SEC Jenkins pipelines
CI
¶
Most builds are customized to Panoptica's needs and are individually written with shell scripts and groovy, while not fully implementing the SRE standard pipeline library. The SRE team is currently working to better the pipeline library to fit these needs by updating the library and implementing new structures to their pipelines. An example of such configuration can be found here:
gopassivedns new pipeline
.
The JIRA story/subtasks
The CI process requires to follow our CSDL standards and image vulnerabilities checks
The CI process now utilizes the Panoptica image scanning tools in addition to Carona, Blackduck, and in some cases SonarQube scans
After Platform services for Jenkins stages monitoring are added, we will also have the ability to monitor and debug stage by stage processes
Platform pipeline library will be improved to meet all the needs of the currently forked pipelines
Parallel stages implementations
Panoptica image scanning
GAR/GCR image publish steps
Helm charts publish to GAR
System Tests monitoring
PR Pipeline
¶
The PR pipeline located
here
now includes a set of sanity tests together with UI test automation. The UI test automation is done using
Cypress
and is currently being improved to cover more of the UI functionality. In order to support this integration we have utilized the Jenkins
Junit Plugin
as well as the
artifacts
built in functionality, which allows us to store the test results and the videos taken during the test execution. The test results are then displayed in the PR page as shown below:
In Blue Ocean the results are displayed as follows under the respective tabs
Artifacts
and
Tests
:
For in depth implementation example, please refer to this
PR
Note
The PR pipeline is already utilizing the new stage metrics capabilities from our SRE pipeline library, they may be found
here
.
System Tests
¶
The
periodic-system-tests
pipeline is used to run the system tests for the Panoptica product. They are run periodically in ~2 hour intervals. The pipeline triggers itself at the end of each successful/unsuccessful run. In some edge cases where the pipeline has not been triggered (if for example in the first few stages), there is also a
system tests listener pipeline
which will trigger the system tests pipeline if it has not been triggered in the last hour. This is done to ensure that the system tests are run periodically and that the product is stable.
Note
The system tests pipeline is already utilizing the new stage metrics capabilities from our SRE pipeline library, they may be found
here
. In addition there is a metrics dashboard in GCP for tracking/alerting the current state, which can be found
here
.
CD
¶
In order to provide full consistency for the different environments being deployed during the development process, the SRE team is working on implementing CD with ArgoCD as its main platform/tool.
For more information on how to use ArgoCD and features
Argo CD implementation for Staging/Prod as of now:
Dev
¶
Development environments are currently created/deployed using Jenkins pipelines stated in the process here:
Developer Installation
SRE Team will be improving this process by separating the CI and CD processes to leverage the SRE pipeline library and the Argo CD platform.
This will stabilize the PR process
Keep individual/secluded feature branch testing/development
Keep consistency between all environments
dev->staging->production
and their deployment processes
Help developers debug issues during CI or CD in a more organized manner
Fully separate CI from CD responsibilities
Speed up parallelism and agility of feature development
Requirements:
Separate and secluded cluster for server side development
"Lean" deployments of all components or the option to chose which components to deploy
Pub/Sub topic creation per cluster component
Okta Preview username and linkage for the dev cluster
PostgreSQL for the cluster
Vault for the cluster with PostgreSQL backend
EventBridge event buses/rules for the cluster in the SecureCN AWS Account (579418176921) - in case of serverless component installation
CloudDNS A record creation per dev cluster deployed (i.e.
<dev CEC>.demo.panoptica.app
)
Staging
¶
ArgoCD Application
As per JIRA Item
SRE-4013
Staging will be implementing Argo CD deployments to have a fully managed GITOPS flow.
The main repository used for deploying the Panoptica product may be found here:
k8sec-server-deployment
. This repository holds the main HELM charts used to deploy the product.
Requirements:
Argo CD instance version 2.5+
Service Account binding structure prior to deployment
HELM charts restructure to fit proper dependency structure and deployments
"App of Apps" + multi cluster deployments to fit the needs of deploying
custom-metrics
component together with the
panoptica
main components in a cluster
This is currently done as a separate applicationset for the same Argo CD project
Should look into implementing
matrix generator
which allows both types of deployments
Vault deployment needs to be fixed to support GCP
CloudSQL
backend (this is where customer data is held)
Need to make sure that we are able to redeploy vault at any time and unseal it + configure the backend to properly work with the CloudSQL instance
External Secret Manager platform service should be implemented to support management of secrets outside of the cluster
Steps for deployment:
Create a feature branch in GIT
here
Update the helm charts (if needed)
Tip
ALWAYS BUMP THE HELM CHART VERSION IF CHANGES MADE
MUST
Update helm chart versions
(if you have done step 2.)
in the overlay
here
and
here
(staging/production values respectively)
Update the overlay values with latest values for deployment
here
and
here
(staging/production values respectively)
Commit + push your changes for Jenkins/ArgoCD to pick them up for Staging deployment
You may now track the deployments:
Panoptica-Staging-App
and
Panoptica-Custom-Metrics-Staging-App
Demo Portal
¶
Panoptica demo portal:
https://demo.panoptica.app/
is a customer facing website used for demoing the product. It is now utilizing blue/green deployments via the usage of
GKE Gateway API
which is also rolling out to kubernetes as a whole, you may see the status of Cloud Providers' implementations
here
.
For more in depth information on the process, please click
here
.
There are plans to also utilize ArgoCD for deployment of the demo portal in the future as well.
Production
¶
As per JIRA Item
SRE-4013
Production will be implementing Argo CD deployments to have a fully managed GITOPS flow.
The main repository used for deploying the Panoptica product may be found here:
k8sec-server-deployment
. This repository holds the main HELM charts used to deploy the product
Requirements:
Argo CD instance version 2.5+
Service Account binding structure prior to deployment
HELM charts restructure to fit proper dependency structure and deployments
"App of Apps" + multi cluster deployments to fit the needs of deploying
custom-metrics
component together with the
panoptica
main components in a cluster
This is currently done as a separate applicationset for the same Argo CD project
Should look into implementing
matrix generator
which allows both types of deployments
Vault deployment needs to be fixed to support GCP
CloudSQL
backend (this is where customer data is held)
Need to make sure that we are able to redeploy vault at any time and unseal it + configure the backend to properly work with the CloudSQL instance
External Secret Manager platform service should be implemented to support management of secrets outside of the cluster
Steps for deployment:
After fully testing changes in the Staging Environment, merge the PR/Feature branch
here
to
master
When pushing to the
master
branch, ArgoCD will know to deploy to production
2024-02-26