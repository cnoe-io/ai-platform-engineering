pentest november 2023
Pen Test November 2023
¶
Two week penetration test for 'eti-sre-platform ' kicks off on Monday, November 6, 2023 and runs until Friday, November 17, 2023. Pen tester for Nov 2023 engagement is Harsh from Synopsys.
Scoping Documents
¶
Scoping documents are provided
here
Environment Setup
¶
Here are the instructions to setup the environment.
AWS Account
¶
AWS Account Name/Number
: 244624147909 (eticloud-scratch-c)
AWS Access Role
:
AWS-244624147909-cluster-access
EKS access is provided via an AWS role that is managed via Cisco Active Directory group
Tip
Please setup the following pre-requisites:
- Install latest
AWS Cli
- Install
kubectl
- Setup aws cli access using
duo-sso cli
EKS Cluster
¶
EKS Cluster Name
: pen-test-1
AWS Region
: eu-west-1
Cluster
kubectl
access command line
aws
eks
update-kubeconfig
--name
pen-test-1
--region
eu-west-1
--alias
pen-test-1
Platform team installs various
3
rd
party baseapps
on EKS cluster for automation, security and observability.
RDS Cluster
¶
RDS Cluster
: pen-test-1.cluster-cvdetshbyjtf.eu-west-1.rds.amazonaws.com
AWS Region
: eu-west-1
Note
RDS access is restricted to EKS cluster only
There is a bastion access to RDS to ETI/Outshift Platform admins
Sample Apps
¶
sre-go-helloworld
¶
URL:
https://pen-test-a.dev.eticloud.io
Sample REST API application written in Go.
Stores data in RDS database
Note
The sample REST API does not have any authentication. This is only a test app to demonstrate platform not used in production.
Sample APIs
Add Pet
curl
--location
'https://pen-test-a.dev.eticloud.io/v1/pet'
\
--header
'Content-Type: application/json'
\
--data
'{
"name": "Tex",
"type": "Jack Russell Terrier",
"family": "Dog"
}'
List Pets
curl
--location
'https://pen-test-a.dev.eticloud.io/v1/pet'
canary-public
¶
Sample REST API application written in python to verify public internet connectivity. All data is pre-canned data and not production data
URL:
https://canary-test-public.pen-test-1.dev.eticloud.io/
Features:
Public app metrics
Public app configmap data
Public app Health status
canary-private
¶
Sample REST API application written in python to verify
Cisco Internal Only
connectivity. All data is pre-canned data and not production data
URL:
https://canary-test-private.int.pen-test-1.dev.eticloud.io/
Features:
Cisco internal app metrics
Cisco internal app configmap
Cisco internal app health status
Pentest report
¶
3.2.1.1 Privileged Pod Deployment â Container Breakout
¶
This is a valid finding, probably a result of accidental misconfiguration.
Comment from Sri:
"I intentional removed our security configuration (Panoptica) to test and likely forgot to put it back"
Action item: we will need a testing toolkit, a set of easy to run scripts to validate the security configurations of a production cluster.
We can consider to introduct a continuous compliance monitoring system?
3.2.2.1 Plaintext Credentials Stored in Kubernetes Secrets
¶
While Kubernetes secrets are the officially documented and canonical way of storing sensitive
information in environments, there is no large difference between storing sensitive data in a
secret, and in plaintext. An attacker who gains access to the container environment can simply
dump the secrets and base64 decode the associated strings, as there is no encryption involved.
Alternative strategies are available, using key-based encryption or third part tools such as
Hashicorp Vault that prevent simple smash and grab attacks against secrets.
Synopsys was able to dump TLS keys, Argo and Postgresql secrets, along with a large amount
of sensitive information that could lead to further compromise across all namespaces.
? Question:
Synopsys was able to dump TLS keys, Argo and Postgresql secrets, along with a large amount
of sensitive information that could lead to further compromise across all namespaces.
From the evidence it is not clear what privileges Synopsis used to dump these secrets?
The penetration testers were given
admin
access, that can be definitely used to access these secrets.
Comments:
An attacker who gains access to the container environment can simply
dump the secrets and base64 decode the associated strings
An attacker who gains access to the container environment can utilize multiple methods to obtain these secrets even if they are stored in an external secret manager solution:
- access running pods and dump secrets from their memory space, intercept network traffic, or environment (if secrets injected as environment variables)
- create new pods that have privileges to access the external secret manager solution
using key-based encryption or third part tools such as
Hashicorp Vault that prevent simple smash and grab attacks against secrets.
We are already using Hashicorp Vault in pair with external-secrets operator, because we cannot depend directly on Vault only
due to business continuity requirements.
Envelop encryption
already implemented based on
Kubernetes secrets good practices
.
3.2.2.2 Network Policies Not Enforced
¶
The cluster does not properly restrict horizontal network communication, resulting in a "flat
network" architecture.
Run the command kubectl get networkpolicy -A to view all network policies.
? Question: did Synopsys validate the possibility of lateral movement from the entry point?
Comment: it is true the lack of network policies can be obverved via the
kubectl get networkpolicy -A
command,
however there are network access restrictions implemented with Cilium network policy CRD:
â¯ kubectl get ciliumnetworkpolicies.cilium.io -A
NAMESPACE                      NAME                            AGE
appdynamics                    appdynamics                     32d
aws-load-balancer-controller   aws-load-balancer-controller    32d
canary-test-private            canary-test-private             33d
canary-test-public             canary-test-public              33d
cert-manager                   cert-manager                    32d
cluster-monitoring             cluster-monitoring              32d
default                        default                         33d
eks-ebs-storage                eks-ebs-storage                 32d
eti-cluster-alerts             eti-cluster-alerts              32d
eti-cluster-dashboards         eti-cluster-dashboards          32d
external-dns                   external-dns                    32d
external-secrets               external-secrets                32d
falcofsk                       falcofsk                        32d
imagepullsecrets               imagepullsecrets                32d
ingress-nginx-internal         ingress-nginx-internal          32d
ingress-nginx                  ingress-nginx                   32d
kube-node-lease                kube-node-lease                 32d
kube-public                    kube-public                     32d
kube-system                    kube-system                     32d
kubecost                       kubecost                        32d
one-eye-system                 one-eye-system                  32d
opa-gatekeeper                 opa-gatekeeper                  32d
panoptica-agent                panoptica-agent                 32d
pen-test-dev                   pen-test-dev-restrict-ingress   33d
portshift                      portshift                       32d
prometheus-operator-crds       prometheus-operator-crds        32d
reloader                       reloader                        32d
resource-limits-quotas         resource-limits-quotas          32d
sigstore-policy-controller     sigstore-policy-controller      32d
3.2.3.1 Out of Date Software Version
¶
The Kubernetes version being run is behind the current stable version.
Server: v1.27.7-eks-4f4795d
According to the
Kubernetes Release history
`v1.27`` is not the most recent version (v1.28 is the latest),
but it's end of life is 2024-06-28, that is definitely not out of date. The release history does not differentiate v1.28 and v1.27 in terms of stability ("behind the current stable version").
v1.20.2
is tester desktop client version.
3.2.3.2 Network ACLs Allow All ingress and egress Traffic.
¶
Network ACLs are designed to provide a secondary layer of security. Adding a rule that allows all
network traffic (all protocols, IPs, and destination) prior to any deny rule eliminates the benefit of
deploying network ACLs.
CWE ID: 284
The description of the referenced
CWE-284
:
The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.
There are two distinct behaviors that can introduce access control weaknesses:
Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.
Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.
Comment:
1. Network ACLs can provide a secondary layer of security, but this doesn't fall into the description in the referred CVE.
2. The enumarated network ACLs are created with the default VPCs (probably by AWS) and are not in use.
3. There is no evidence that "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor".
? Question:
Was there an attempt to exploit this as an unauthorized actor?
3.2.3.3 Subnet with "Allow All" ingress and egress NACLs
¶
The VPC Subnets were observed to have overly permissive configurations for IP and Port
access.
Comment: the enumerated subnets are created by AWS upon account creation and are part of the default VPCs.
They are not in use.
3.2.3.4 Subnet Without Flow Log
¶
VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to
and from network interfaces in your VPC.
Comment:
Most of the enumarated network subnets are created with the default VPCs (probably by AWS) and are not in use.
VPC flow logs can be helpful investigating security incidents, but they also introduce additional risks since customer IP addresses can be Personally identifiable information, and if an attacker gains access to these logs it can be used discovering additional attack targets.
Action item:
we should consider to enable flow logs in production environments, as recommended in the
Security best practices for your VPC
.
3.2.3.5 Exposed IMDS v1
¶
During testing, Synopsys observed the Instance Metadata Service v1 (IMDSv1) was exposed.
While Synopsys was unable to retrieve temporary credentials for the EC2 instance hosting
those application pods, this exposure could result in potential credential theft in the event that
different (or additional) IAM policies and/or Instance Profiles are applied to these nodes.
Additionally, this suggests the risk of obtaining these credentials should an attack such as
server-side request forgery be successfully carried out. Due to the lack of exploitability and
realized further lateral movement potential, this vulnerability is listed as informational.
This is a valid finding.
Action item:
Ensuring migration away from IMDSv1 can be done by following the steps detailed in the AWS
documentation here:
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuringinstance-metadata-
service.html#instance-metadata-transition-to-version-2
2024-02-14