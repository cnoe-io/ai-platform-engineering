Expanding Atlantis access in Keeper
¶
Table of Contents
Problem
Background
Solution
Setting up access for Atlantis
Create an Atlantis control repository
Modifying sre-cluster-configs
Testing
Conclusion
Consequences
How to use multiple namespaces
Updating modules
Updating documentation
Problem
¶
The SRE team needs to be able to store and retrieve secrets via Atlantis across multiple sub-namespaces in
Keeper
. It would also be more conventient to describe Venture sub-namespace policies in Terraform, rather than using the shell scripts currently employed.
Background
¶
When Keeper was first implemented, the process was a direct reimplemenation of Webex Kubed's process. We continue to use their cusotmized image of Atlantis, rather than the upstream open source version. A consequence of reusing that process is that we are limited to only accessing one sub-namespace, specifically eticloud/eticcprod, within Keeper. Everything else must be managed via script or manually, rather than declaratively and through GitOps.
Solution
¶
A new, temporary, installation of Atlantis on the
eti-gitops-rtp
EKS cluster adapting the instructions from
How to renew atlantis vault tokens
.  I created tokens that have the same access as the SRE team's
vault_admin
role. These tokens are stored in a secret path that Atlantis will read and use to access Keeper.
Setting up access for Atlantis
¶
Export your vault token (retreived from the
Keeper web UI
to your CLI:
export
VAULT_TOKEN
=(
pbaste
)
Create GLOBAL_TOKEN_JSON for the
eticloud
namespace:
export
GLOBAL_TOKEN_JSON
=
$(
VAULT_NAMESPACE
=
eticloud
vault
token
create
-policy
=
atlantis
-ttl
=
768h
-orphan
-format
=
json
)
Assign a GLOBAL_VAULT_TOKEN:
export
GLOBAL_VAULT_TOKEN
=
$(
echo
$GLOBAL_TOKEN_JSON
|
jq
-r
'.auth | .client_token'
)
Assign GLOBAL_VAULT_TOKEN_ACCESSOR:
export
GLOBAL_VAULT_TOKEN_ACCESSOR
=
$(
echo
$GLOBAL_TOKEN_JSON
|
jq
-r
'.auth | .accessor'
)
Store the token and accessor in Keeper
(Note: the secret path is arbitrary past
secret/
)
:
VAULT_NAMESPACE
=
eticloud
vault
kv
put
secret/keeper-atlantis/global-vault-token
token
=
$GLOBAL_VAULT_TOKEN
accessor
=
$GLOBAL_VAULT_TOKEN_ACCESSOR
-format
=
json
Create a VAULT_TOKEN eticloud token with vault_admin policy for the eticloud namespace:
export
KEEPER_TOKEN_JSON
=
$(
VAULT_NAMESPACE
=
eticloud
vault
token
create
-policy
=
vault_admin
-ttl
=
768h
-orphan
-format
=
json
)
Assign KEEPER_VAULT_TOKEN:
export
KEEPER_VAULT_TOKEN
=
$(
echo
$KEEPER_TOKEN_JSON
|
jq
-r
'.auth | .client_token'
)
Assign KEEPER_VAULT_TOKEN_ACCESSOR:
export
KEEPER_VAULT_TOKEN_ACCESSOR
=
$(
echo
$KEEPER_TOKEN_JSON
|
jq
-r
'.auth | .accessor'
)
Store the token and accessor in Keeper
(Note: the secret path is arbitrary past
secret/
)
:
VAULT_NAMESPACE
=
eticloud
vault
kv
put
secret/keeper-atlantis/vault-token
token
=
$NEW_KEEPER_VAULT_TOKEN
accessor
=
$NEW_KEEPER_VAULT_TOKEN_ACCESSOR
-format
=
json
Note the version of the vault token returned. The version will be used in the sre-cluster-configs.
If not already present, create a secret with IAM credentials in the
eticloud/secret
secrets engine that has the following fields and populate the secrets:
AWS_ACCESS_KEY_ID
AWS_DEFAULT_REGION
AWS_ROUTE_53_ROLE
AWS_SECRET_ACCESS_KEY
TF_VAR_AWS_ACCESS_KEY_ID
TF_VAR_AWS_DEFAULT_REGION
TF_VAR_AWS_SECRET_ACCESS_KEY
EXAMPLE SECRET
If not already present, create a secret with GitHub credentials in the
eticloud/secret
secrets engine that has the following fields and populate the secrets:
automation_secret
github_secret
github_server
github_token
github_user
EXAMPLE SECRET
TODO: Link to creating and updating this info
Create an Atlantis control repository
¶
If not already created, create a repository that contains the Atlantis application configuration files.
eti-atlantis
-- This repository requires two files in the root of the repistory:
atlantis.yaml
-- The Atlantis binary will check if this file exists when it starts, even if it is unused.
manifest.yaml
-- There must be at least one
environment
defined. The path in
infra_credentials_path
should lead to the IAM credentials in Keeper.
Modifying sre-cluster-configs
¶
sre-cluster-configs repsitory
Add a new entry in the atlantis folder of sre-cluster-configs for
eti-gitops-rtp
, modifying the various parameters to correctly identify the host Atlantis will be running on:
ingress.hosts.host
: one entry for each complete URI Atlantis should respond to.
ingress.tls.hosts
: one entry with one line for each complete URI that will respond with tls.
global.clusterinfo
:
.clustername
: the short name of the cluster.
.domain
: the domain of the cluster.
.clusterdomain
: the full URI of clustername.domain.
repo_url
: the URL of the Atlantis application control repository.
Should
retrieve the default branch without a specific
?ref=<branch>
.
secret
:
.github
: The path fo the github secrets above.
.global_vault_token
: The path to the global vault token secrets stored above.
.vault_token
: The path to the vault token secrets stored above.
Comparison values.yaml
for differentiation of other parameters.
Testing
¶
Retrieve, store, and modify secrets from Keeper across multiple namespaces.
Pull Request for sre-tf-demo-infra
Conclusion
¶
It is possible to have an Atlantis instance that can read and write across multiple sub-namespaces.
Consequences
¶
We will need to update how we create and store secrets in modules. More planning is required to progress.
How to use multiple namespaces
¶
In order to use multiple namespaces, we must use multiple Vault providers with aliases. The secret can then be stored or retrieved by specifying the provider in the resource or data source
EXAMPLE -- retrieving secrets:
provider
vault
{
alias
=
"teamsecrets"
namespace
=
"eticloud/teamsecrets"
}
provider
vault
{
alias
=
"sre"
namespace
=
"eticloud/apps/sre"
}
data
"vault_generic_secret"
"access-test"
{
provider
=
vault.teamsecrets
path
=
"secret/access-test"
}
data
"vault_generic_secret"
"sre-go-helloword-dbinfo"
{
provider
=
vault.sre
path
=
"secret/dev/sre-go-helloworld/helloworld-dbinfo"
}
Updating modules
¶
The following modules must be updated to take advantage of the new possibilities.
sre-tf-module-aws-bastion
sre-tf-module-aws-vpc
sre-tf-module-aws-ec2
sre-tf-module-aws-eks
Updating documentation
¶
Documentation must be written on the following topics to make secrets management with Terraform and Atlantis more clear for end users.
How to start using Terraform with Atlantis
Development cycle for Terraform
Storing and retrieving secrets to and from Keeper with Atlantis and Terraform
2023-10-26