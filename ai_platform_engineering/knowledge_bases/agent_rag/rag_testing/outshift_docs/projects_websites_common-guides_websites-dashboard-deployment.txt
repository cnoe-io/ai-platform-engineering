Dashboards for Websites deployment
¶
Objectives
¶
The objectives of dashboards deployment for applications or websites is to be able to easily access a dashboard UI from a template so that any ventures/team can access applications / websites metrics.
Pre-requisite
¶
Before going into the details of applications / websites deployment, you will need to review the
multi-cluster deployment documentation
as we're going to apply the same patterns / naming as the application deployment for the dashboards.
Applications and Websites deployment
¶
Overview
¶
For enabling this feature, we will need to update the current applications / websites deployment where there is only the app deployment which publish helm charts in the chart museum and after follow the ArgoCD workflow.
As per the diagram above, the aim is to have another deployment for the diagrams which will include grafana dashboards. These dashboards will not be deployed with the applications / workflow deployment but this will be a separate deployment with different versions. This does not need to be tightly couple with the applications itself, the dashboards could be deployed on different clusters and not updated once there is a new version of the applications. This will give us more flexibility and also a way to gather all applications / websites dashboard in a central place (observability cluster) where there is also the metrics collection.
With this implementation, this will allow venture to start with some templates for their applications / website which could be customised later. Also, you can include a grafana dashboard for pure website monitoring but you could also have other dashboards deployed for jenkins job/build status, API monitoring, deployment dashboard etc...
Cluster dashboard
¶
The cluster dashboard relies on the one-eye cluster where the underlying stack is based on prometheus components node-exporter and kube-state-metrics installe by the kube-prometheus-stack chart. See the metrics sections for more details about what you can use.
Aggregate dashboard
¶
The aggregate dashboard relies on Thanos as the backend. See the metrics sections for more details about what you can use.
Step by step dashboards creation
¶
In order to go through the deployment and template for Application / Website dashboards, we will take the eti.cisco.com website example. In this example, we do have 2 dashboards, the cluster one and the aggregate one as explained above. Let's go through the cluster dashboard creation:
Defining your application/website charts: Under your application / website repo, create a folder named deployment/YOURAPP-dashboard-cluster. As for example:
https://wwwin-github.cisco.com/eti/eti.cisco.com-2.0/tree/staging/deployment/eti-cisco-com-dashboard-cluster
you can copy the current folder in yours and replace:
name in Charts.yaml
change ventureName in values.yaml
rename deployment/eti-cisco-com-dashboard-cluster/dashboards/eti-cisco-com-website.json by the right name, following the convention YOURAPP-app|website.json and replace in the file eti-cisco-com with your app/website. For now, leave all the data as we will describe later how to customise your dashboard and update it (section "Dashboard customisation" bellow).
Defining your application/website deployment: under your application/website deployment repo, which should be name YOURAPP-deployment, you will need to define:
the application set:
create the folder YOURAPP-dahsboard-cluster/COLOR under applicationsets folder where COLOR is either blue/green As an example: eti.cisco.com-deployment/applicationsets/eti-website-dashboard-cluster/dev/
copy the file applicationset.yaml from the eti.cisco.com-deployment and replace all the occurence of eti-website to your application/website name.
the overlays:
create the folder YOURAPP-dahsboard-cluster/COLOR/ENV/a under overlays folder. As an example: eti.cisco.com-deployment/overlays/eti-website-dashboard-cluster/dev/blue/a
copy the file Chart.yaml and values.yaml and replace all the occurence of eti-website to your application/website name.
Cluster deployment definition: under the sre-cluster-configs repo which store what is deployed where, define your application/website deployment following this convention: ventures/YOURAPP/OURAPP-dashboard-cluster/ENV/COLOR-a/config.json as an example sre-cluster-configs/ventures/eti.cisco.com/eti-website-dashboard-cluster/dev/blue-a/config.json and replace in the config.json file the targeted environment but normally in this case, you should not modify it.
Access to your dashboards
¶
If you're deploying dashboards to:
eks-development-1, you should be able to access it here:
https://one-eye.dev.eticloud.io/grafana
Metrics
¶
Here is the list of metrics that we should consider once doing website monitoring dashboard:
Node exporter
¶
Please refer to its documentation
here
to get more details about the available metrics.
kube-state-metrics (KSM)
¶
Please refer to its documentation
here
to get more details about the available metrics.
blackbox exporter
¶
Please refer to its documentation
here
to get more details about the available metrics.
Dashboard customisation
¶
Here are the steps to follow if you want to customise your dashboard:
once you've deployed your dashboard based on the template, the you should be in able to change it. The best way is to access it on a browser and then change the current layout (add / remove / update) the current panels.
Once you're satisfied with it, you just need to export it as JSON file.
Replace the old one in your application/website repo: deployment/YOURAPP-dashboard-xx/dashboards/YOURAPP.json
bump the chart version in the application/website repo: YOURAPP-deployment/overlays/sYOURAPP-dashboards-xxx/dev/blue/a/Chart.yaml
push your changes
2022-06-01