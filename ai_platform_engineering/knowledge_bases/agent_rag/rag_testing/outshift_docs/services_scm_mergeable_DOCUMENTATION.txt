Mergeable Documentation
¶
Problem
¶
Platform engineering repositories are branch protected
DEV modifications are blocked by default
PROD modifications need branch protection (it cannot be removed)
We need a solution that approves only DEV changes without human actions taken
Solution:
Mergeable
¶
What is Mergeable?
¶
PR Automation Github App
Runs validations
Can merge PRs uppon success
Highly configurable
GitHUb webhook event based actions
Current state
¶
3/20/2025
Mergeable is deployed and configured for the
https://github.com/outshift-platform/platform-apps-deployment
repository.
How to use it?
¶
Every use-case can be defined in its own configuration file see configuration guide later on...
Approve DEV changes
¶
Create a PR that modifies
ONLY
files in dev/staging folders
Open a pull request
Leave a
PR Review Comment
on the PR commenting a pre-defined command like:
/merge
Mergeable merges the pull request automatically if the checks are successful
Mergeable will not merge if
¶
The PR modifies a production folder
The PR not modifies a development or staging folder
(Modifying any other folders but dev or staging)
How to configure it?
¶
See more in Mergeable's full Documentation:
https://mergeable.readthedocs.io/en/latest/
- Mergeable is configured with a YAML file
-
The configuration has to be at
.github/mergeable.yml
- (.yaml extension will not be detected use .yml)
- Mergeable needs bypass access to merge PRs
Webhooks
¶
Mergeable listens to GitHub's webhook events:
https://docs.github.com/en/webhooks/webhook-events-and-payloads
Use the
- when: [webhook event]
tag to specify a webhook event
Each validation can only listen to specific WH events,
always make sure that the validation supports the specified webhook event
Validations
¶
Validation are run when a pre-defined webhook event triggers the BOT. Uppon a trigger Mergeable will run all of its pre-defined validations.
- Defined under the
validate
YAML key
- Use the
- do: [validation type]
tag to specify a validation
- Most of the validators use
JS based Regular Expressions
Filters
¶
Filters can control if a specific condition is met before running actions after the validations
Actions
¶
Different actions can be defined uppon success or failure.
- Use the
pass
YAML key to define actions uppon success
- Use the
failure
YAML key to define actions if the checks fail
- Use the
- do: [action type]
to define actions under the
result
keys
-
Always make sure that each of the actions support the used webhook event!
Operators and YAML anchors
¶
AND & OR logical operators are available in the
validate
and
filter
sections.
- Use the
- do: [and / or]
to specify an operation
- You may list more operations or checks under a defined operator
YAML Anchors can be used to reduce config duplications
Example configuration
¶
Feel free to check out an example configuration presented below
version
:
2
mergeable
:
-
when
:
pull_request_review.*
validate
:
-
do
:
changeset
no_empty
:
enabled
:
false
message
:
'This
PR
makes
no
changes
to
the
repository'
must_include
:
regex
:
'^(?:projects|projectapps|clusters|applicationsets|applications)\/.*\/(dev|staging)\/.*'
message
:
'The
PR
must
be
within
specified
folders'
must_exclude
:
regex
:
'^(?:projects|projectapps|clusters|applicationsets|applications)\/.*\/prod\/.*'
message
:
'The
PR
must
not
include
a
modification
to
a
production
folder'
filter
:
-
do
:
payload
review
:
body
:
must_include
:
regex
:
'^/merge$'
pass
:
-
do
:
merge
merge_method
:
'merge'
2025-03-20