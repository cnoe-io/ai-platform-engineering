Scaling Jenkins on k8s
¶
Objectives (as on Jira issue)
¶
Context
: This approach will be based on
Kubernetes plugin for Jenkins
which will be a way to have full dynamic infrastructure using a k8s cluster.
As you can see in this documentation, it mentioned:
Agents are launched as inbound agents, so it is expected that the container connects automatically to the Jenkins controller
So this will be quite a limitation for us as the agent bootstrap in a GKE/EKS cluster will not be able to access our
dedicated Jenkins instance in Cisco network
. To solve this issue, we will setup a new
SCI connector
in order to connect our AWS eti-ci VPC to Cisco network.
Also, as per the research, there is a good article on
Scaling Jenkins on Kubernetes
.
There is also this article on
Docker in Docker with Jenkins Pod on Kubernetes
The architecture will be:
DoD
: Implement a PoC using the K8s plugin in Jenkins with a sample pipeline using k8s plugin.
Plugin configuration
¶
The
official plugin documentation
is currently showing configuration but this requires some changes in order to make it works.
Before going deeply in issues faced and our current configuration, the PoC has been develop on the k8s cluster in p3-dev-1. So this is an internal cluster in P3 infra which is behing a bastion as this is our standard deployment model.
So the base configuration of the plugin is quite easy as you will need to just set the entry point and the credentials which is currently based on kubeconfig file as you see bellow:
The key element is the WwebSocket configuration which is the way the Jenkins main instance will reach the Jenkins node. We can not use direct connection, as mentioned above, p3-dev-1 cluster nodes are behind a bastion without external IP.
The other configuration to set up is the pod retention, which needs to be set as always in order to keep the pod so that you will be able to access containers / logs during testing phase:
After, you will need to define your pod template configuration which will be used in your pipeline as this is the jenkins node itself and also the other containers that you will need on your pipeline.
First, you will need to define the jenkins node pod template:
As you see, you will need to create the jenkins namespace so that all the CI will run under this namespace. So the pod configuration is about defining the whole jenkins node which will container at least one container. The mandatory one is the jnlp which represent the jenkins agent that will connect to the jenkins main one and will execute jobs.
As we're using a cloudbees dedicated instance from EngIT, the jnlp container configuration should be different from the official documentation as per:
docker image: cloudbees/cloudbees-core-agent:2.361.3.2
working directory: /home/jenkins/agent
arguments to pass to the command: ${computer.jnlpmac} ${computer.name}
Then, we're defining another container which will be the sre-pipeline container which is where we will run most of our pipeline stages:
As you will, we're defining 1000 as user ID as this is the ubuntu user define in the sre-pipeline-docker.
Also, the image
containers.cisco.com/eti-sre/sre-pipeline-docker
requires access credentials to be able to pull the image, you will need to create the secret as per:
kubectl
create
secret
docker-registry
ciscocontainers-cred
--docker-server
=
containers.cisco.com
--docker-username
=
"eti-sre-cicd.gen"
--docker-password
=
"xxx"
--docker-email
=
"eti-sre-cicd.gen@cisco.com"
-n
jenkins
Pipeline sample
¶
Now that the plugin configuration is done, we will need a sample pipeline so that this is execute on top of this k8s infra.
Here is a sample pipeline:
podTemplate() {
node('jenkins-node') {
stage('simple echo') {
sh 'echo hello world'
}
stage('run build'){
container('sre-pipeline-docker'){
sh 'echo test'
checkout(scm)
}
}
}
}
As you see, there is nothing in the podTemplate as the test done were not working hence all the configuration is in the plugin itself.
This pipeline is tested on the helloworld example with a new job
here
Deep dive in k8s build infra
¶
Here is a sample output of the job to see what is done on jenkins side:
17-Nov [15:02:15.676]  Started by user Jeremie Garnier (jegarnie)
17-Nov [15:02:16.386] 14:02:16  Connecting to https://wwwin-github.cisco.com/api/v3 using wwwin-github API Token (used by all build jobs)
17-Nov [15:02:16.637]  Obtained Jenkinsfile.k8s from d1c89d71a007c213795cd65e2bd94d0e045ea564
17-Nov [15:02:16.672]  [Pipeline] Start of Pipeline
17-Nov [15:02:16.713]  [Pipeline] podTemplate
17-Nov [15:02:16.721]  [Pipeline] {
17-Nov [15:02:16.765]  [Pipeline] node
17-Nov [15:02:24.451]  Agent jenkins-node-nnql7 is provisioned from template jenkins-node
17-Nov [15:02:24.453]  ---
17-Nov [15:02:24.453]  apiVersion: "v1"
17-Nov [15:02:24.453]  kind: "Pod"
17-Nov [15:02:24.453]  metadata:
17-Nov [15:02:24.453]    labels:
17-Nov [15:02:24.453]      jenkins: "slave"
17-Nov [15:02:24.453]      jenkins/label-digest: "7abdba7e22a6b881b831c82f163a619c89f6d596"
17-Nov [15:02:24.453]      jenkins/label: "jenkins-node"
17-Nov [15:02:24.453]    name: "jenkins-node-nnql7"
17-Nov [15:02:24.453]  spec:
17-Nov [15:02:24.453]    containers:
17-Nov [15:02:24.453]    - args:
17-Nov [15:02:24.453]      - "********"
17-Nov [15:02:24.453]      - "jenkins-node-nnql7"
17-Nov [15:02:24.453]      env:
17-Nov [15:02:24.453]      - name: "JENKINS_SECRET"
17-Nov [15:02:24.453]        value: "********"
17-Nov [15:02:24.453]      - name: "JENKINS_AGENT_NAME"
17-Nov [15:02:24.453]        value: "jenkins-node-nnql7"
17-Nov [15:02:24.453]      - name: "JENKINS_WEB_SOCKET"
17-Nov [15:02:24.453]        value: "true"
17-Nov [15:02:24.453]      - name: "JENKINS_NAME"
17-Nov [15:02:24.453]        value: "jenkins-node-nnql7"
17-Nov [15:02:24.453]      - name: "JENKINS_AGENT_WORKDIR"
17-Nov [15:02:24.453]        value: "/home/jenkins/agent"
17-Nov [15:02:24.453]      - name: "JENKINS_URL"
17-Nov [15:02:24.453]        value: "https://engci-private-sjc.cisco.com/jenkins/eti-sre/"
17-Nov [15:02:24.453]      image: "cloudbees/cloudbees-core-agent:2.361.3.2"
17-Nov [15:02:24.453]      imagePullPolicy: "Always"
17-Nov [15:02:24.453]      name: "jnlp"
17-Nov [15:02:24.453]      resources:
17-Nov [15:02:24.453]        limits: {}
17-Nov [15:02:24.453]        requests: {}
17-Nov [15:02:24.453]      tty: false
17-Nov [15:02:24.453]      volumeMounts:
17-Nov [15:02:24.453]      - mountPath: "/home/jenkins/agent"
17-Nov [15:02:24.453]        name: "workspace-volume"
17-Nov [15:02:24.453]        readOnly: false
17-Nov [15:02:24.453]      workingDir: "/home/jenkins/agent"
17-Nov [15:02:24.453]    - args:
17-Nov [15:02:24.453]      - "99d"
17-Nov [15:02:24.453]      command:
17-Nov [15:02:24.453]      - "sleep"
17-Nov [15:02:24.453]      image: "containers.cisco.com/eti-sre/sre-pipeline-docker"
17-Nov [15:02:24.453]      imagePullPolicy: "Always"
17-Nov [15:02:24.453]      name: "sre-pipeline-docker"
17-Nov [15:02:24.453]      resources:
17-Nov [15:02:24.453]        limits: {}
17-Nov [15:02:24.453]        requests: {}
17-Nov [15:02:24.453]      securityContext:
17-Nov [15:02:24.453]        privileged: false
17-Nov [15:02:24.453]        runAsUser: 1000
17-Nov [15:02:24.453]      tty: true
17-Nov [15:02:24.453]      volumeMounts:
17-Nov [15:02:24.453]      - mountPath: "/home/ubuntu"
17-Nov [15:02:24.453]        name: "workspace-volume"
17-Nov [15:02:24.453]        readOnly: false
17-Nov [15:02:24.453]      workingDir: "/home/ubuntu"
17-Nov [15:02:24.453]    hostNetwork: false
17-Nov [15:02:24.453]    imagePullSecrets:
17-Nov [15:02:24.453]    - name: "ciscocontainers-cred"
17-Nov [15:02:24.453]    nodeSelector:
17-Nov [15:02:24.453]      kubernetes.io/os: "linux"
17-Nov [15:02:24.453]    restartPolicy: "Never"
17-Nov [15:02:24.453]    volumes:
17-Nov [15:02:24.453]    - emptyDir:
17-Nov [15:02:24.453]        medium: ""
17-Nov [15:02:24.453]      name: "workspace-volume"
17-Nov [15:02:24.453]
17-Nov [15:02:31.016]  Running on jenkins-node-nnql7 in /home/jenkins/agent/workspace/go-helloworld-k8s-infra_SRE-4082
17-Nov [15:02:31.026]  [Pipeline] {
17-Nov [15:02:31.068]  [Pipeline] stage
17-Nov [15:02:31.076]  [Pipeline] { (simple echo)
17-Nov [15:02:31.105]  [Pipeline] sh
17-Nov [15:02:40.778]  + echo hello world
17-Nov [15:02:40.778]  hello world
17-Nov [15:02:42.278]  [Pipeline] }
17-Nov [15:02:42.306]  [Pipeline] // stage
17-Nov [15:02:42.330]  [Pipeline] stage
17-Nov [15:02:42.336]  [Pipeline] { (run build)
17-Nov [15:02:42.367]  [Pipeline] container
17-Nov [15:02:42.375]  [Pipeline] {
17-Nov [15:02:42.399]  [Pipeline] sh
17-Nov [15:03:12.842]  [Pipeline] }
17-Nov [15:03:12.875]  [Pipeline] // container
17-Nov [15:03:12.891]  [Pipeline] }
17-Nov [15:03:12.923]  [Pipeline] // stage
17-Nov [15:03:12.942]  [Pipeline] }
17-Nov [15:03:12.977]  [Pipeline] // node
17-Nov [15:03:12.993]  [Pipeline] }
17-Nov [15:03:13.019]  [Pipeline] // podTemplate
17-Nov [15:03:13.045]  [Pipeline] End of Pipeline
17-Nov [15:03:13.062]  java.io.IOException: Timed out waiting for websocket connection. You should increase the value of system property org.csanchez.jenkins.plugins.kubernetes.pipeline.ContainerExecDecorator.websocketConnectionTimeout currently set at 30 seconds
You will see that a new node is launched dynamically as a new pod where we have 2 containers, jnlp for the jenkins agent and sre-pipeline-docker.
Here is the pod running and definition:
JEGARNIE-M-V1WJ:.kube jegarnie$ k get pods -n jenkins
NAME                 READY   STATUS    RESTARTS   AGE
jenkins-node-nnql7   2/2     Running   0          11s
JEGARNIE-M-V1WJ:.kube jegarnie$ k describe pod -n jenkins jenkins-node-nnql7
Name:         jenkins-node-nnql7
Namespace:    jenkins
Priority:     0
Node:         p3-dev-1-md-0-4vrtm/10.6.0.112
Start Time:   Thu, 17 Nov 2022 15:02:18 +0100
Labels:       jenkins=slave
jenkins/label=jenkins-node
jenkins/label-digest=7abdba7e22a6b881b831c82f163a619c89f6d596
Annotations:  cni.projectcalico.org/containerID: 60f97577cd24f38bbe15bd80a2bc8210261e7f8b4e314f172aa1d841c35c4de9
cni.projectcalico.org/podIP: 192.168.112.231/32
cni.projectcalico.org/podIPs: 192.168.112.231/32
Status:       Running
IP:           192.168.112.231
IPs:
IP:  192.168.112.231
Containers:
jnlp:
Container ID:  containerd://dd02515ad4cd627a6211131636d49aa1e78eda83c481690e0be09eddbb69fa33
Image:         cloudbees/cloudbees-core-agent:2.361.3.2
Image ID:      docker.io/cloudbees/cloudbees-core-agent@sha256:113516d6953bee28ea3679d830d461cee8c6d4c6e34a01b0c5a3a52dd029f633
Port:          <none>
Host Port:     <none>
Args:
076d1d0fa254a34df69b0024f7fe27bab36f87d38ea1b38a194b60ee0d1a9348
jenkins-node-nnql7
State:          Running
Started:      Thu, 17 Nov 2022 15:02:19 +0100
Ready:          True
Restart Count:  0
Environment:
JENKINS_SECRET:         076d1d0fa254a34df69b0024f7fe27bab36f87d38ea1b38a194b60ee0d1a9348
JENKINS_AGENT_NAME:     jenkins-node-nnql7
JENKINS_WEB_SOCKET:     true
JENKINS_NAME:           jenkins-node-nnql7
JENKINS_AGENT_WORKDIR:  /home/jenkins/agent
JENKINS_URL:            https://engci-private-sjc.cisco.com/jenkins/eti-sre/
Mounts:
/home/jenkins/agent from workspace-volume (rw)
/var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-5dxxg (ro)
sre-pipeline-docker:
Container ID:  containerd://bbb0dda3c81b59c51f8c484d9eb5ba42cb039824894d0de2913e762433bdaa8e
Image:         containers.cisco.com/eti-sre/sre-pipeline-docker
Image ID:      containers.cisco.com/eti-sre/sre-pipeline-docker@sha256:b93cd787b9155b6fafc3125f5f82c07748d32ea52bce14f9f4f52212fe9a1080
Port:          <none>
Host Port:     <none>
Command:
sleep
Args:
99d
State:          Running
Started:      Thu, 17 Nov 2022 15:02:20 +0100
Ready:          True
Restart Count:  0
Environment:    <none>
Mounts:
/home/ubuntu from workspace-volume (rw)
/var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-5dxxg (ro)
Conditions:
Type              Status
Initialized       True
Ready             True
ContainersReady   True
PodScheduled      True
Volumes:
workspace-volume:
Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
Medium:
SizeLimit:  <unset>
kube-api-access-5dxxg:
Type:                    Projected (a volume that contains injected data from multiple sources)
TokenExpirationSeconds:  3607
ConfigMapName:           kube-root-ca.crt
ConfigMapOptional:       <nil>
DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              kubernetes.io/os=linux
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
Type    Reason     Age   From               Message
----    ------     ----  ----               -------
Normal  Scheduled  21s   default-scheduler  Successfully assigned jenkins/jenkins-node-nnql7 to p3-dev-1-md-0-4vrtm
Normal  Pulling    21s   kubelet            Pulling image "cloudbees/cloudbees-core-agent:2.361.3.2"
Normal  Pulled     20s   kubelet            Successfully pulled image "cloudbees/cloudbees-core-agent:2.361.3.2" in 496.526119ms
Normal  Created    20s   kubelet            Created container jnlp
Normal  Started    20s   kubelet            Started container jnlp
Normal  Pulling    20s   kubelet            Pulling image "containers.cisco.com/eti-sre/sre-pipeline-docker"
Normal  Pulled     19s   kubelet            Successfully pulled image "containers.cisco.com/eti-sre/sre-pipeline-docker" in 843.837463ms
Normal  Created    19s   kubelet            Created container sre-pipeline-docker
Normal  Started    19s   kubelet            Started container sre-pipeline-docker
As you see, the current pipeline is not working as we're currently facing plugin issue as raised
here
and is fixed on the plugin verion >1.32.3 but our current plugin version is 1.30.11.
TBC
Tips
¶
Here are some useful tips to debug the PoC running on p3-dev-1:
Switching to p3-dev-1 context:
cp
kubeconfig
kubectl
config
use-context
p3-dev-1-admin@p3-dev-1
alias
k
=
kubectl
create jenkins namespace:
k
create
namespace
jenkins
list all pods in jenkins namespace:
k
get
pods
-n
jenkins
describe pod in jenkins namespace:
k
describe
pod
-n
jenkins
jenkins-node-nnql7
get logs from jnlp container in jenkins namespace:
k
logs
-n
jenkins
jenkins-node-nnql7
-c
jnlp
get logs from sre-pipeline-docker container in jenkins namespace:
k
logs
-n
jenkins
jenkins-node-nnql7
-c
sre-pipeline-docker
opening a shell in sre-pipeline-docker container in jenkins namespace:
kubectl
exec
-i
-t
-n
jenkins
jenkins-node-nnql7
--container
sre-pipeline-docker
--
/bin/bash
delete pod in jenkins namespace:
k
delete
pod
-n
jenkins
jenkins-node-xxx
Conclusion
¶
TBC
2023-09-21