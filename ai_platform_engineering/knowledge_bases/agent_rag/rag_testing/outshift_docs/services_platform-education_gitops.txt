GitOps
¶
This document describes what GitOps is, why we use it, and a basic overview of its workflow.
Table of Contents
¶
What is GitOps
Why we use GitOps
How to use GitOps (an overview)
Specific GitOps Workflows
Additional Resources
What is GitOps
¶
GitOps is a methodology for driving operations via code maintained in a version-control system (such as
Git
). It has become a widely adopted industry standard (see articles and resources linked under
Additional Resources
) for the reasons listed in the
Why we use GitOps
section below. The ETI Platform leverage GitOps across multiple functions: software deployments (e.g., website content updates), infrastructure-as-code (e.g., deploying/managing Kubernetes), and configuration management (e.g., Cisco Groups automation).
Why we use GitOps
¶
Rolling out changes to any exsiting system carries a risk of creating undesired side effects that can degrade or even completely break the functionality of the system. The GitOps methodology encompasses best practices that aim to enable making changes to an existing system more
reliable
,
secure
,
scalable
, and
auditable
.
GitOps achieves this by defining the desired state of a system as code that is stored in a shared respository, which serves as the "single source of truth". An automated process syncs this desired state to the system's actual state in the real world. Capturing the desired state of a system as code and managing changes via updates to that code provides the following benefits:
version control
ability to easily revert to a previous version when a change goes awry (
reliability
)
visibility into the history of changes
an audit trail for who did what/when (
security
)
access controls
access for making code changes can be restricted for
least privilege
(
security
)
peer reviews
pull requests
that capture proposed changes as a diff display can be reviewed/approved before roll-out (
reliability
,
security
)
automation
capturing system state as code enables modifications via scripts and automated pipelines, which also enables enforcing standardization and consistency across many instances of the system (
scalability
,
reliability
]
developer productivity
)
the tools used to implement GitOps are the same tools (e.g., GitHub) developers use for their software development workflows
How to use GitOps (an overview)
¶
In general, a typical GitOps workflow consists of the following key steps:
Make and save your desired changes in your own git branch created against the appropriate code repository
Create a pull request for merging your branch to the main branch and submit it for peer review
Iterate on change/review until the proposed change is approved by the reviewer(s)
Merge your pull request to roll-out your change
These are the high-level steps that capture the essence of a GitOps workflow, but there may be more detailed variations in the workflow due to differences in the automation  built for managing specific systems.
Specific GitOps Workflows
¶
See the
Developer Workflow
page for more detailed steps for making changes to specific target systems.
Additional Resources
¶
OpenGitOps
Weaveworks
: GitOps - Operations by Pull Request
GitLab
: What is GitOps?
RedHat
: What is GitOps?
2022-12-09