create a new python demo
platform-demo usage
python helloworld
How to create a new python demo micro-service using platform-demo
¶
Pre-requisites
¶
Install
github cli
- Mac
brew install gh
- Windows
winget install --id GitHub.cli
Note:
Checkout the
installation page
for various distributions
Authenticate with GH cli
¶
gh auth login
¶
gh auth login -w -h "wwwin-github.cisco.com" -p https
Output:
â¯ gh auth login -w -h "wwwin-github.cisco.com" -p https
? You're already logged into wwwin-github.cisco.com. Do you want to re-authenticate? Yes
? Authenticate Git with your GitHub credentials? Yes
! First copy your one-time code: XXXX-XXXX
Press Enter to open wwwin-github.cisco.com in your browser...
â Authentication complete.
- gh config set -h wwwin-github.cisco.com git_protocol https
â Configured git protocol
â Logged in as sraradhy
Verify auth status
¶
gh auth status
Output:
wwwin-github.cisco.com
â Logged in to wwwin-github.cisco.com as sraradhy (keyring)
â Git operations for wwwin-github.cisco.com configured to use https protocol.
â Token: gho_************************************
â Token scopes: gist, read:org, repo, workflow
Create source code repo
¶
That repository will contain your application's source code as well as the Helm Chart managing the lifecycle of your application itself.
â ï¸ Use your own unique project name below to avoid collisions
ð¡ If you would run all commands in one shot, scroll below.
Export Project Name
export PROJECT_NAME=optimusprime-demo
Create a new repo in eti org using
platform-demo template
gh repo create -c wwwin-github.cisco.com/eti/${PROJECT_NAME} -p wwwin-github.cisco.com/eti/platform-demo --private
Change directory to project source
cd ${PROJECT_NAME}
Run helper script
./runme.sh --skipprompt
Create a PR with the change
gh pr create -t "refactor: ${PROJECT_NAME} merge runme.sh changes" -b "rename project name to ${PROJECT_NAME}"
Merge the PR to main branch
gh pr merge 1 -m
Checkout
main
branch and pull down changes
git checkout main && git pull --rebase
Run all commands at once
â ï¸ Change your directory to your project root or /tmp before proceeding
export PROJECT_NAME=optimusprime-demo # Your unique demo name
gh repo create -c wwwin-github.cisco.com/eti/${PROJECT_NAME} -p wwwin-github.cisco.com/eti/platform-demo --private
cd ${PROJECT_NAME}
./runme.sh --skipprompt
gh pr create -t "refactor: ${PROJECT_NAME} merge runme.sh changes" -b "rename project name to ${PROJECT_NAME}"
gh pr merge 1 -m
git checkout main && git pull --rebase
Create deploment repo
¶
That deployment repository will contain the ArgoCD related resource (
ApplicationSet
) and the Helm Chart managing the lifecycle of the application deployment. The
Application
resource is defined in another repository, generally suffixed by
*-deployment
, hosted in GHEC. Refer to
the ArgoCD deployment project app section
below.
More information on those resources overall in
this ArgoCD documentation section
.
â ï¸ Use your own unique project name below to avoid collisions
ð¡ If you would run all commands in one shot, scroll below.
Change directory to root of the project.
Do not
create deployment repo inside source code
Export Project Name
export PROJECT_NAME=optimusprime-demo
Create a new repo in eti org using
platform-demo template
gh repo create -c wwwin-github.cisco.com/eti/${PROJECT_NAME}-deployment -p wwwin-github.cisco.com/eti/platform-demo-deployment --private
Change directory to deployment
cd ${PROJECT_NAME}-deployment
Run helper script
./runme.sh --skipprompt
Create a PR with the change
gh pr create -t "refactor: ${PROJECT_NAME}-deployment merge runme.sh changes" -b "rename project name to ${PROJECT_NAME}-deployment"
Merge the PR to main branch
gh pr merge 1 -m
Checkout
main
branch and pull down changes
git checkout main && git pull --rebase
Run all commands at once
â ï¸ Change your directory to your project root or /tmp before proceeding
export PROJECT_NAME=optimusprime-demo # Your unique demo name
gh repo create -c wwwin-github.cisco.com/eti/${PROJECT_NAME}-deployment -p wwwin-github.cisco.com/eti/platform-demo-deployment --private
cd ${PROJECT_NAME}-deployment
./runme.sh --skipprompt
gh pr create -t "refactor: ${PROJECT_NAME}-deployment merge runme.sh changes" -b "rename project name to ${PROJECT_NAME}-deployment"
gh pr merge 1 -m
git checkout main && git pull --rebase
Use Jenkins automation job to create CI/CD Jenkins jobs
¶
Navigate to
Jenkins job
Build with parameters
Verify jobs are created in
Demos folder
ð ð ï¸ Jenkins work-around to fix github plugin scanning
Navigate to
build/ci job
and click on
configure
job
Validte the github connection and save/apply the job
Github plugin will re-scan the repo for the
main
branch
Create ArgoCD deployment project app
¶
Clone sre-cluster-configs
Add a new file to projectapps/demos folder
Example optimusprime-demo-projectapp.yaml
apiVersion
:
argoproj.io/v1alpha1
kind
:
Application
metadata
:
finalizers
:
-
resources-finalizer.argocd.argoproj.io
name
:
optimusprime-demo-dev-projectapp
namespace
:
argocd
spec
:
project
:
demos.dev
source
:
repoURL
:
'https://wwwin-github.cisco.com/eti/optimusprime-demo-deployment'
path
:
applicationsets/dev
# the path of the ApplicationSet resource for your app, in the above repo
destination
:
server
:
'https://kubernetes.default.svc'
namespace
:
argocd
syncPolicy
:
automated
:
{}
ArgoCD Applications link
(
demoproject-apps
)
ð¡ ArgoCD refresh takes upto 5 mins to pick-up the new manifest. You may use hard refresh button to refresh sooner.
Create the config for your targetted environment
¶
You will want to deploy your application to a Kubernetes cluster in a given environment.
In your
platform-demo-deployment
repository,
Following configuration including the
cluster_name
and the
cluster_address
(the EKS cluster endpoint on AWS for instance) are included. See below:
{
"cluster_name"
:
"eks-dev-3"
,
"cluster_address"
:
"https://539C5DE047401AF1E72847F1D0D3A601.gr7.us-east-2.eks.amazonaws.com"
}
Optional parameters are
deploymentEnv
.
Add namespace to imagepullsecrets and update container tagversion in deployment
¶
Add the name of the Kubernetes namespace of your application (defined in the
ApplicationSet
resource, see example
here
) to the imagepullsecrets list, see example of the
optimus-demo
here
, PR and commit the change.
Verify imagepullsecrets operator on eks-dev-3
Re-trigger Jenkins CI job so the latest container version is prograged to CD
Verify CI/CD Jobs
¶
Jenkins Jobs in Demos folder
ArgoCD Deployment
Verify demo app
¶
After successful deployment of the demo, it can be accessible via
https://optimusprime-demo.int.dev.eticloud.io
URL displays following output:
Platform Demo optimusprime-demo Hello World
Env Vars
Metrics
Health
Logs
,sort:!(!('
@timestamp
',desc))))Â (if deployed to ETI Platform)
Grafana Dashboard
Â (if deployed to ETI Platform)
Troubleshooting
¶
rpc error: code = Unknown desc = helm dependency build failed exit status 1: Error: can't get a valid version for repositories <your-app>. Try changing the version constraint in Chart.yaml
Check that your app version in the dependencies list match the actual version that has been produced (your app's helm chart version,
example
of the
platform-demo
app) and pushed to
chartmuseum
.
Logs & Metrics
¶
Log User Guide
Metrics
2024-08-12