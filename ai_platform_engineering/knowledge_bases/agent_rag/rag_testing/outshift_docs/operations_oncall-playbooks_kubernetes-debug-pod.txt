K8s debugging
K8s ubuntu bash pod
Kubernetes Debug Pod
Kubernetes Debug Pod
¶
Create a ubuntu pod
¶
apiVersion: v1
kind: Pod
metadata:
labels:
run: ubuntu
name: ubuntu
namespace: default
spec:
containers:
- args:
- bash
image: ubuntu:latest
imagePullPolicy: Always
name: ubuntu
resources:
limits:
cpu: 300m
ephemeral-storage: 2G
memory: 512Mi
requests:
cpu: 10m
ephemeral-storage: 100M
memory: 64Mi
stdin: true
stdinOnce: true
tty: true
2. Start the pod and exec into it
¶
kubectl apply -f ubuntu.yaml
kubectl exect -it ubuntu bash
2. Install required packages
¶
apt update && apt install telnet wget python3 python3-pip curl vim -y
pip3 install redis
pip3 install ipython
Redis Python code
¶
References:
-
https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ElastiCache-Getting-Started-Tutorials-Connecting.html
-
https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ElastiCache-Getting-Started-Tutorials-Usage.html
root@ubuntu:/# cat redis_test.py
from redis import Redis
import time
import logging
logging.basicConfig(level=logging.INFO,format='%(asctime)s: %(message)s')
redis = Redis(host='clustercfg.rosey-dev-euw1-1.qul6ei.euw1.cache.amazonaws.com', port=6379, decode_responses=True, ssl=True)
if redis.ping():
logging.info("Connected to Redis")
keyName='mykey'
currTime=time.ctime(time.time())
# Set the key 'mykey' with the current date and time as value.
# The Key will expire and removed from cache in 60 seconds.
redis.set(keyName, currTime, ex=60)
# Sleep just for better illustration of TTL (expiration) value
time.sleep(5)
# Retrieve the key value and current TTL
keyValue=redis.get(keyName)
keyTTL=redis.ttl(keyName)
logging.info("Key {} was set at {} and has {} seconds until expired".format(keyName, keyValue, keyTTL))
root@ubuntu:/# python3 redis_test.py
2024-02-01 20:37:46,840: Connected to Redis
2024-02-01 20:37:51,846: Key mykey was set at Thu Feb  1 20:37:46 2024 and has 55 seconds until expired
2024-02-05