baseapps cert-manager
cert-manager
certmanager
Cert-Manager
¶
Overview
¶
cert-manager
adds certificates and certificate issuers as resource types in Kubernetes clusters, and simplifies the process of obtaining, renewing and using those certificates.
ETI Platform uses cert-manager for generating Let's Encrypt public TLS certs.
Here is a sample workflow of cert-manager:
How does an application request TLS cert?
¶
K8s apps in ETI clusters can request Let's Encrypt Public TLS cert by specifying the following annotation on ingress resource.
- This helps cert-manager discover the which TLS certs to request.
- Cert-manager looks at the tls/hosts section in the ingress resource for common-name and subject-alternate-name
Example Ingress config:
# Ingress
apiVersion
:
networking.k8s.io/v1
kind
:
Ingress
metadata
:
annotations
:
cert-manager.io/cluster-issuer
:
letsencrypt
kubernetes.io/ingress.class
:
nginx-internal
nginx.ingress.kubernetes.io/rewrite-target
:
/
name
:
demo-app-ingress
spec
:
rules
:
-
host
:
demo.example.com
http
:
paths
:
-
path
:
/testpath
pathType
:
Prefix
backend
:
service
:
name
:
test
port
:
number
:
80
tls
:
-
hosts
:
-
demo.example.com
secretName
:
demo-example-tls
ACME Registration
¶
cert-manager registers with ACME Let's Encrypt backend with unique email address to send notification for LE's
Expiring certificates are notified to this email address
SRE team typically uses
eti-sre-admins@cisco.com
email
DNS Validation
¶
cert-manager supports multiple ways to validate DNS for requesting TLS domain.
ETI Platform uses Route53 DNS Validation
ClusterIssuer Custom Resource
¶
ClusterIssuer is a cluster scoped custom resource that  monitors
cert-manager.io/cluster-issuer
annotations on ingress resources.
ClusterIssuer also has information for
Registration to ACME
DNS validation using Route53 Credentials stored as k8s secret
Example ClusterIssuer config:
# ClusterIssuer
apiVersion
:
cert-manager.io/v1
kind
:
ClusterIssuer
name
:
letsencrypt
spec
:
acme
:
email
:
eti-sre-admins@cisco.com
preferredChain
:
""
privateKeySecretRef
:
name
:
letsencrypt
server
:
https://acme-v02.api.letsencrypt.org/directory
solvers
:
-
dns01
:
route53
:
accessKeyID
:
AWS_ACCESS_ID
hostedZoneID
:
HOSTED_ZONE_ID
region
:
us-east-1
secretAccessKeySecretRef
:
key
:
secret-access-key
name
:
aws-route53-creds
selector
:
dnsZones
:
-
demo.example.com
Monitoring
¶
Cert-manager exposes metrics via
/metrics
prometheus style metrics and
ServiceMonitor
custom resource to discover the metrics endpoint.
Each cluster Grafana dashboard has metrics for cert-manager
SRE team also uses blackbox monitoring prometheus plugin to
monitor production TLS hosts (SSO login required, contact ETI SRE team for access)
External References:
https://cert-manager.io/docs/
Setting up cert-manager
¶
Note
Setup instructions for cert-manager can be found
here
Step 1. Create cert-manager chart in sre-helm-charts
¶
sre-helm-charts/cert-manager
Step 2: Publish Charts to Chart Museum
¶
ChartMuesuem UI
Step 2: Verify success and monitor environment
¶
Set your kubeconfig context
for the updated k8s cluster, then run the following
kubectl
commands to verify certificates are successfully being requested and orders are valid:
Ensure that all certificaterequests show
True
under the
APPROVED
and
READY
columns
kubectl
get
certificaterequest
-A
|
sort
-hk
7
Ensure that all orders show
valid
under the
STATE
column
kubectl
get
order
-A
|
sort
-hk
4
Troubleshooting Cert-manager
¶
Logs
¶
Check the k8s system
logs
with the following filters:
*
kubernetes.namespace_name.keyword
is
cert-manager
*
cluster.keyword
is
<K8s_CLUSTER_NAME>
(e.g.,
eks-development-1
)
Note
cert-manager emits "error" logs that are actually "normal".
Assess the "health" of cert-manager by checking status of existing orders and ensuring that they are all
valid
.
Tip
For any orders that show as
invalid
, try deleting that order and related CertificatedRequest and wait for cert-manager to recreate those resources (this may take a few minutes).
Error Logs after Version Upgrade
¶
You may notice the following error logs after upgrading to
v1.6.1
Operation cannot be fulfilled on cert-tls: the object has been modified; please apply your changes to the latest version and try again
Sample log output
:
Dec 13, 2021 @ 12:56:00.380 I1213 20:56:00.380108       1 controller.go:161] cert-manager/controller/certificates-key-manager "msg"="re-queuing item due to optimistic locking on resource" "key"="ciscotechblog-prod-blue/blue-b-techblog-prod-app-tls" "error"="Operation cannot be fulfilled on certificates.cert-manager.io \"blue-b-techblog-prod-app-tls\": the object has been modified; please apply your changes to the latest version and try again"
Check
The above logs are
"benign 99.9% of the time"
2024-07-11