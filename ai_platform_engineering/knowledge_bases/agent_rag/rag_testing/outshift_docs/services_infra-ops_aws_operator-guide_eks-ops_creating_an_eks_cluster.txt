Creating an EKS cluster
¶
This document outlines the process for creating a new VPC using the ET&I Sandbox platform. For an overview of this architecture and/or when/why you should use it, here is a list of additional relevant documents:
Overview
EKS Module
Table of Contents
¶
Module
SRE Module
Public Module
Example
Latest Version
Pre-requisites
Repository
Amazon Web Services -- VPC
Creating a new EKS cluster
Verify EKS Cluster Authentication
(Optional) Add cluster to ArgoCD
Module
¶
SRE Module
¶
Source for SRE's version of this Terraform module:
sre-tf-module-aws-eks
Public Module
¶
The SRE module is an abstraction wrapped around the public Terraform registry module
terraform-aws-eks
. Note that we are pinned to a specific version of this module; check
this file
to determine the version we are using.
Example
¶
Example terraform configurations with more thorough explanations of the available options can be found on the following links:
EKS Module Example
EKS Confgimap Example
These examples are designed to be copied into another repository with modifications.
Note
There are two types of examples in the examples directory,
shared
and
lightspin
. You should use the
shared
example unless you know what you are doing.
Latest Version
¶
See
tags
for the latest version of the SRE EKS module.
Pre-requisites
¶
Repository
¶
A GitHub repository based on the
template
must exist. This repository must have the proper permissions and webhook configured so as to enable the Atlantis bot to function. See
this doc
for specific guidance and/or examples regarding how to set this repository up if it does not already exist.
Amazon Web Services -- VPC
¶
A VPC must exist for a given EKS cluster. Compete the steps in
creating_a_vpc.md
if you have not already done so; this VPC will be referred to in the EKS cluster configuration we will outline below.
You must also ensure that the VPC has the endpoints specific to EKS enabled and associated with the subnets the node groups are running in and with the default VPC security group.
Logs interface
STS interface
EC2 interface
S3 interface
S3 gateway
ECR DKR interface
ECR API interface
Creating a new EKS cluster
¶
If you have not already done so, clone
sre-tf-infra
repository (as identified in the
Pre-requisites
section)
Note: If you are creating a sandbox cluster and/or would like copy-paste examples of some commands, see
this doc
for specific guidance and/or examples.
git
clone
https://wwwin-github.cisco.com/eti/sre-tf-infra.git
Create a new branch and use the Jira-id as the new branch name.
Within the new branch, create a directory structure for the new Terraform configuration:
Pattern:
<cloud>-<account>/<service>/<region>/<resource-name>/<resource>.tf
Example:
aws-eticloud-scratch/eks/us-east-2/sre-dev-3/eks.tf
Copy the
example
eks.tf
into the new resource directory created in the previous step.
Modify the new
eks.tf
file created in the previous step. See
this doc
for specific guidance and/or examples.
Add and/or modify project configuration in the repo's
atlantis.yaml
file as required. See
this doc
for specific guidance and/or examples.
Create a Pull Request within GitHub for the changes made above.
Interact with Atlantis to
plan
and
apply
the changes as explained in the final steps
here
, thus creating the new infrastructure.
Verify EKS Cluster Authentication
¶
The aws-auth configmap is managed outside of this module. Repeat the steps above with
EKS Confgimap
example to create the configmap.
Then verify that the roles specified in terraform have been added to the
aws-auth
configmap:
kubectl
get
cm
aws-auth
-n
kube-system
(Optional) Add cluster to ArgoCD
¶
If the created cluster is a target environment for applications deployed by ArgoCD, follow the steps described
here
to add it to ArgoCD.
To deploy baseapps to the cluster via ArgoCD, follow the steps described
here
2023-11-14