develop otel metrics
push amp metrics
send otel metrics to amazon managed prometheus
send otel metrics to amp
How develop OTEL metrics and push them to Amazon Managed Prometheus
¶
!!! warning This documentation is deprecated, we are using splunk now for observability
Push-based (OTLP) metrics
¶
Note
Outplatform Platform currently uses OTel Push Gateway for CI Metrics.
Outshift Platform support push metrics using OTLP to a platform managed public OTel Gateway that forwards metrics to Amazon Managed Prometheus for long-term storage.
To implement push-based metrics using OTLP, the application needs to be configured to send OTLP metrics to the cluster-local Amazon Managed Prometheus OpenTelemetry Collector Endpoint.
http://<CLUSTER_OR_PRODUCT_NAME>-opentelemetry-collector.opentelemetry-collector:4317
Example Python code snippet
¶
from
opentelemetry
import
metrics
from
opentelemetry.sdk.metrics
import
MeterProvider
from
opentelemetry.sdk.metrics.export
import
PeriodicExportingMetricReader
from
opentelemetry.exporter.otlp.proto.grpc.metric_exporter
import
OTLPMetricExporter
from
opentelemetry.sdk.resources
import
SERVICE_NAME
,
SERVICE_NAMESPACE
,
SERVICE_VERSION
,
Resource
from
time
import
sleep
# Service name is required for most backends
resource
=
Resource
(
attributes
=
{
SERVICE_NAME
:
"test-123"
,
SERVICE_NAMESPACE
:
"devx"
,
SERVICE_VERSION
:
"1.0.0"
,
VENTURE_NAME
:
"CSPM"
})
COLLECTOR_ENDPOINT
=
"http://lightspin-dev-1-opentelemetry-collector.opentelemetry-collector:4317"
INTERVAL_SEC
=
10
# Boiler plate initialization
metric_reader
=
PeriodicExportingMetricReader
(
OTLPMetricExporter
(
insecure
=
True
,
endpoint
=
COLLECTOR_ENDPOINT
),
INTERVAL_SEC
)
provider
=
MeterProvider
(
metric_readers
=
[
metric_reader
],
resource
=
resource
)
# Sets the global default meter provider
metrics
.
set_meter_provider
(
provider
)
# Creates a meter from the global meter provider
meter
=
metrics
.
get_meter
(
"counter-test"
,
"1.0.0"
)
counter
=
meter
.
create_counter
(
name
=
'lightspin_counter'
)
while
True
:
counter
.
add
(
1
)
sleep
(
3
)
print
(
"loop"
)
Note
Metrics sent to Amazon Managed Prometheus are labeled with the cluster identification label
etip_source_cluster=<cluster_name>
. It is recommended to filter metrics with this label to identify the source cluster for the metric.
2025-06-20