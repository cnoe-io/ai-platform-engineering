baseapps external secrets
external secrets operator
External Secrets Operator
¶
Overview
¶
External Secrets Operator (ESO)
is a Kubernetes operator that integrates with external secret managers like HashiCorp Vault, AWS Secrets Manager, etc.
The operator fetches secrets from Vault and automatically injects them into a Kubernetes Secret.
External-Secrets User Guide
¶
This document describes how to configure your applications to leverage the
External-Secrets operator
deployed to the shared k8s clusters in the ETI platform.
Overview
¶
Keeper
is a deployment of
Hashicorp Vault
managed and provided by Cisco's crypto team.
ETI Platform uses Keeper as the storage solution for
secret management
. It is used primarily to store
operational secrets
(e.g., credentials for accessing databases, cloud provider managed services, etc.).
External-Secrets operator
is deployed to all shared k8s clusters managed and provided by the SRE team. The External-Secrets operator is responsible for retrieving secret values from Keeper and making it available to the application as a
k8s secret
. The rest of this document describes how to configure your application to specify which secret values you want to make available to your application.
Configuring Applications for Secrets
¶
Pre-Requisites
¶
Your application has been containerized and a Helm Chart defined for deployment to k8s
A
CI/CD pipeline
has been created by SRE team to deploy your application to k8s
Your application's target k8s cluster has been configured with the External-Secrets operator deployed for Keeper access by SRE team. (All
shared k8s clusters
are already configured for this)
The secrets you want to pull into your application has been saved to an appropriate namespace and path in Keeper
Steps
¶
In your application repo:
Create a PR to update your application's Helm Chart with a template for the external-secrets CRD
An example is available in the sre-go-helloworld app,
here
Update the Deployment template (
deployment.yaml
) in your Helm Chart to expose the secrets to your application via environment variables
See
here
for an example in sre-go-helloworld
Remember to bump the version of your Helm Chart to capture the above change.
Update your application to read the secret value in via an environment variable of your choosing.
Merge the PR to publish the updated Helm Chart
In your deployment repo:
Create a PR to specify the secrets you want to read from your application.
Add an
externalSecrets
map in the
values.yaml
file configured for your application.
Expected format:
externalSecrets:
secretStoreName: <name of the ClusterSecretStore created for your Keeper namespace> # Reach out to SRE team for this value.
secretStoreKind: ClusterSecretStore
data:
- secretKey: <environment variable name for your application> # This is the environment variable you updated your application to read in Step 1.
remoteRef:
key: <Vault path to your secret's location in keeper>
version: "<version of the secret you want to read>" # omit to always read latest version
property: <name of the secret property in Vault>
data
is a list of
secretKey
objects (lines 5-9), each representing one secret value. You can add as many secrets to the
data
list as needed.
See a working example for the sre-go-helloworld app
here
Remember to bump the Helm Chart version to pull the one with the changes you made in Step 1.
Merge the PR to roll out the changes.
Changes merged to the main branch auto-sync every 3 minutes. You can optionally re-run your application's deploy job to force a sync.
Restart your application's pod to read in the new secret.
How-to setup external-secrets in k8s
¶
Step 1. Create external-secrets chart in sre-helm-charts
¶
sre-helm-charts/external-secrets
.
âââ Chart.yaml
âââ templates
â âââ clusterissuer-staging.yaml
â âââ clusterissuer.yaml
â âââ es-route53-creds.yaml
â âââ namespace.yaml
âââ values.yaml
clusterissuer-staging.yaml:
Let's Encrypt Staging Cluster Issuer
clusterissuer.yaml:
Let's Encrypt Prod Cluster Issuer
es-route53-creds.yaml:
Route53 AWS creds stored in k8s secrets used for DNS validation
Step 2: Publish Charts to Chart Museum
¶
ChartMuesuem UI
Step 3: Create ArgoCD ApplicationSet for new app
¶
# ArgoCD Login
argocd login argocd.int.ccprod02.prod.eticloud.io --grpc-web
# Create external-secrets Applicationset
argocd app create external-secrets-applicationset --dest-namespace argocd --dest-server https://kubernetes.default.svc --repo https://wwwin-github.cisco.com/eti/sre-cluster-configs --path sre/external-secrets --project clusterops.eticloud.io --grpc-web
Next steps:
-
sre-cluster-configs for external-secrets
-
ArgoCD external-secrets applicationsets
External References:
¶
https://external-secrets.io
https://www.vaultproject.io/docs/auth/kubernetes
https://external-secrets.io/provider-hashicorp-vault/
https://www.linkedin.com/pulse/secret-management-kubernetes-external-secrets-hashicorp-stephen-kuntz/
https://wwwin-github.cisco.com/eti/sre-utilities/blob/master/scripts/argocd/argocd_external_secrets.sh
2023-09-03