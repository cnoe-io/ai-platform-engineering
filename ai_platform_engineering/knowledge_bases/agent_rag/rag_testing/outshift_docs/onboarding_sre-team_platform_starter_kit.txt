ESO
ExternalSecrets Operator
Keeper authentication
platform starter kit
venture onboarding
Platform Starter Kit
¶
External Secrets Operator
¶
New ventures/projects will need to store secrets in
Keeper
/Vault.
When deploying workloads in Kubernetes, those secrets will be used, but a couple of steps are required before workloads can access
said secrets in Vault. Note that the current setup (especially with regards to the Vault auth may change in the near future).
Vault namespace
¶
A Vault namespace specific to the Venture/project needs to be created in Keeper/Vault.
Example:
https://github.com/cisco-eti/platform-terraform-infra/tree/main/keeper/namespaces/eticloud/apps/pyramid
.
Add a new folder under
apps/<venture>
and deploy with Atlantis. Note that this would need to be slightly more automated (terraform module?).
Vault Authentication method, config, role and policy
¶
We've chosen to deploy a
ClusterSecretStore
for each venture/project. This is to allow the Operator
to create the
ExternalSecret
resources in any namespace in a given Kubernetes cluster (we don't know which those will be ahead of deployment).
We've also chosen to provide Vault authentication with the
Kubernetes Auth method
. Therefore, 4 resources will need
to be created in Vault in the aforementioned namespace. We can also do it with Terraform from
platform-terraform-infra
.
# cluster resources for external-secrets for pyramid
module
"eso_<venture>"
{
cluster_ca
=
base64decode
(
data.vault_generic_secret.cluster_certificate.data
[
"b64certificate"
])
cluster_endpoint
=
data.vault_generic_secret.cluster_endpoint.data
[
"cluster_endpoint"
]
cluster_name
=
local.cluster_name
# reference the EKS cluster the venture will work from
environment
=
local.environment
# dev/staging/prod
policy
=
local.policy_ventures
source
=
"git::https://github.com/cisco-eti/sre-tf-module-eso-access.git?ref=2.0.7"
vault_namespace
=
"eticloud/apps/<venture>"
providers
=
{
vault
=
vault
.
<venture>
}
}
Full example
here
. Each new venture/project can be added as an
eso-access
module call for a given EKS cluster/environment.
This is done to be decouple configuration changes applied to the EKS cluster terraform module call/definition, so that a terraform/atlantis apply doesn't involve a change to the actual cluster (following the principle of loose coupling between a) the cluster and b) the Vault authentication).
External Secrets Operator
¶
Once the Vault resources are configured, the External Secrets Operator will need to be updated in the same EKS cluster/environment so that the
ClusterSecretStore
is configured.
In
sre-baseapps-configs*
:
secretstores
:
-
name
:
vault-eticloud-apps-<venture>
# same as the above venture/project value
kind
:
ClusterSecretStore
namespace
:
external-secrets
vault
:
server
:
https://keeper.cisco.com
path
:
secret
namespace
:
eticloud/apps/<venture>
kubernetes
:
mountPath
:
<cluster_name>
# same as the above EKS cluster name
role
:
external-secrets-<cluster_name>
# The Vault role created in the previous step
serviceAccountRef
:
name
:
external-secrets-vault
namespace
:
external-secrets
[
...
]
accesstests
:
-
name
:
eticloud-apps-<venture>-access-test
namespace
:
external-secrets
secretStoreRef
:
name
:
vault-eticloud-apps-<venture>
kind
:
ClusterSecretStore
target
:
name
:
eticloud-apps-<venture>-access-test
data
:
-
secretKey
:
PYRAMID
remoteRef
:
conversionStrategy
:
Default
decodingStrategy
:
None
key
:
dev/eticloud-apps-<venture>-access-test
metadataPolicy
:
None
property
:
foo
See example in
comn-dev-use2-1
.
2025-05-12