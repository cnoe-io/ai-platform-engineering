Internal Documentation
¶
Internal Documentation
Overview
Current State
Future State
Benefits
Limitations
Workflows
Directory Structure (Work in Progress)
Best Practices
Productivity Tools and Tips
Resources
Overview
¶
This document describes the methodology for capturing information to be shared
internally
within the SRE team.
The scope of this proposal does
not
include venture-facing documentation, which serves a different audience/purpose and thus requires further evaluation.
The goal of this doc is to describe the workflows and tools to improve usability and experience for both the documentation writers
and
readers.
Current State
¶
The majority of internal documenation that exists today are created in and published to the
SRE Internal Site
in SharePoint, which is the team's currently agreed-upon destination for documentation.
More recently, some of these docs have been created as Markdown files in an
sre-docs
GitHub Enterprise (GHE) repository, which serves as the "source of truth" for the content that is then manually re-published to SharePoint. The main motivations for creating and storing documentation in GHE in the first place was to
separate content and presentation
concerns by drafting content in Markdown, a markup language that was designed specifically to achieve an
easy-to-write and easy-to-read
plain text format; SharePoint's support for MarkDown is significantly limited (especially in editing mode), which makes it unviable as a standalone tool for creating and revising Markdown-formatted files.
However, the manual steps required for re-publishing the same content to SharePoint creates significant friction for creating new docs and improving existing docs. These steps include copy/pasting file(s) from GHE to SharePoint as well as re-uploading any images embedded and referenced by these docs as SharePoint assets to ensure accessibility from the SharePoint pages, then updating the urls in both the source and SharePoint page to reflect the new image urls in SharePoint. These manual steps must be repeated for
every
document update/iteration.
Future State
¶
To address the labor overhead of synchronizing content between the Markdown content "source" in GHE and published "front-end" in SharePoint, we will redefine GHE as the team's agreed-upon destination for creating
and
consuming internal documentation.
Benefits
¶
The benefits of making this change include:
* Eliminating the labor overhead of manually "syncing" content between GHE and SharePoint
*
Leveraging familiar tools and workflows
for version control and peer reviews via PRs for new/updated docs
* Consolidating all internal docs into a centralized, searchable repository that enforces basic
information architecture
(e.g., categorizing the doc under the most appropriate subdirectory), thus improving readers' ability to find relevant content
* Retaining the
separation of content and presentation
benefits afforded by Markdown
* Leveraging GitHub's built-in Markdown renderer to create easy-to-read formatting for readers
* Variety of Markdown tools/plugins readily available in IDEs (e.g., VS Code) (see
Productivity Tools and Tips
)
Limitations
¶
One limitation of fully migrating internal docs to GHE is that it may reduce the visibility of these docs to teams outside of SRE and/or ETI. To mitigate these concerns:
* the SRE internal docs will remain in the
sre-docs
repo, which is a "public" repo in the
ETI GHE org
and thus visible/searchable by default by anyone in ETI
*
[!!!Discuss]
we can also maintain a single high-level "index" page in SharePoint with links back to docs in GHE to direct users from SharePoint to GHE
Workflows
¶
One of the primary benefits for making this change is that the workflows for creating/editing documentation is no longer any different from making code changes:
Clone/pull latest changes to your local checkout of the
sre-docs
repo
Create a new branch; add, commit, and push your documentation changes
Create a Pull Request and (optionally) request peer review/feedback
Merge the Pull Request
Directory Structure (Work in Progress)
¶
The internal_docs directory is the root directory for all SRE internal docs. The subdirectories within this root directory provide high-level categorization of documents as follows:
internal_docs
âââ discussions             # design proposals, tech evaluations, etc.
âââ onboarding              # SRE onboarding docs
â   âââ resources               # images embedded in docs in this directory
âââ procedures              # "how-to" docs
â   âââ appnet_docs_sites       # logical grouping of "how-to" docs
â       âââ resources               # images embedded in docs in this directory
âââ production_changes      # method-of-procedure (mops) for production change roll-outs
â   âââ resources               # images embedded in docs in this directory
âââ recordings              # index of recorded meetings
âââ write_ups               # knowledge-sharing docs that do not belong to any of the above
âââ resources               # images embedded in docs in this directory
Best Practices
¶
While the proposal to move internal SRE docs to GHE is largely a tooling/workflow decision, it is important to keep in mind that our
ultimate
goal is to
clearly
and
efficiently
share information within the team. As a globally distributed team, effective documentation plays a vital role towards achieving this goal. To that end, here are some "Best Practices" tips to consider while writing your docs:
Understand the
goal
of your document. What do you want the reader to have achieved after reading your document? (e.g., to have successfully executed
<some change>
, to have resolved an alert about
<foo>
, to have gained an understanding about the architecture/design of component
<bar>
, etc.).
Be
concise
, but don't leave out details/context
necessary
for the reader to achieve the goal you identified in the step above
Put yourself in the reader's shoes as you are writing the document; will they be able to achieve the goal you defined after reading your document? Are there extraneous details that distract the reader from achieving that goal that you can eliminate?
Provide a
short
summary or overview of what the document is about at the beginning. Sometimes, something as trivial as
auto-generating
a Table of Contents that provides an instant outline of your doc may suffice; other times, an explicit introductory prose may be needed.
Take a look at some of the many resources/guidelines (e.g.,
this "beginnerâs guide to writing documentation"
) about effective technical writing written by experts in this field
Productivity Tools and Tips
¶
VS Code Plugin: Markdown All in One
Table of Contents generator
is particularly useful
VS Code Plugin: Excel to Markdown table
- handy if you want to render tables in your docs
Resources
¶
Write the Docs's "A beginnerâs guide to writing documentation"
2023-09-21