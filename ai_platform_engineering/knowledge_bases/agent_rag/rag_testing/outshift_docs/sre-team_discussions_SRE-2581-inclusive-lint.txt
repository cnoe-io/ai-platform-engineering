Internal Documentation
¶
Overview
Objectives
Implementation details
Current implementation
New proposal
Metrics
plugin implementation
Accessing metrics
Building dashboard
References
Overview
¶
This document describes the upcoming implementation of the phase 2 for
inclusive lint
implemented within the SRE pipeline.
Objectives
¶
The objective of the phase 2 for the inclusive lint step in the SRE pipeline library is to be able to give more metrics so that we will have better visibility on inclusive violation and then take actions. Everything is currently describe in
SRE-2574
.
Implementation details
¶
Current implementation
¶
In the current implementation as per
sreInclusive.groovy
, we're currently just running
woke cli
and capture output in the file which is then expose in the Jenkins console output:
sreUtils
.
writeFromResources
(
'woke/rules.yaml'
,
'rules.yaml'
)
sh
"""
set -e
woke --version
woke -c rules.yaml ${FILES} > inclusive.output
cat inclusive.output
if [ -s inclusive.output ]
then
echo "WARNING you've got non inclusive terms"
# TO BE ENABLE in 2 weeks
#exit 1
else
echo "You're good with inclusive checks"
fi
"""
The current
rules.yaml
file is defined based on
Cisco Terminology Recommendations
New proposal
¶
This new proposal need to expose metrics such as number of inclusive violation which could be just a counter but then, having meta data associated to it such as project / venture could be useful to have better visibility.
NOTE
For this iteration, we will limit the scope of woke linter to Policy for Approved/Active Replacements in the
Cisco Terminology Recommendations
. With regards to any of the "Recommendations Under Consideration/Advise Against Using" terms, this will be discussed / integrated later.
We were currently thinking about different options:
Using the push approach:
a) forking woke, writing a plugin, pushing to a
pushgateway
instance directly
b) prometheus output format > file, then pushing it to pushgateway by e.g. curl
leaving the collection of metrics to prometheus: prometheus output format > file, then archive the file and wait for prometheus to query the results through
textfile-collector / node exporter
Here is a diagram with the current option using plugin & push gateway which aims to be a longer / common approach in the ET&i platform:
Metrics
¶
Here is a list of metrics what we should track consider:
counter/histogram of builds that contains lint violation
gauge per project to track lint violation evolution
gauge per terms
In order to achieve that, here is a list of metrics align with
prometheus data model
:
woke_result{file="CHANGELOG.md:62:24-30", term="master", repo="sample", something="else"} 1
woke_result{file="README.md:1:241-247", term="master", repo="sample", something="else"} 1
plugin implementation
¶
Before being upstream, we work on a
fork of woke which is under eti organisation
. Sign-offs contribution can be followed undre the
OSC tool
.
We've implemented Prometheus and PushGateway plugin as describe in the
woke documentation
Accessing metrics
¶
Currently, the new plugins are deployed in different clusters as per the
ArgoCD applicationsets
where eks-sre-4 is for development, eks-dev-1 for integration and p3-prod-2 is used for production which is the reference of the pipeline library.
To access woke metrics on p3-prod-2, you can use
this link
.
Building dashboard
¶
In order to consumed those metrics, you can easily build grafana dashboard as per the p3-prod-2 deployment, where
dashboard example is available
and screenshot:
For example, if you want to do a gauge on one term, you simply use this expression:
sum(woke_result{term="master"})
Then, you can also filter by project and repo for example:
sum(woke_result{project="SRE", repo="sre-pipeline-library"})
References
¶
inclusive lint
woke
Terminology Recommendations
2023-08-25