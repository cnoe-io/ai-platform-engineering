Github Actions discussions
¶
Context
¶
In order to create our first sre-go-helloworld workflow with GH Actions, we will use some actions that are shared by the community on the public marketplace. 
First question that comes up is should we use public marketplace or create our private one by forking these actions...
Team suggestions/opinion gathering
¶
Private/public marketplace for GH actions
¶
Proposal: 
- use internal marketplace,
More details
and
here
Or "verified" actions,
More details
Below Mark Sagi-Kazar answers:
Restricting engineers to use only internal actions is not going to fly well. I would certainly encourage them to use the internal marketplace if it's available and maybe alert for the use of external actions (maybe allstar can do that), but I wouldn't restrict the use of external actions.
Unless it's heavily automated (including adding new actions and workflows), it's high maintenance. But if it's automated, what exactly is the kind of "verification" we want to do?
In case there is a bug or a contributed feature in the action, it's gonna take an extra step to get that mirrored back in the fork
I would certainly NOT create an internal copy of actions at the beginning. It increases the initial costs and IMO it diverts resources (ie. time) from figuring out the important parts.
It's a potential improvement to consider later (with the above conditions).
In the meantime:
- As a best practice, pin actions to commit hashes (
https://github.com/sagikazarmark/todobackend-go-kit/blob/main/.github/workflows/ci.yaml
) 
- Use dependabot, to update them
If necessary, you can still do whatever scanning you want to do on the original repos. Pinning commit hashes ensures that your workflow will fail if someone is trying to tamper with the repository (or actually, it will not, because commits cannot be deleted).
That doesn't mean I don't see the pros though, I just think it's not the most valuable improvement at the beginning of the process and it takes a lot of time to get it right.
I'd focus on:
- making sure to use a select few actions that we know we can trust (from GitHub, Docker, etc)
- provide useful workflow templates for engineers
- figure out what checks we want to run for every repository (inclusivelint, openssf scorecard, dependency review, snyk (if we acquire a license))
- and how we can enforce them (either via required workflows (I don't think we can use them for every scenario) or some sort of automatically managed workflows)
- figure out if we have to use self-hosted runners and how we can run them
- figure out how to reach other services (Vault, ECR, etc) securely (I'd look at the OIDC based service to service authentication solutions, I know that it works with vault, so you don't have to manually set up and rotate an app role token)
- figure out how all these fit into BES
I believe these are higher priority than setting up an internal marketplace (but BES may very well mandate that we set one up, so the priority could change)
I'd once more caution against heavily reusing workflows across projects....a little bit of copy-pasting is always better than creating bloated abstractions.
For example: creating a workflow with no input parameters whatsoever that builds a single Dockerfile in the repo and pushes to ghcr.io/org/repo is fine.
Creating lower level, reusable workflows should also be fine.
But I'd advise against creating a central workflow, similar to what we have in Jenkins.
As you (very eloquently) said: developers have more say in what goes into their workflows with GitHub Actions.
Precommit-action
¶
This action is available
Here
- Idea: 
  - its in maintenance mode
  - its not certified
  - seems to allow arbitrary code execution: "extra_args: flake8â¦" and from the python pre-commit docs "You specify a list of hooks you want and pre-commit manages the installation and execution of any hook written in any language before every commit"
Answer
A high percentage of popular actions out there are not "certified".
I believe those args are passed to the pre-commit run command (says so in the documentation), so no, it doesn't allow arbitrary execution. (BTW that's how most actions work that wrap a CLI tool)
This is an interesting solution:
https://github.com/step-security/harden-runner
2023-08-25