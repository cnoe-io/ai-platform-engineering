Evolute tag script
evo1ute script
Slide 16
¶
Thank Noam.
Noam just laid out a strong business case for evo1ute, which showcases the disconnect between telemetry data about user behavior and the application components that enable the end user features. Bridging that gap is what evolute is trying to solve
Today, telemetry data for user behavior, application components and infra costs reside in silo'ed tools. Business owners have to manually map or/translate between the said tools to make business decisions
For example- How can a business owner decide that a feature "foo" is too expensive to maintain?
We will answer these questions by walking you thru a high-level evolute architecture and use-case deep-dive
Slide 19
¶
Arch View
Here we are looking a high-level architectural view of evolute
On the left hand side is the customer SaaS solution. We are targeting Cloud Native workloads in our initial use-case.
At the bottom left are the cloud service provider managed services
And bottom right a third party business analytics tool like Google Analytics
Top right is Evolute cloud.
evolute will be implemented as a k8s operator
evolute will leverage telemetry stacks like epsagon, apiclariy to detect/trace API traffic and inject in the evolute SaaS Cloud
After the telemetry data has been injested to evolute cloud, evolute SaaS cloud correlates that data with business analytics data with a novel feature_id meta tagging we will talk about shortly
evolute SaaS cloud has
Frontend UI components for Business owners to visualize their architecture
Backend services that will be responsible for data injestion and correlation.
This is a high-level of evolution solution architecutre
We that intro, I am going to pass the ball to Sally to walk us thru an use-case.
[Slide 22] Example use-case
¶
Thanks Sri.
[click]
So, I'm going to take a concrete use case of an e-commerce application and walk through the relevant data streams we'd want to analyze.
In this example, we have a business owner who wants to track a specific business KPI -
[click]
"Lead time to sale," for example.
[click]
The end-users who visit the e-commerce app invokes specific features of the app, such as "Voice Search."
The application front-end components are
[click]
instrumented to send behavioral metrics for these specfic features to a Business Analytics solution, such as Google Analytics. The Ev01ute backend integrates with the customer's Business analytics solution to gain visibility into these metrics.
Each feature invocation also triggers
[click]
a set of components in the customer's application backend that implement that feature. Data about this application-level traffic, which include
[click]
REST API calls,
[click]
Database queries, etc., are collected and analyzed
[click]
by Ev01ute tools provided to the customer as a Kubernetes operator to facilitate installation in their environment.
These Ev01ute tools forward
[click]
the analyzed traffic data to the Ev01ute SaaS backend, which then
[click]
correlates this
application traffic
data with
feature usage
data from the business analytics system to assess the relevance of specific components to specific features.
That
[click]
relevance
insight enables ev01ute to map components of the
system architecture
to
business KPIs
.
[Slide 25] Use-case deep dive
¶
Now, let's take a deeper look into
how
we can enable correlating application traffic with feature usage.
[click:26]
The first step is to identify the key end-user-facing features that the customer is interested in tracking. These features will be unique to each customer's application, and so we need the customer to provide this information.
We will define unique
feature_ids
to associate with each of those key features. This notion of "feature_ids" as a first-class metadata attribute throughout the application and Ev01ute system is really the key to enabling the correlations that we will need to make later.
This is important, because a huge challenge with understanding the cost of a particular feature, is mapping that feature to all the underlying technical components that are required by that feature.
[click:27]
Complex interdependencies between hundreds of microservices evolve rapidly and organically, often beyond the understanding of any one engineering team, let alone an individual. The upfront effort required to enumerate all the features each component may be directly or indirectly involved in is the main barrier that customers face in trying to gain feature-specific usage and insights about its cost,
[click:28]
and that's the barrier that we want to lower for our customers.
[click:29]
In order to achieve this, we will implement a "scoring mechanism"
[click:30]
that tracks "which components were invoked for feature foo?". These "invocation scores" are what enables Ev01ute to assess the relative
relevance
[click:31]
of a specific component to a particular feature.
So at this point, we can see which
service components
are required by
feature foo
, but we still don't have visibility into the
cost
of those service components. In order to understand that, we need to be able to map
functional
service components to their underlying cloud resources
[click:32]
, which is the level granularity that Cloud Provider bills are described in.
For example, AWS Cost Explorer can show customers that they spent an
x
amount this month on EC2 instances,
y
amount on Elasticache, and so on and so forth, but this level of granularity doesn't show
how much
of that total EC2 cost was allocated to enabling
feature
foo
vs
feature
bar
.
This is where we can leverage Epsagon.
[click:33]
Epsagon can correlate invocations of specific service components to their underlying cloud resources. They've done the hard work of identifying the relevant pieces of information in data from Cloud Providers (such as CloudWatch logs) that can be used to correlate cloud resources with application-level events.
[click:34]
By leveraging Epsagon, we can map
functional service components
to their underlying resources, and their cost,
without
having to ask customers to engage in laborious instrumentation or cloud resource tagging efforts.
Now, Sri is going to describe how this extension fits into the existing ecosystem of solutions available from both inside and outside of Cisco.
2022-04-25