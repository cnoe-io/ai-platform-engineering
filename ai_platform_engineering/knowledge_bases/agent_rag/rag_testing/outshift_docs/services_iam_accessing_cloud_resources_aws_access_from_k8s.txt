Accessing AWS from Kubernetes
¶
This page describes the recommended tools/implementations for enabling access to AWS resources for applications deployed to Kubernetes clusters managed by AWS (
Amazon EKS
).
Overview
Implementation Requirements
IRSA Example
Local Dev
References
Overview
¶
Applications should leverage AWS SDK libraries, which all support
IAM roles for service accounts
(IRSA) as of these
minimal versions
. These SDK libraries automagically use AWS credentials provided by the IAM role specified in the application pod's
Service Account
as an
annotation
(see
this AWS doc
for technical details).
Implementation Requirements
¶
The following configurations must be in place to enable role-based authentication for AWS access at the application layer:
IAM OIDC provider has been enabled for the target EKS cluster - Configured by SRE team
Appropriate IAM role and policies has been created for the application in question - Configured by SRE team
Application
Service Account
has been annotated to with the IAM role created in the previous step - Defined in Application's helm chart
IRSA Example
¶
The
sre-go-helloworld app
implements a simple
/s3
endpoint that uploads a file to S3 to demonstrate role-based authentication to AWS.
It also implements a
/gci
endpoint that displays IAM details retrieved by the application, which invokes the
GetCallerIdentity API operation
for the
AWS Security Token Service
and shows the returned IAM details on the web page. Thus, this page can be used to validate that the application is assuming the correct IAM role for AWS access.
See the following links for more details:
Service Account configuration in Helm Chart
S3 upload endpoint
and relevant
code
GetCallerIdentity endpoint
.
Local Dev
¶
Since the IAM roles for service accounts solution requires deployment to EKS, you will need to pass in the AWS credentials directly to your application when running it locally on your machine for development.
You can use
duo-sso
to populate your local AWS credentials file with temporary credentials via Cisco SSO, as described
here
.
For example, the following
docker run
command runs the latest
sre-go-helloworld:latest
built image locally and mounts the local AWS credentials file to enable access via those credentials. It explicitly sets the
AWS_PROFILE
environment variable (among other env vars normally passed into the application running in k8s via
ConfigMap
) to specify the desired profile.
docker run -it -p 5000:5000 -e DB_CONNECTION_INFO=/tmp/dbconfig.json -e DB_NAME=helloworld -e DISABLE_IDP=disable -e S3_BUCKET=eks-sre-1-test -e AWS_REGION_OVERRIDE=us-east-2 -e AWS_PROFILE=scratch -v $PWD/build/:/tmp/ -v ~/.aws/credentials:/root/.aws/credentials --link postgres:postgre sre-go-helloworld:latest
References
¶
AWS Blog:
Introducing fine-grained IAM roles for service accounts
AWS EKS Best Practices Guides:
IAM Roles for Service Accounts (IRSA)
2022-11-04