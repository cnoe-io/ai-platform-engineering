Build Pipeline Metrics
¶
Custom Build Metrics
¶
The sre-pipeline-library provides a
sendMetric
function that can be invoked to emit metrics to a prometheus remote-write endpoint. By default, metrics are emitted to the dev Mimir endpoint, but this can be overridden via the
BUILD_METRICS_ENDPOINT
environment variable.
This function is implemented in
srePipeline.groovy
.
It is invoked in the shared pipeline library code's
runPipeline
function to emit per-stage metrics to track the duration and success/failure results of each pipeline stage:
def
runPipeline
(
Map
params
,
List
stages
)
{
[...]
for
(
stageItem
in
stages
)
{
def
startTime
=
System
.
currentTimeMillis
()
try
{
log
.
debug
(
"Running stage: ${stageItem.label}"
)
stageItem
.
action
(
params
)
sendMetric
([
'stage'
:
"${stageItem.label}"
],
"stage_success"
,
'counter'
,
1
,
'-S srepipelinelib'
)
}
catch
(
Exception
e
)
{
log
.
info
(
"Stage ${stageItem.label} failed: "
+
e
.
toString
())
sendMetric
([
'stage'
:
"${stageItem.label}"
],
"stage_failure"
,
'counter'
,
1
,
'-S srepipelinelib'
)
}
finally
{
def
endTime
=
System
.
currentTimeMillis
()
def
duration
=
(
endTime
-
startTime
)
/
1000
log
.
info
(
"Stage ${stageItem.label} duration: ${duration}s"
)
withEnv
([
"JOB_NAME=${JOB_NAME}"
,
"BUILD_SERVICE_NAME=srepipelinelib"
])
{
sendMetric
([
'stage'
:
"${stageItem.label}"
],
"stage_duration"
,
'histogram'
,
duration
,
'-u s'
)
}
}
}
}
[...]
The
sendMetric
function invokes the python library code in
sre-pipeline-library/lib/python/metrics/prometheus_exporter.py
. At the time of this writing, this module supports emitting metrics of the following types (known as
Instrument kinds
in OpenTelemtry) supported by the
python API
for OpenTelemetry:
counter
,
histogram
,
up_down_counter
.
The
sendMetric
function requires the following mandatory arguments:
String instrument_name
,
String instrument_type
, and
Float measurement_value
.
It can also be invoked with an optional
Map attrs
to specify custom attributes for the metric. The optional
String optional_args
parameter allows you to pass any other additional optional arguments supported by the
prometheus_exporter.py
module.
Stage Success/Failure and Duration Metrics
¶
srePipeline
Users
¶
The
pipeline implemented by the srePipeline library
is already instrumented to emit stage metrics in this manner. Stage metrics will automatically be enabled for users of srePipeline. The only change needed is to specify the
serviceName
parameter to ensure that metrics emitted by your build job can be attributed to your service. Otherwise, the metrics will be attributed to an
unknown
service, and you will not be able to distinguish them from other jobs' unattributed build metrics.
Set the
serviceName
parameter in the params map passed to
srePipeline
in your Jenkinsfile:
@Library
([
'srePipeline'
])
_
def
pipelinesettings
=
[
deploy:
[
[
name:
"foo-api"
]
// Containers to publish
],
serviceName:
"foo"
,
// Name of service (for metrics attribution)
...
]
srePipeline
(
pipelinesettings
)
Custom Pipeline Users
¶
To facilitate capturing per-stage success/failure and duration metrics, the sre-pipeline-library provides a utility method called
stageMetrics
in
srePipeline.groovy
. You can instrument your pipeline to emit these metrics by wrapping the body of a stage block with this method.
The
stageMetrics
takes in an
opts
argument to enable passing a Map of parameters. At a minimum, you should specify the
service_name
parameter to ensure your build metrics are attributed correctly to your service.
Pass the name of your service directly to the
stageMetrics
method via the
service_name
key in its
opts
Map:
@Library
([
'srePipeline'
])
_
final
metricsOpts
=
[
'service_name'
:
'bar'
]
pipeline
{
agent
{
docker
{
[...]
}
}
stages
{
stage
(
'checkout'
)
{
steps
{
script
{
srePipeline
.
stageMetrics
(
metricsOpts
)
{
// Clean-up workspace to get a fresh copy of files
sh
'rm -rf $WORKSPACE/*'
params
=
sreGetProperties
.
all
(
params
)
sreUtils
.
printMap
(
params
)
checkout
scm
}
// stageMetrics
}
// script
}
}
// checkout
...
}
// stages
}
// pipeline
Example:
eti-plaform-docs Jenkinsfile
2023-06-16