cluster alert routing
configure custom alert routing
custom alerting routing pagerduty
kps cluster local alert routing
How to create alert routing in Kubernetes cluster using AlertManager
¶
!!! warning This documentation is deprecated, we are using splunk now for observability
This document describes how to create custom alert routing to a specific application team from Kubernetes Alertmanager Config and PagerDuty integration.
Overview
¶
In this document, we will:
Create custom PagerDuty service, escalation policy, events api integration
Setup & configure PagerDuty Webex bot
Modify application to add custom alerts
Note
The screenshots captured below show examples of following the steps for the "Maestro" application.
Step 1: Create custom PagerDuty service, escalation policy, events api integration
¶
Tip
Create an SRE Service Desk ticket to create pagerduty service
Create a new PagerDuty service creation.
Create a new PagerDuty escalation policy
Create a events api integration
Copy the integration key for use in next step
Step 2: Modify application k8s manifests to add custom alerts
¶
Add custom alerts to application helm chart
Example alert
Create an alert with the following labels
application
and
component
.
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
name: {{ .Values.serviceName }}-prometheus-alerts
namespace: {{ .Values.namespace }}
labels:
application: motific
component: rag
severity: critical
spec:
groups:
- name: {{ .Values.serviceName }}
rules:
- alert: {{ .Values.serviceName }}-down
annotations:
description: {{ .Values.serviceName }} health-check reports service is down
runbook_url: https://wwwin-github.cisco.com/pages/eti/eti-platform-docs/services/helloworld-apps/platform-demo/operator-guide
summary: {{ .Values.serviceName }} health-check reports service is down
expr: health_self_state{service_name="{{ .Values.serviceName }}", health_check_type="SELF", health_check_name="{{ .Values.serviceName }}"} >= 3
for: 1m
labels:
severity: warning
service: {{ .Values.serviceName }}
Step 3. Configure Custom App Alert Routing
¶
Work with SRE team to update the baseapps to custom alert routing. The SRE team will update the platform's alertmanager with a routing rule for your service.
See more information on
alertmanagerconfig helm chart
Example baseapp configuration for Motific RAG Alert Routing.
apiVersion: monitoring.coreos.com/v1alpha1
kind: AlertmanagerConfig
metadata:
name: release-name-alertmanager-config
spec:
route:
continue: true
matchers:
- name: application
regex: true
value: motific
- name: component
regex: true
value: rag
receiver: "null"
routes:
- continue: false
matchers:
- name: severity
regex: false
value: critical
receiver: motific-dev-rag-high-priority
- continue: false
matchers:
- name: severity
regex: false
value: warning
receiver: motific-dev-rag-low-priority
receivers:
- name: "null"
- name: "motific-dev-rag-high-priority"
pagerdutyConfigs:
- routingKey:
name: "motific-dev-rag-high-priority"
key: "integrationKey"
- name: "motific-dev-rag-low-priority"
pagerdutyConfigs:
- routingKey:
name: "motific-dev-rag-low-priority"
key: "integrationKey"
Tip
In the above example, Motific RAG application alerts will automatically be routed to the
motific-dev-rag-high-priority
pagerduty receiver based on the alert labels set in the alert.
2025-06-20