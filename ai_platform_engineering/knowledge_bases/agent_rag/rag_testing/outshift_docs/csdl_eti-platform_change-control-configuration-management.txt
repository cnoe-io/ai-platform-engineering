SCF-CCC-01.01
SCF-CCC-04.02
Change Control and Configuration Management
¶
Reviewed and approved by: Hasith Kalpage (haskalpa) - 30 September 2024
Change Management Workflow
¶
CCF: CCC-01.01
The Outshift platform team follows the agile model for software and systems development. In this model, new and existing workloads are continuously identified and prioritized by lead team members before they are assigned to an owner for execution, as described below.
Planning
¶
New work items, whether internally identified system needs or external requests from venture teams, are captured in Jira and marked as in
backlog
while detailed requirements are discussed with the stakeholders as needed and captured in that Jira ticket. Once all the requirements have been captured, the workload is prioritized relative to existing workloads that are already planned or in flight. Items with top priority are marked as
planned
and assigned to appropriate owners for execution.
Design
¶
For new systems that require novel implementations, solutions that meet the requirements captured in the previous step are proposed and reviewed by the team as needed. Isolated "scratch" environments are leveraged to prototype solutions to inform the design discussions as needed. The agreed upon solution is captured in the
RFC repo
.
Development
¶
As much as possible, the platform team leverages the
GitOps
principles to implement solutions that can be reviewed before they are deployed to any target environments.
Integration and Testing
¶
The Outshift platform provides integration and testing tools for two main categories of software: containerized applications and Infrastructure-as-Code (IaC).
For containerized applications, an automated build pipeline is configured against the application codebase that includes basic static analysis (e.g., linters and unit tests) and security scans (e.g., Corona and BlackDuck scans - provided by Cisco IT) that validate the application artifact (e.g., docker image). These artifacts are then deployed to a sequence of non-production environments (i.e.,
dev
,
staging
) to validate integration with external components (see
Release Stages
section below) before they are released into production environments.
For IaC (e.g., Terraform, Ansible, Packer, etc.), the platform team leverages dry-run modes (e.g.,
terraform plan
) and staged releases (see
Release Stages
section below) to test and validate code changes before they are rolled out to production environments.
Release Stages
¶
The platform propagates both application and IaC changes through a series of non-production environments (i.e.,
scratch
,
dev
, and
staging
), which are leveraged to progressively gain confidence of successful deployment to the production environment. The earlier stages (
scratch
,
dev
) provides a low-risk way to rapidly iterate on development changes; the subsequent phase (
staging
) provides environments that more closely resemeble the production environment and thus enables more comprehensive integration and testing. Appropriate observability signals (e.g., logs, metrics, alerts) are identified and implemented in these earlier stages to ensure that the system health can be monitored in production.
Maintenance
¶
Deployed solutions are monitored via the observability signals identified in the previous phases. Key signals are configured to directly notify the primary on-call engineer if the system becomes degraded or unavailble.
The
GitOps
workflow is followed to roll out any necessary changes to existing systems.
Production Control Changes
¶
CCF: CCC-04.02
Change control process
¶
When a change to a production system is needed, paltform team members will:
Track all work in
Jira
, including:
Defining the scope of the change.
Defining the definition of done for the change.
Defining the potential impacts to Services and SLA's.
Define the path to production for the change.
Utilize GitOps when ever possible, so that changes are recorded in code.
Minimize manual changes.
Test the change on an platform-only system, if possible and appropriate.
Discuss the change and the results with other members of the platform team, including at least one Technical Lead.
Apply the change to preproduction systems.
Apply the change to production systems.
The processes by which Venture teams deploy code and resources to the platform will be discussed and documented during the CSDL assessment and will be reviewed following the
CSDL review cycle
.
Production Systems Access
¶
Access to the various production systems is defined in
Production Systems Restrictions
.
Versions
¶
Sep 30 2024: v1.3 - Change ETI to Outshift
Feb 14 2023: v1.2 - Update CSDL (SCF -> CCF) - matunger
Feb 02 2023: v1.1 - Point to IAM for restrictions.
2024-09-30