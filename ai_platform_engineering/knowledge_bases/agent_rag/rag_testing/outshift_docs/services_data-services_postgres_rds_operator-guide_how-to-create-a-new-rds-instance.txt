create new aurora postgres rds
How to create an new Aurora Postgres RDS cluster
¶
SRE uses Terraform Infrastructure as Code to create the Postgres/Aurora cluster.
An Aurora cluster can be a global cluster (not single region), which is the recommended setup. This allows to failover to a secondary region in case of a regional outage.
There are two git code bases that work together to create the instance.
SRE Terraform Infrastructure Repository
Terraform Aurora Postgres Module
That former Terraform infrastructure repository is where the instantiation of the Aurora Postgres Module will occur. An updated list of parameters, and
instantiation example
is contained within the
examples
folder in the root module repository.
Creating the Cluster
¶
Create or Identify a VPC for the RDS instance to use.
If this is a new region in an existing account, or the first region in a new account, create a new VPC using these
Instructions
Create a path for the instance in the Terraform Infrastructure Repository:
<aws-account-name>/rds/<aws-region>/
Copy the
main.tf
file from the above module repository
examples
folder into the created path.
Update the
aurora-postgres.tf
file with the instance specific values specified in the
documentation
.
Add the Atlantis project name and path to the
atlantis.yaml
file at the root of
platform-terraform-infra
repository.
Create a Pull Request, and once approved run
atlantis apply
.
Reference
Atlantis user-guide
for additional details.
RDS Cluster Documentation
¶
Note
(As of August 2024 this is outdated, we would need to automate the below in order to add all RDS clusters to our documentation).
Create a
<cluster-name.md>
file in this path
services/infra-ops/active-resources/current-resources/aws/rds
of the
eti-platform-docs
repository.
Copy one of the other RDS instances as a template, and update the fields to reflect the newly created cluster.
Add a link to this document to the RDS index in
active-resources
Securing the RDS Cluster
¶
Note
(As of August 2024 this is outdated).
Postgresql by default allows access to the public user group. For shared instances this allows teams access to the schema and databases ot other teams. This is the process of removing that access.
Clone the
sre-utilities
repository.
Navigate to the
scripts/dbUtilities
within the repository.
Prepare the python environment for execution.
Have
python3
available and set as your default
python
Install the
sqlalchemy
python module installed.
Set the following environment variables from Keeper in your CLI:
export
DB_PASSWORD
=
<
maintenance
database
password
>
export
RDS_BASTION_IP
=
<
rds
bastion
IP
address>
export
RDS_BASTION_KEY_PATH
=
<
local
path
to
rds
bastion
bastion
private
key>
export
RDS_INSTANCE
=
<
read/write
RDS
endpoint
DNS
name>
Execute the script to secure the RDS instance.
python
dbSecure
.
py
2024-09-10