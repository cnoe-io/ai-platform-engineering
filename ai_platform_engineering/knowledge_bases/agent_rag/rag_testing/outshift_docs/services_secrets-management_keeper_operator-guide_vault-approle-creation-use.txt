approle
creation
vault
Creating and Using an Approle in Vault
¶
Purpose
¶
This document describes how resources in Vault are constructed, function, and interact to form an Approle and links to common Approle use cases.
Approle auth official doc
Required Resources
¶
Vault Resources
¶
Approle - auth method that allows authentication to Vault-defined roles
Approle policy - a document that defines what resources and actions on those resources are authorized
Approle role - a role within Vault attached to to the auth engine and defined by the policy
Role ID -  an identifier that selects the AppRole against which the other credentials are evaluated
Approle Secret ID
Approle creation
¶
Caution
All our infra is defined as code (IaC), Please don't create manually Approle, follow below steps to create one
The current agreed upon folder structure for Approles is:
namespaces
| __ eticloud
| __ apps
| __ <namespace/venture name>
| __ backend.tf/main.tf/provider.tf - namespace infra
| __ approles
| __ policies
| __ jenkins-policy.hcl/gha-policy.hcl - vault policies for the CI approles (should have access to namespace's secrets)
| __ backend.tf/main.tf/provider.tf - approle infra
Note
When creating approles for a brand new namespace, please make sure to create one
ci-jenkins-approle
and one
ci-gha-approle
. These will be used by the respective CI systems to access secrets in the namespace.
Create the approle auth backend
example
The approle auth backend is the engine that provides the framework for accessing particular secrets within Vault. It combines an approle role, approle policy, and approle role secret.
Create the approle policy.
example
The approle policy is the definition of what resources the approle can access and what actions it can take on those resources. The approle policy path(s) to resources in the namespace and allowed verbs for those resources.
!!! tip
       If you have active secrets engines (AWS/GCP/Azure) roles that you want to access via vault approles, make sure to add them to these policies.
example
Create an approle role.
example
The Approle Role Name links the role to the policy.
The Approle Role ID is the external reference to the Approle role and functions similarly to a username.
Create an Approle Secret ID.
example
The Approle Secret ID allows external access to the Approle and functions similarly to a password.
The Approle Role ID and Secret ID should be stored in Vault outside the path that the Approle Policy can access
example
Tip
Overall your approle terraform block should look like
this
, and your folder structure should look like
this
The Approle Role Name, Role ID, and Secret ID are be used  to create a Jenkins credential.
Note
If you are modifying/adding approles in our root namespace
eticloud
, you should follow the same pattern as the existing approles:
example
. This namespace is mostly used for
CI
related approles, but is not limited to it.
Approle Usage
¶
Jenkins
¶
We have started to migrate to the
Jenkins Vault Plugin
.
To be used by Jenkins in automation, a Jenkins credential must be created.
Jenkins Approle Flow Diagram
¶
Mermaid Code:
sequenceDiagram
    box teal JENKINS
    participant SRE
    participant jenkcred as Jenkins Credential
    participant jenkjob as Jenkins Job
    participant approle as Approle Role
    end
    box KEEPER
    participant Vault
    participant secrets as Secrets Engine
    end
    SRE->>jenkcred: Manually enter Role ID, Secret ID, and Path into a Jenkins credential
    jenkcred->>jenkjob: Jenkins credential is called inside a Jenkinsfile in a job.
    jenkjob->>Vault: Auth request to Vault with Approle
    Vault->>secrets: Get requested secrets from the Secrets Engine
    secrets-->>jenkjob: Secret values returned (hidden) to the Jenkins Job
Jenkins Resources
¶
Credentials
Approle name
Approle Role ID
Approle Secret ID
Jenkinsfile
Jenkins Credential Creation
¶
An approle's id and secret id are stored as a credential in a Jenkins credential
example
- The credentials are of Kind: `Vault App Role Credential`
- The credentials should be limited in scope to a particular folder in Jenkins.
- Role ID and Secret ID are stored in the key/value secret above.
- Path is defined in the Terraform (see step 3ii above)
- Namespace is the namespace in Vault.
- ID is the name by which the credential will be referenced in a Jenkinsfile.
Note
The naming convention for the Jenkins Approle Credentials is
<namespace name>-ci-jenkins-approle
.
For the generic SRE related approle (eticloud namespace)
ci-jenkins-approle
is used to access all the CI secrets/engines.
Approle Usage in Jenkins
¶
The most common use case for accessing Vault via Approle is to programatically access resources in Amazon Web Services (AWS) via an AWS Secrets Engine from Jenkins.  For more information, please see
Using an AWS Secrets Engine in Vault
. An example of this from our SRE Pipeline library:
def
ghcrLogin
()
{
def
rv
=
sreGlobals
()
def
configuration
=
[
vaultUrl:
rv
.
VAULT_ADDR
,
vaultCredentialId:
rv
.
JENKINS_APPROLE_CREDENTIALS
,
vaultNamespace:
rv
.
VAULT_NAMESPACE
,
engineVersion:
2
,
prefixPath:
'ci/'
]
def
secrets
=
[
[
path:
"jenkins/jenkins/jenkins-ghcr-token"
,
engineVersion:
2
,
secretValues:
[
[
envVar:
'GHCR_TOKEN'
,
vaultKey:
'token'
]
]
]
]
withVault
([
configuration:
configuration
,
vaultSecrets:
secrets
])
{
sh
'sh +x && echo ${GHCR_TOKEN} | docker login ghcr.io -u "eti-sre-cicd" --password-stdin'
}
}
Github Actions (GHA)
¶
Github Action Workflows are now using secrets from vault.
GHA Approle Flow Diagram
¶
Mermaid Code:
sequenceDiagram
    box rgb(100, 100, 100) GHA [Github Actions]
    participant SRE
    participant ghasec as GHA Org/Repo Secrets
    participant ghaw as GHA Workflow
    participant approle as Approle Role
    end
    box KEEPER
    participant Vault
    participant secrets as Secrets Engine
    end
    SRE->>ghasec: Manually add Role ID, Secret ID, and Path/Namespace into a GHA org and/or repo secrets
    ghasec->>ghaw: GHA secrets/vars are called in a GHA workflow job (vault-action)
    ghaw->>Vault: Auth request to Vault with Approle
    Vault->>secrets: Get requested secrets from the Secrets Engine
    secrets-->>ghaw: Secret values returned (hidden) to the GHA workflow Job
GHA Resources
¶
Credentials
Approle Role ID
Approle Secret ID
Workflow
GHA Credential Creation
¶
Right now, we store all GHA secrets in single vault secret under eticloud/apps/sre namespace. In order to access these vault secrets, we defined global github secrets under cisco-eti org, named:
VAULT_APPROLE_ROLE_ID
VAULT_APPROLE_SECRET_ID
Note
For new namespace approles, you will need to add new secrets for your approles as shown below
here
VAULT_<venture namespace>_ROLE_ID
VAULT_<venture namespace>_SECRET_ID
We have also defined GLOBAL variables:
KEEPER_URL
VAULT_NAMESPACE
VAULT_VENTURE_NAMESPACE - This is the venture defined namespace that we want to access secrets/secrets engines from. (by default: eticloud/apps/securecn)
VAULT_SECRET_PATH
Warning
The above
VAULT_VENTURE_NAMESPACE
variable is required if you are using the venture specific secrets engines/secrets and not the default one
eticloud
. By default this variable is set to
eticloud/apps/securecn
as a placeholder. If you are using this default namespace, you can leave it as is.
Tip
In order to override these values, we can define local secrets and variables (Repository level). This is especially useful when you need to access multiple namespace secrets in the same workflow.
Approle Usage in GHA
¶
In github workflows, we are using the
vault-action
.
Here is an example
2024-06-07