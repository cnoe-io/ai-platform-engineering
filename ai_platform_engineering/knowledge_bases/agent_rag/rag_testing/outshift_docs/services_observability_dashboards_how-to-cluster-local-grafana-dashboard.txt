cluster local dashboard
kps grafana dashboard
How to create cluster local grafana dashboard
¶
Cluster-local Grafana dashboards (that are
specific
to a given Kubernetes cluster) have access to metrics scraped by Prometheus on that local cluster.
Cluster-local Grafana dashboards can be found by going to the
Active Kubernetes Clusters
page and clicking on the
Observability link
.
Persisting cluster local grafana dashboards via helm
¶
Grafana Dashboards associated with a project/app are persisted in the
dashboards
folder of the project helm chart that requires visualization. If the dashboard is not associated with a particular project, it should be stored in the
dashboards-json
folder in the following locations.
cluster-local:
embedded-dashboard-in-chart
Dashboards are persisted by exporting the JSON representation of the dashboard see
Importing Dashboards
above. A Helm template within the repository will make the JSON file available to Grafana where the helm chart is installed.
An example of this helm template can be seen within the
platform-demo
application repository. This demo illustrates how a dashboard is associated with a project.
Pre-Commit Actions
¶
Dashboard associated with a project
¶
Add or update the dashboard JSON file in the dashboard folder.
Update the values.yaml for the project to specify the dashboard name, type and Grafana folder it should appear within.
dashboards:
  new-dashboard:
    labelValue: local
    folder: default
Update
Chart.yaml
with an updated chart version to produce a new helm chart artifact for CD deployment.
In Grafana
¶
Grafana uses a sidecar container to pickup dashboards that are included in a given Helm chart.
local dashboards
¶
Given the below
ConfigMap
resource:
-
apiVersion
:
v1
kind
:
ConfigMap
metadata
:
name
:
my-dashboard
namespace
:
my-namespace
labels
:
[
...
]
grafana_dashboard
:
"local"
annotations
:
grafana_folder
:
"/tmp/dashboards/applications"
data
:
# embedded grafana dashboard as json
{{
$dashboardName
}}
.json
:
{{
$.Files.Get $path | toJson
}}
The json file containing the dashboard itself should reference the local Prometheus as
datasource
, like so:
"datasource"
:
{
"type"
:
"prometheus"
,
"uid"
:
"prometheus"
},
See the
platform-demo
json file
for additional details.
All of the above will be picked up by the local instance of Grafana (running in a given cluster), accessible via
https://observability.<cluster>.<environment><.domain>
.
The
grafana_folder
annotation should match the folders defined in the
dashboardProviders
section
here
. In the case of a venture-owned application dashboard, it should be the
applications
folder.
The dashboard being picked up by Grafana can be visible in the aforementioned sidecar logs:
"msg": "Found a folder override annotation, placing the <my-dashboard> in: /tmp/dashboards/applications", "level": "INFO"}
2024-07-23