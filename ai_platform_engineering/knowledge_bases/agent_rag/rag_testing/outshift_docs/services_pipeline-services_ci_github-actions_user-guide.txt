ci examples
gha user guide
github actions examples
github actions user guide
how to setup github actions
outshift github actions user guide
Outshift Github Actions User Guide with examples
¶
This document guides users through setting up a new Github Actions CI/CD pipeline using
Outshift Standard Reusable Workflow
and
Outshift Required workflows
.
We will use
sre-go-helloworld
as a reference example
Please familiarize with Outshift Github Actions
Architecture
before proceeding.
Let's get started by creating a new CI/CD pipeline using Outshift required and reusable workflows
Outshift Standard Reusable Workflow
¶
Next we will setup reusable CI/CD pipeline using reusable workflow.
Outshift reusable workflow consists of several optional jobs that can be enabled or disabled based on input parameters. These jobs can be further customized based on the inputs to each job.
Tip
New reusable workflows can be added with collaboration with SRE team in
gh-reusable-workflows repo
Step 1: Create a workflow directory
¶
Create
.github/workflows
folder in your repository
Create workflow file.
Tip
SRE team recommends using
ci.yaml
in
.github/workflows
Step 2: Define trigger events
¶
The
on
section in the Github Actions workflow yaml defines the events that will trigger the workfow.
on
:
# Trigger this CI workflow on both push and pull to to 'main' branch
push
:
branches
:
-
'main'
pull_request
:
branches
:
-
'main'
Step 3: Define permissions
¶
Define the permissions the workflow and GITHUB_TOKEN have access to. Check out the example below:
# Grant read access for GITHUB_TOKEN on all jobs
permissions
:
id-token
:
write
# This is required for requesting the JWT
contents
:
read
# This is required for actions/checkout
packages
:
write
# needed to push docker image to gar or ecr
Job: Checkout & Unit-tests
¶
Invoke
checkout-unit-test
custom workflow as shown
here
checkout-unit-tests
:
steps
:
-
name
:
Checkout repository
uses
:
actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247
# v3.5.1
with
:
# The branch, tag or SHA to checkout, otherwise, uses the default branch.
ref
:
${{ github.ref }}
# Relative path under $GITHUB_WORKSPACE to place the repository
path
:
''
# Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
# Default: true
clean
:
true
# Whether to download Git-LFS files
# Default: false
lfs
:
''
# Whether to checkout submodules: `true` to checkout submodules or `recursive` to
# recursively checkout submodules.
# Default: false
submodules
:
''
-
name
:
Unit Tests
run
:
|
#chmod +x scripts/unit-test.sh
bash scripts/unit-test.sh
Job: Build & Publish Job
¶
Invoke
build-push-docker
reusable workflow, as shown
here
call-docker-build-push
:
name
:
Call Docker Build
needs
:
[
checkout-unit-tests
]
uses
:
cisco-eti/gh-reusable-workflows/.github/workflows/build-push-docker.yaml@main
secrets
:
# Only needed if with:ecr-enabled or with:gar-enabled is true below
vault-approle-role-id
:
${{ secrets.VAULT_APPROLE_ROLE_ID }}
vault-approle-secret-id
:
${{ secrets.VAULT_APPROLE_SECRET_ID }}
ghcr-username
:
${{ secrets.GHCR_USERNAME }}
ghcr-token
:
${{ secrets.GHCR_TOKEN }}
ghcr-org-token
:
${{ secrets.GHCR_TOKEN }}
with
:
### REQUIRED
### Docker image name
image-name
:
${{ github.event.repository.name }}
### path to where docker should copy files into image
### defaults to root of repository (.)
# context: .
### Dockerfile alternate name. Default is Dockerfile (relative to context path)
dockerfile
:
build/Dockerfile
### REQUIRED
### ENABLE ONE OR BOTH REGISTRIES
### tell docker where to push.
ecr-enabled
:
true
gar-enabled
:
true
gcr-enabled
:
false
ghcr-enabled
:
true
ghcr-org-registry
:
${{ vars.GHCR_REGISTRY }}
Override parameters are specified below:
    -
image-name
: this will default to the name of the repo
    -
dockerfile
: specify the path from root directory to the Dockerfile to use to package your application into a Docker image
    -
ecr-enabled
: set to
true
to push the build Docker image to AWS hosted container registry (ECR). Set to
false
to disable.
    -
gcr-enabled
: set to
true
to push the built Docker image to Google Cloud hosted container registry (GCR). Set to
false
to disable.
All default values are set
here
Global secrets and variables can be provided under your repository's
Settings -> Secrets and variables
configuration page, under the
Secrets
and
Variables
tab.
Note that all repositories in the
cisco-eti
org inherits some secrets and variables with default values configured at the organization level, as shown below:
These default values can be overridden by adding them as a repo-level secret or variable.
See
this GitHub doc on GHA Secrets
for more details.
See
this GitHub doc on GHA Variables
for more details.
Job: Corona & Blackduck
¶
Note
SRE team maintains corona/blackduck execution source code inside sre-pipeline-library repository to maintain a single source of truth for both Jenkins and Github Actions jobs
Setup corona & blackduck scan by invoking the reusable workflow as demostrated
here
Example job configuration:
¶
call-corona-blackduck-scan
:
name
:
Call Corona & Blackduck scan
needs
:
[
call-docker-build-push
]
uses
:
cisco-eti/gh-reusable-workflows/.github/workflows/corona-blackduck-scan.yaml@main
secrets
:
vault-approle-role-id
:
${{ secrets.VAULT_APPROLE_ROLE_ID }}
vault-approle-secret-id
:
${{ secrets.VAULT_APPROLE_SECRET_ID }}
# GHCR Login for docker build runner
ghcr-username
:
${{ secrets.GHCR_USERNAME }}
ghcr-token
:
${{ secrets.GHCR_TOKEN }}
# GHCR Login for docker scan
ghcr-org-username
:
${{ secrets.GHCR_USERNAME }}
ghcr-org-token
:
${{ secrets.GHCR_TOKEN }}
with
:
runner
:
${{ vars.UBUNTU_RUNNER }}
runner-docker-image
:
${{ vars.SRE_BUILD_IMAGE }}
# enable-corona: false
# enable-blackduck: false
corona-product-name
:
${{ vars.CORONA_PRODUCT_NAME }}
corona-product-id
:
${{ vars.CORONA_PRODUCT_ID }}
corona-release-id
:
${{ vars.CORONA_RELEASE_ID }}
corona-csdl-id
:
${{ vars.CORONA_CSDL_ID }}
corona-security-contact
:
${{ vars.CORONA_SECURITY_CONTACT }}
corona-engineering-contact
:
${{ vars.CORONA_ENGINEERING_CONTACT }}
corona-image-admins
:
${{ vars.CORONA_IMAGE_ADMINS }}
ghcr-org-registry
:
${{ vars.GHCR_REGISTRY }}
# optional
#image-name: ""
#image-tag: ""
Corona Required variables:
Add the following required environments variables to the target repository variable
CORONA_PRODUCT_NAME
CORONA_CSDL_ID
CORONA_PRODUCT_ID
CORONA_RELEASE_ID
CORONA_ENGINEERING_CONTACT
CORONA_IMAGE_ADMINS
CORONA_SECURITY_CONTACT
Below an example:
CORONA_ENGINEERING_CONTACT
and
CORONA_SECURITY_CONTACT
may have the same values. These values should not include '
@cisco
.com'.
Right now, many projects are part of panoptica, so we are using panoptica CSDL id (CORONA_CSDL_ID:153767)
Below list of corona projects
CORONA_PRODUCT_NAME
CORONA_PRODUCT_ID
CORONA_ENGINEERING_CONTACT
Panoptica CNAPP CWPP
6743
cnapp-cwpp-corona-notifications@cisco.com
Panoptica CNAPP Dragonfly
13881
cnapp-dragonfly-corona-notifications@cisco.com
Panoptica CNAPP Rosey
13880
cnapp-rosey-corona-notifications@cisco.com
Panoptica CNAPP Cybear
13870
cnapp-cybear-corona-notifications@cisco.com
Panoptica CNAPP Datasec
13883
cnapp-datasec-corona-notifications@cisco.com
Panoptica CNAPP Code & Build
13884
cnapp-code-build-corona-notifications@cisco.com
Panoptica CNAPP (Lightspin)
13200
cnapp-lightspin-corona-notifications@cisco.com
SRE Platform Apps
13109
sre-platform-apps-corona-notifications@cisco.com
CNAPP-APISEC
13146
cnapp-apisec-corona-notifications@cisco.com
In order to get CORONA_RELEASE_ID, please:
Go to
corona products dashbaord
Then select your product
Choose the release where you want to push your corona images.
CORONA_RELEASE_ID will be shown on the URL after you click on the desired release.
Create new Corona Product:
If you want to create new corona product, please follow below steps:
First, you need to create mailer list for your team, please ask SRE team to create it for you, and be sure you have provided them with all team members CEC ids on your request. Mailer list may take one day to be available.
(pattern to follow on mailer list creation:
cnapp-VENTURE_NAME-corona-notifications@cisco.com
)
Second, you should
Login to Corona UI
https://corona.cisco.com/
click on "Create Product" button
Provide product name, please follow naming convention "Panoptica CNAPP VENTURE_NAME and select "New Product" on PSIRT field
Add mailer list on engineering & security contact fields
Add CSDL id
finally, click on "Save" button
Once you created the product, it will be added
here
.
CORONA_PRODUCT_ID will be shown on the URL after selecting your product.
Create new Corona Release:
To create new release, select your product and click on "create release" button following semver pattern (example 1.0.0).
Disable Corona & Blackduck scan:
If for some reasons, you want to disable temporarly both corona or blackduck scans you can override below vars while calling scan workflow:
enable-corona: false
enable-blackduck: false
Move Corona scan report from one product to another:
There is no mechanism to move a Release from one Product to another.
The options here would be to recreate the Images under the new Release or create Component Groups under the new Release and associate the previous Images as Reusable Modules.
Full documentation here
Below steps to follow to link scan report between multiple corona products:
Select corona product
Choose your release
Under the selected release, click on "Create Image", specify the image name, security & engineering contacts, CSDL id and keep "Associated File(s) for Image" section empty, as shown below
4. Click on the created image, and the right side click on "Reports" button and select "Image BOM Report"
5. Click on "Actions" button and selcet "Add reusable Module"
6. Enter image name that you want to link with the new image
7. Click on "create" button to confirm
8. Check on the "Relantionships" section, that the image has been linked and
9. verify if you can see all scan reports on details of the new created image
Job: Helm Package and Publish
¶
Helm charts can be packaged and published using
helm-publish reusable workflow
Outshift Required Worklow
¶
Outshift standard required workflow includes Inclusive Language Lint, Sonarqube Scan.
Note
More required jobs will be added in future
Contact SRE team to add your repository to required workflow's target repositories
Sonarqube Scan (required workflow is disabled right now)
¶
Prerequisites
¶
Sonar project key must be created on
Cloud SonarQube
Usage
¶
SonarQube scan required configuration: you should define sonar-project.properties file under build folder (default path defined as global variable on orga level), if you want to use another path, please override the default one by defining a local repository variable named SONAR_PROPERTIES_FILE and has as value path to sonar-project.properties file.
Below example of sonar-project.properties file:
# Required metadata
sonar.projectKey=sre-docker-test
sonar.projectName=SRE Docker test
sonar.projectVersion=1.1
# Comma-separated paths to directories with sources (required)
sonar.sources=./pkg
# Language
sonar.language=go
# Encoding of the source files
sonar.sourceEncoding=UTF-8
sonar.tests=.
sonar.test.inclusions=**/*_test.go
sonar.test.exclusions=**/vendor/**
sonar.go.coverage.reportPaths=./coverage.out
Example workflow with reusable workflow (recommended):
¶
name
:
SonarQube scan
on
:
workflow_dispatch
:
push
:
branches
:
-
'main'
pull_request
:
branches
:
-
'main'
jobs
:
call-sonar-scan
:
name
:
SonarQube scan
uses
:
cisco-eti/gh-reusable-workflows/.github/workflows/sonar-scan.yaml@main
with
:
sonar-properties-file
:
"./sonar-project.properties"
secrets
:
vault-approle-role-id
:
${{ secrets.VAULT_APPROLE_ROLE_ID }}
vault-approle-secret-id
:
${{ secrets.VAULT_APPROLE_SECRET_ID }}
ghcr-username
:
${{ secrets.GHCR_USERNAME }}
ghcr-token
:
${{ secrets.GHCR_TOKEN }}
Example job configuration with reusable action:
¶
name
:
SonarQube scan
on
:
push
:
branches
:
-
'main'
pull_request
:
branches
:
-
'main'
jobs
:
sonar-scan
:
name
:
SonarQube Scan
runs-on
:
group
:
SRE-Large-Runners
container
:
image
:
${{ vars.SONAR_SCANNER_CLI_DOCKER_IMAGE }}
credentials
:
username
:
${{ secrets.GHCR_USERNAME }}
password
:
${{ secrets.GHCR_TOKEN }}
steps
:
-
name
:
Checkout repository
uses
:
actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247
# v3.5.1
with
:
ref
:
${{ github.ref }}
path
:
''
clean
:
true
lfs
:
''
submodules
:
''
-
uses
:
cisco-eti/gh-reusable-workflows/.github/actions/sonarqube@main
with
:
sonar-properties-file
:
"./build/sonar-project.properties"
keeper-url
:
${{ vars.KEEPER_URL }}
vault-namespace
:
${{ vars.VAULT_NAMESPACE }}
vault-secret-path
:
${{ vars.VAULT_SECRET_PATH }}
vault-approle-role-id
:
${{ secrets.VAULT_APPROLE_ROLE_ID }}
vault-approle-secret-id
:
${{ secrets.VAULT_APPROLE_SECRET_ID }}
2024-10-13