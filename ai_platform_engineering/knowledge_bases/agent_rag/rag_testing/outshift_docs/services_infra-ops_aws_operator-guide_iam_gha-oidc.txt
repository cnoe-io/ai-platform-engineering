AWS
GHA
Github Actions
IAM
Infrastructure as Code
OIDC
GHA OIDC Provider
¶
Purpose
¶
In order to authenticate GHA (Github Actions) workflows with AWS, we need to setup an OIDC provider in AWS. This will allow us to use the AWS IAM role that we created for GHA to authenticate/assume role with AWS. This is a similar flow as the Vault Approle + AWS Secrets Engine that we use for our Terraform workspaces (mentioned
here
)
Prerequisites
¶
You must know what role policies/permissions you want to create for the new GHA IAM Role.
You have created a Vault Approle for your venture's namespace (for GHA). For more information on how to do this, please see the
Create Vault Approle
section of our platform docs.
You should have a good understanding of how to use Terraform. For more information on how to use Terraform, please see the
Terraform
section of our platform docs.
You should have a good understanding of how to use Atlantis. For more information on how to use Atlantis, please see the
Atlantis
section of our platform docs.
You should have have a setup of the AWS account you want to create the IRSA in. For more information on how to do this, please see the
AWS Account Creation
section of our platform docs.
Creating the OIDC Provider with Terraform
¶
First you will need to add a new OIDC provider
aws_iam_openid_connect_provider
resource for GHA in your terraform file as such:
EXAMPLE:
https://wwwin-github.cisco.com/eti/sre-tf-infra/blob/main/aws-apisec-dev/iam/roles/gha-s3-bucket-role.tf#L2
Next you will need to add the
assume_role_policy
document which will be used by the new AWS IAM GHA role you create. This document will be used to allow the GHA role to assume the role that you will create for it later on. You can do this by adding the following to your terraform file:
EXAMPLE:
https://wwwin-github.cisco.com/eti/sre-tf-infra/blob/main/aws-apisec-dev/iam/roles/gha-s3-bucket-role.tf#L11
Next you will need to add the AWS IAM Role for GHA to assume (together with the policies/permissions needed for it). You can do this by adding the following to your terraform file:
EXAMPLE:
https://wwwin-github.cisco.com/eti/sre-tf-infra/blob/main/aws-apisec-dev/iam/roles/gha-s3-bucket-role.tf#L48
The finished Terraform file should look something like this:
GHA S3 Bucket Role Example
Lastly make sure to add the new Terraform file/directory path to your Atlantis workflow, and run the workflow (using a PR) to create the IAM role(s).
This should be done in the following file:
atlantis.yaml
There is a section for it in the file labeled
# IAM Roles
EXAMPLE:
-
name
:
aws-apisec-dev-roles
dir
:
aws-apisec-dev/iam/roles
workflow
:
standard
terraform_version
:
v1.5.2
After running this Terraform with Atlantis. You will see that the Terraform will also create a new secret in the venture's vault namespace as such:
secret/aws_roles/<AWS Account name>/<GHA Role name>
. You will reference this secret in your GHA workflow later on.
For this you will also need to make sure you have created the appropriate GHA Approle for Vault. More information on how to do this can be found
here
Usage in the GHA Workflow
¶
After the successful creation of the above OIDC provider and AWS IAM role, you will need to use the following in your GHA workflow to authenticate with AWS:
# Using the Approle strategy, grab the AWS gha-update-iam-role for authentication
-
name
:
Get AWS Role ARN
if
:
${{ inputs.aws }}
uses
:
hashicorp/vault-action@v2.7.4
with
:
url
:
${{ vars.KEEPER_URL }}
method
:
approle
roleId
:
${{ secrets.VAULT_APISEC_APPROLE_ROLE_ID }}
secretId
:
${{ secrets.VAULT_APISEC_APPROLE_SECRET_ID }}
namespace
:
${{ vars.VAULT_VENTURE_NAMESPACE }}
secrets
:
|
secret/data/aws_roles/${{ inputs.aws-account-name }}/gha_update_iam_role  role_arn | AWS_ROLE_ARN
# Authenticate to AWS using the role ARN
-
name
:
Configure AWS Credentials - Vault Creds
if
:
${{ inputs.aws }}
uses
:
aws-actions/configure-aws-credentials@v4
with
:
role-to-assume
:
${{ env.AWS_ROLE_ARN }}
aws-region
:
${{ inputs.region }}
-
name
:
Display AWS Identity
run
:
aws sts get-caller-identity
Note
The above example workflow steps use the secrets/variables from the repo and/or org GHA secrets/variables. Org secrets/variables can always be overridden if assigned on the repo scope.
2024-06-07