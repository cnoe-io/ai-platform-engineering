appdynamics traces
observability traces
traces
Tracing User Guide
¶
Each cluster has dedicated OpenTelemetry collectors which forward incoming traces to AppDynamics. To work with AppDynamics traces, use OpenTelemetry SDK to submit traces and spans.
Configure your code to submit OTLP traces and spans to the cluster-local AppDynamics Collector endpoint
http://appdynamics-otel-collector-service.appdynamics:4317
Example Python code snippet
¶
import
time
from
opentelemetry
import
trace
from
opentelemetry.sdk.resources
import
SERVICE_NAME
,
Resource
from
opentelemetry.sdk.trace
import
TracerProvider
from
opentelemetry.sdk.trace.export
import
BatchSpanProcessor
from
opentelemetry.exporter.otlp.proto.grpc.trace_exporter
import
OTLPSpanExporter
OTLP_ENDPOINT
=
"http://appdynamics-otel-collector-service.appdynamics:4317/"
# Replace with your OpenTelemetry Collector endpoint
resource
=
Resource
(
attributes
=
{
SERVICE_NAME
:
"5-seconds-trace"
})
# Create a TracerProvider with an OTLP SpanExporter
tracer_provider
=
TracerProvider
(
resource
=
resource
)
otlp_exporter
=
OTLPSpanExporter
(
endpoint
=
OTLP_ENDPOINT
)
span_processor
=
BatchSpanProcessor
(
otlp_exporter
)
tracer_provider
.
add_span_processor
(
span_processor
)
trace
.
set_tracer_provider
(
tracer_provider
)
# Get a tracer
tracer
=
trace
.
get_tracer
(
__name__
)
# Define a function to simulate work
def
simulate_work
(
duration
):
time
.
sleep
(
duration
)
# Main loop
while
True
:
# Start a new "parent" span for each 5-second batch
batch_timestamp
=
time
.
time
()
with
tracer
.
start_as_current_span
(
"parent_span"
,
attributes
=
{
"batch_timestamp"
:
batch_timestamp
}):
print
(
f
"New parent span started at
{
batch_timestamp
}
!"
)
# Create a "child" span every second within the 5-second interval
for
i
in
range
(
5
):
second_timestamp
=
time
.
time
()
with
tracer
.
start_as_current_span
(
"child_span"
,
attributes
=
{
"second_timestamp"
:
second_timestamp
}):
print
(
f
"Child span within parent span at
{
second_timestamp
}
!"
)
# Simulate some work
simulate_work
(
1
)
# Simulate additional work outside the "child" spans
simulate_work
(
1
)
# Sleep for 5 seconds before starting a new "parent" span
time
.
sleep
(
5
)
# Gracefully shut down the exporter (this will not be reached in an infinite loop)
span_processor
.
shutdown
()
2024-07-22