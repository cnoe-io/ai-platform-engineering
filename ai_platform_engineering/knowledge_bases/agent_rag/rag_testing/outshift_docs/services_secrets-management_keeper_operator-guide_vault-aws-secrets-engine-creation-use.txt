vault aws secrets engine
Creating and using an AWS Secrets Engine in Vault
¶
Purpose
¶
This document describes the resources required for the creation of an AWS Secrets Engine (AWSSE), the functions and relationships of those resources, and the most common use cases for an AWSSE.
Required Resources
¶
Note that the resources described below are the primary actors in AWSSE usage, but are not the only resources required in AWS to make the actors function. The example links below point to files which have the complete codified definitions of both the actors and functional resources.
Vault Resources
¶
AWS Secrets Engine
Backend role(s)
AWS Resources
¶
IAM User
IAM Role(s)
IAM Policies
Creating an AWS Secrets Engine
¶
Creating AWS Resources
¶
An AWS Secrets Engine in Vault is dependent on AWS IAM resources. We create the AWS resources via Terraform in the
platform-terraform-infra
.
The current agreed upon folder structure for Secrets Engines is:
namespaces
| __ eticloud
| __ apps
| __ <namespace/venture name>
| __ backend.tf/main.tf/provider.tf - namespace infra
| __ approles
| __ secrets-engines
|__ <Cloud Provider>
| __ <Cloud Account/Project name>
| __ backend.tf/iam.tf/main.tf/provider.tf - secret engine's approle/IAM role binding infra
AWS IAM Policies
¶
A minimum of two IAM polices need to be created. The first, for the IAM User, only allows the user to assume an IAM Role or Roles. The second, for the IAM Role(s), define(s) what resources the Role(s) can access and actions the Role(s) can perform on those resources.
IAM User policy
IAM Role policy
AWS IAM Role
¶
A minimum of one IAM Role must be created. The IAM role has a trust relationship is the IAM user and its access is defined by the IAM policy.
Example
AWS IAM User
¶
The AWS IAM user:
    - Is created specifically for the secrets engine.
    - Can only assume roles that are defined in the attached user policy.
The secret key and secret access key are created, but not stored in Keeper. They are directly injected into the required Vault AWS secrets engine.
example 1
example 2
Creating Vault Resources
¶
Create the Secrets Engine in the namespace.
example
The Secrets Engine uses the IAM User credentials above.
Create the backend role.
example
The backend role determines the type of credential granted (assumed role) and specifies what that assumed role in AWS is.
Using an AWS Secrets Engine
¶
Using an AWS Secrets Engine in Vault allows programmatic access to AWS resources using short lived access keys.
AWS Secrets Engine Usage in Jenkins via Approles
¶
We have started to migrate to the
Jenkins Vault Plugin
.
The flow for using an AWS Secrets Engine in Jenkins is:
Mermaid Code:
sequenceDiagram
    box teal JENKINS
    participant SRE
    participant jenkcred as Jenkins Credential
    participant jenkjob as Jenkins Job
    participant approle as Approle Role
    end
    box KEEPER
    participant Vault
    participant awsse as AWS Secrets Engine
    participant awsser as AWS Secrets Engine Role
    end
    box rgb(255, 35, 0) AWS
    participant AWS
    end
    SRE->>jenkcred: Manually enter Role ID, Secret ID, and Path into a Jenkins credential
    jenkcred->>jenkjob: Jenkins credential is called inside a Jenkinsfile in a job.
    jenkjob->>Vault: Auth request to Vault with Approle
    Vault->>awsse: Credentials  request (AWS Key, Secret, and Token) from Secrets Engine
    awsse->>awsser: Credentials limited in scope by Secrets Engine Role
    awsser-->>awsse: Role Creds passed back to Secrets Engine
    awsse-->>jenkjob: Credentials returned to Jenkins job
    jenkjob->>AWS: Jenkins job accesses AWS resources
To access an AWS secrets engine, you can use the below as a template with the correct paramaters. You can set the
vaultParams
at the
step
,
stage
, or
globalParams
level.
This example is for the
step
.
stage
(
'Test'
)
{
steps
{
script
{
def
params
=
[
VAULT_ADDR:
"https://keeper.cisco.com"
,
awsLoginVaultNamespace:
"eticloud/apps/synthetica"
,
awsVaultEnv:
"ci-aws-synthetica-dev"
,
accountId:
"191231490015"
,
vaultrolename:
"ci-vault-role"
,
jenkinsApproleCredsId:
"synthetica-ci-jenkins-approle"
]
sreAWS
.
awsLogin
(
params
,
"ci-ecr-access"
)
{
sh
(
script:
'''#!/bin/bash
set -x
aws ecr describe-repositories
'''
)
}
}
// script
}
}
AWS Secrets Engine Usage in GHA (Github Actions)
¶
TBD
2024-06-07