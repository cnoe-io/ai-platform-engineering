Migrating Repos from GHES to GHEC
¶
This document outlines the process for migrating a repository from
wwwin-github.cisco.com
(GHES) to
github.com
(GHEC).
Table of Contents
¶
Migration Script
Prerequisites
Usage
How it Works
Migration Script
¶
For convenience, a script which will perform the migration process is located
here
.
Prerequisites
¶
gh
utility is installed
A local copy of
the script
Copy and save locally
(Recommended)
Clone the
repo
locally and run from inside the scripts->github folder path
(Optional)
A local copy of the branch cleanup/deletion
script
Once the
gh
utility is installed, you must log into our GHEC instance with it.
To log into our GHEC instance, run this:
gh
auth
login
--hostname
github.com
To check if you are logged in, run this:
gh
auth
status
This command will return a list of servers you are logged in to, if any. Its output should appear similar to this:
$
gh
auth
status
github.com
â
Logged
in
to
github.com
as
kburzins
(
oauth_token
)
â
Git
operations
for
github.com
configured
to
use
https
protocol.
â
Token:
*******************
wwwin-github.cisco.com
â
Logged
in
to
wwwin-github.cisco.com
as
kburzins
(
oauth_token
)
â
Git
operations
for
wwwin-github.cisco.com
configured
to
use
https
protocol.
â
Token:
*******************
In particular, if
github.com
appears in the list, then you are logged into GHEC; in any other case, you'll need to log into
github.com
as shown above before you can use the script to migrate any repos.
Usage
¶
The migration script should be run on your local machine and it requires only one argument: the name of the repo to be migrated.
As an example, given the repo
https://wwwin-github.cisco.com/eti/sre-utilities
located on our
wwwin-github.cisco.com
(GHES) instance, the command to migrate would be:
./ghec-migrate.sh
sre-utilities
Follow the script instructions as shown bellow:
**
Take note of the branch names
Enter the
default branch
for the repo and press enter:
(Optional)
Assign a team to the repo and select a role assignment for it:
(Optional)
Delete stale/old branches from the migrated repo
Once the repo is cloned locally into a folder (the one migrated earlier)
you will get an option to chose the
since
date/revision
Upon selection you will receive a list of the relevant branches,
which you may then chose to delete
How it Works
¶
In short, the migration script will:
Create a new repository in GHEC with a name matching that of the repository provided
(unless one already exists in which case you will be notified and this step is skipped)
Preform a "bare" clone of the (original) repository provided
Push, using the
--mirror
parameter, the repository cloned in the previous step up to the newly-created instance of the repository created in the first step
Ask for clients input for which
default branch
should be configured, then using the gh API set that to the
default branch
in the repo settings
(Optional)
Add a
previously created team
to the repo and assign the chosen permission role for that team
(Optional)
Delete stale/old branches in the migrated repo
A more detailed explanation can be found
here
.
NOTE:
This process captures
everything
in the repo as it exists on the GitHub instance -- all branches, tags, etc. will be included.
Therefore be aware when setting up the new
Jenkins pipeline
. The initial scan of your repository may trigger an overflow of builds which may
bottleneck
the queue.
2022-11-06