Kubernetes Cluster Migration
¶
This document describes steps needed to migrate an application deployed via ArgoCD from one k8s cluster to another with zero down-time to end-users.
Overview
Pre-requisite Checklist
Migration Steps
Step 1: Create/Update the "b" deployment configuration files
Step 2: Validate the "b" deployment via the app's internal endpoint
Step 3: Update DNS to point "front door" url at the "b" deployment
Step 4: Delete the "a" deployment configuration
Overview
¶
The following are the high-level steps you must take to migrate an application to another target K8s cluster:
Create/update the "b" deployment configuration files in
sre-cluster-config
and
<app>-deployment
repos.
Validate the "b" deployment via the app's internal "-b" endpoint
Update DNS so that the "front door" url points at the "b" deployment's ELB
Delete the "a" deployment configuration
Pre-requisite Checklist
¶
Before proceeding with migrating an application, ensure that the following requirements have been met:
Application is up and healthy in the current target cluster and most recent deployment was successful
Note the front-door url used to access the application by end-users
New target cluster has been created and provisioned with all the required Shared Services
Application helm chart has been updated to migrate away from the
deprecated
networking.k8s.io/v1beta1
API version to use
networking.k8s.io/v1
instead.
See these PR's for an example of this Ingress update:
Ingress template update
Ingress overlay values update
Ensure that this app is
not
fronted by CloudFront.
Not sure? Check whether the front-door url for the app is an alias A record pointed at a CloudFront domain.
For example,
staging-eti.eticloud.io
is
fronted by CloudFront:
âââ If the application
is
fronted by CloudFront,
follow
these steps
instead
.
Do NOT continue on with the following of the steps!
Migration Steps
¶
Step 1: Create/Update the "b" deployment configuration files
¶
In
sre-cluster-config
, specify the migration target cluster as the "b" deployment target.
Example PR for migrating smm-docs to
eks-dev-1
In the application's
deployment
repo, specify the Helm Chart and desired overlay values for the "b" deployment
In general, the following changes are necessary:
Chart.yaml:
version
and
dependencies.version
should point at appropriate Helm Chart version
in general
, this should either be the same as in
a
deployment, OR latest version in app repo, if updates were necessary for the migration (e.g. for Ingress API version update)
repository
should point at
https://chartmuseum.prod.eticloud.io
values.yaml:
deploymentEnv
should be set to
b
ingress
block should be updated for api version
networking.k8s.io/v1
Example PR in
smm-docs-deployment
In ArgoCD, make sure that the ArgoCD
Project
that the application is linked to has been updated to include the migration target K8s cluster. To do that:
In ArgoCD ui, navigate to
Setting
,
Projects
then to
your_project
.
Go to
Destinations
section,
Edit
and add the new cluster with correct namespace.
Once the above changes have been merged, refresh and sync the application in ArgoCD. ArgoCD should automatically deploy another "b" instance of the app to the new target Cluster
Troubleshooting
: If ArgoCD does not respond to the merged changes (wait a few minutes for ArgoCD to sync),
check the ArgoCD Applicationset Controller logs
Step 2: Validate the "b" deployment via the app's internal endpoint
¶
Create a new DNS record for the
b
deployment in Route53 to verify the "b" deployment application has been successfully deployed.
Get the requisite details for creating the
b
deployment DNS record:
Set your kubectl context to the new target k8s cluster where the
b
deployment has been deployed
Run
kubectl get ingress -n <NAMESPACE_OF_THE_DEPLOYED_APP>
to retrieve the endpoints (under
HOSTS
) and the Ingress address (e.g., the AWS ELB address) for those urls (under
ADDRESS
). Note this Ingress address; you will need it later.
For example, the following output shows that the Ingress address is
a449468a16320436680dd7c79ab1c2b3-1463561607.us-east-2.elb.amazonaws.com
:
$ kubectl get ingress -n appnet-sdm-docs-dev-blue
NAME                                 CLASS            HOSTS                                                                                                ADDRESS                                                                   PORTS     AGE
blue-b-appnet-sdm-docs-dev-argoapp   nginx-internal   sdm-docs-blue.int.dev.eticloud.io,sdm-docs-blue-b.int.dev.eticloud.io,sdm-docs.int.dev.eticloud.io   a449468a16320436680dd7c79ab1c2b3-1463561607.us-east-2.elb.amazonaws.com   80, 443   22h
Log into the
eticloud
AWS console and select the
Route53
service
Under
Hosted zones
, search for the domain your application is deployed with, and click on it (e.g.,
dev.eticloud.io
)
Click on the
Create record
button on the right
Populate the fields for the
b
deployment internal endpoint:
Record name
: the
-b
endpoint for your app
Record type
:
A
Alias
: enabled
Alias to Application and Cloud Load Balancer
Region
: the region of the k8s cluster
ELB address
: use the Ingress address from the previous steps.
Click on
Create records
Verify that the application has been successfully deployed to the
b
target cluster by navigating to the internal
-b
url.
âââ
Important
: Make sure that the
b
deployment is up-to-date with any recent changes the developer may have pushed to the
a
deployment:
application version (e.g.,
tagversion
value) matches the latest version set for the
a
deployment
helm chart version is the same or newer than the version deployed in
a
config overlay values are in sync with those defined in
a
(i.e., there are no missing config values)
Step 3: Update DNS to point "front door" url at the "b" deployment
¶
In Route53, create/update an Alias A record that points the application's "front-door" url to the "b" deployment's target cluster's ELB instance.
âââ
Important
: Do not skip this step! Make sure that the
front-door
url (
not
the internal "b" deployment url you validated in Step 2) has an explicit alias A DNS record that points to the validated
b
deployment. This must be done
before
you delete the
a
deployment in Step 4.
In the application's
deployment
repo, update the
Jenkinsfile
to add a
b
deployment target block.
For example, the following was added for
smm-docs
:
deployParams = [
...
dev: [
blue: [
a: [...],
b: [
argocdAppName: "blue-b-appnet-smm-docs-dev-argoapp",
deployedURL: "https://smm-docs-blue-b.int.dev.eticloud.io/"
]
...
]
...
Rebuild the most recent deploy job in Jenkins to verify that subsequent deployments are succeeding.
Step 4: Delete the "a" deployment configuration
¶
In
sre-cluster-config
, delete the
<deployment_color>-a
deployment directory
Example PR for smm-docs
In the application's
deployment
repo:
delete the "a" deployment directory
Example PR for smm-docs
update
Jenkinsfile
to remove the "a" deployment block
Example PR for smm-docs
Refresh and sync the app in ArgoCD and verify that it deletes the "a" deployment instance
2022-12-13