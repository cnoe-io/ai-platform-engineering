Investigate K8s 1.26 SLIs feature
¶
Context
¶
Kubernetes v1.26 released
Kubernetes Component SLI Metrics
as an alpha feature. This feature instruments kubernetes components (apiserver, kubelet, scheduler, controller-manager, kube-proxy) to report their health status in a consistent format as prometheus metrics. This feature can be enabled via the
ComponentSLIs
feature gate for each desired k8s component.
References:
*
Official Kubernetes Component SLI Metrics Reference
*
KEP-3466: Kubernetes Component SLIs
Investigation
¶
The goal of this investigation is to understand the how and why k8s component SLIs were implemented and to compare those decisions with those that were made for ETI SLI metrics for any additional insights and/or validation and potential leverage. Specifically, we wanted to understand:
Are there any additional insights we should incorporate into our current SLI implementation?
a. Why are these k8s component SLI metrics exposed via a separate
metrics/slis
endpoint rather than with existing
metrics/
endpoint?
b. Why are both gauge and counter metrics created?
How can/should we leverage these new metrics for our own SLI efforts?
1a: Why a separate
metrics/slis
endpoint?
¶
The original enhancement proposal doc,
KEP-3466: Kubernetes Component SLIs
, provides the following reasons for adding a new endpoint for SLI metrics:
Exposing SLI metrics in a separate endpoint ensures that this new feature is completely optional and can easily be turned on/off without impacting existing metrics.
Enable scraping SLI metrics at a
higher frequency interval
(i.e. increase granularity). Having a separate metrics path/target would enable configuring prometheus to scrape
just
the SLI metrics at a higher frequency than the default interval.
1b: Why are both gauge and counter metrics created?
¶
The
Design Details
section explains how the counter can be used to detect "staleness" of the health status reported by the gauge (e.g., if the kubelet is "stuck", the counter will stop incrementing).
2: How can/should we leverage these new metrics for our own SLI efforts?
¶
Since these metrics pertain specifically to the health status of native kubernetes components, there is little impact to efforts around ongoing efforts to instrument applications and third-party components.
Conclusion
¶
The
Kubernetes Component SLI Metrics
feature creates standardized health metrics for basic k8s components, and we should try enabling it and capturing these metrics in the Plathform Health dashboard to provide additional datapoints for the overall health of the k8s cluster.
We may also want to consider recommending application teams to expose their SLI metrics via a separate metrics endpoint to isolate them from other operational metrics that may or may not be scraped at a different interval. However, it is not a critical nor mandatory requirement.
2023-08-25