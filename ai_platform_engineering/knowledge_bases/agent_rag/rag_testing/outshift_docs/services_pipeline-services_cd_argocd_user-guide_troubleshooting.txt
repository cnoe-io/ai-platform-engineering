Troubleshooting ArgoCD
¶
Due to the many moving parts involved in the end-to-end application deployment pipeline
(the application Helm Chart in the app repo, overlay values and repo structure in the deployment repo,
available versions of the artifact in ECR/Chart museum, target environment info in sre-cluster-config repo, etc.),
it can be tricky to identify why ArgoCD is failing to deploy an application as expected.
This document covers some common scenarios and tips for troubleshooting them.
Applicationset Fails to Create the Application
Typo In Referenced URL
Missing Key in sre-cluster-config Creates Invalid Application Manifest
Applicationset Fails to Create the Application
¶
One of the trickiest things to troubleshoot with ArgoCD is when the ApplicationSet resource seems to ignore the application it is supposed to generate, because it does not show any errors in the ArgoCD UI. Often times, the root cause here is a typo somewhere that creates a mismatch with permitted namespaces or specific configuration paths (e.g., the directory structure in the deployment repo). Such typos are difficult to spot manually, but the
argocd-applicationset-controller
logs can point you to the right direction.
The steps below describe how to tail those logs:
Set your kubectl context for
eti-gitops-1
, where ArgoCD is deployed, as described
here
Run
kubectl get pods -n argocd
to get the full name of the
argocd-applicationset-controller
pod (it will look like
argocd-applicationset-controller-<UUID>
)
Run
kubectl logs argocd-applicationset-controller-<UUID> -n argocd -f | grep <NAME_OF_YOUR_APP>
to tail and filter the logs for errors relevant to your application.
    Example:
kubectl logs argocd-applicationset-controller-5c5846c99c-27n6l -n argocd -f | grep nodejs
See the following sections for real examples of troubleshooting with
argocd-applicationset-controller
logs
Typo In Referenced URL
¶
time="2021-12-01T14:59:37Z" level=error msg="error occurred during application generation: application spec is invalid: InvalidSpecError: application repo https://wwwin-github.cisco.com/eti/sre-helloworld-nodejs-deployment is not permitted in project 'helloworld-nodejs.dev'"
time="2021-12-01T14:59:38Z" level=info msg="git ls-files --full-name -z -- ventures/helloworld-nodejs/blue/config.json" dir=/tmp/https___wwwin-github.cisco.com_eti_sre-cluster-configs execID=ThCdV
The above logs indicate that the helloworld-nodejs app is failing to deploy due to a mismatch between the real deployment repo url and the url specified in the ArgoCD project configuration (in this case, the order of
nodejs
and
helloworld
had been
flipped
).
Missing Key in sre-cluster-config Creates Invalid Application Manifest
¶
2021-12-01T18:27:41.353Z    ERROR   controller-runtime.manager.controller.applicationset    Reconciler error    {"reconciler group": "argoproj.io", "reconciler kind": "ApplicationSet", "name": "helloworld-nodejs-dev-appset", "namespace": "argocd", "error": "Application.argoproj.io \"{{ deploymentColor }}-a-helloworld-nodejs-dev-argoapp\" is invalid: metadata.name: Invalid value: \"{{ deploymentColor }}-a-helloworld-nodejs-dev-argoapp\": a DNS-1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')"}
The above logs indicate that variable interpolation for the
deploymentColor
parameter was failing in the
ApplicationSet manifest's template
, thus leaving the invalid
{{ PARAM_NAME }}
syntax in the fully rendered manifest. In this case, the root cause was a
missing key in sre-cluster-config
.
2022-11-16