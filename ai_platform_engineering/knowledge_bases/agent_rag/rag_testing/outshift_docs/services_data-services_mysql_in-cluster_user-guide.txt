User guide
¶
MySQL operator
must be present on the Kubernetes cluster in order to use the service.
Ask your SRE contact if it's already available on your cluster.
Installation
¶
For all available parameters and more examples check out the
official documentation
for the MySQL Operator.
The most basic MySQL installation can be achieved by applying the following custom resource on the cluster:
apiVersion
:
mysql.oracle.com/v2
kind
:
InnoDBCluster
metadata
:
name
:
mycluster
spec
:
secretName
:
mysql-secret
tlsUseSelfSigned
:
true
instances
:
3
router
:
instances
:
1
This could be part of your deployment config (eg. Helm chart) or you could apply it through ArgoCD.
Don't apply it manually unless it's absolutely necessary!
When in doubt, ask your SRE contact.
Here is an example mysql deployment
You will find the credentials for the created user in a Secret named
mysql-secret
.
$> kubectl create secret generic mypwds \
--from-literal=rootUser=root \
--from-literal=rootHost=% \
--from-literal=rootPassword="<TBD>"
You can connect to the MySQL instance from your application at
mycluster
on port
3306
using port forwarding
MySQL local dB migration example
¶
This section walks thru running local db migrations
Pre-requisite:
- Local mysql-client has been installed
  - Mac:
brew install mysql-client
- Ubuntu:
apt install mysql-client
Setup port forwarding to mysql instance
kubectl port-forward service/<MYSQL_SERVICE_NAME> mysql
In a separate terminal session, navigate to local directory where the sql script is, then run:
mysql -h127.0.0.1 -P3306 -uroot -p
use <DATABASE_TO_MODIFY>;
Run the db migration script
source ./<SQL_FILE_NAME>
References
¶
https://github.com/mysql/mysql-operator
https://dev.mysql.com/doc/mysql-operator/en/
https://wwwin-github.cisco.com/eti/siggy-mysql-instances/tree/main/siggy/overlays/mysql/dev
2022-10-11