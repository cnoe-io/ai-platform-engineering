karpenter
Configuring Application Manifest for application that is going to use Karpenter
¶
To ensure proper integration with Karpenter and usage default nodepool provided by SRE, your application manifest must include the following configurations:
Resources: Requests and Limits
Define resource requests and limits for your containers in the
spec
section of your Deployment or Pod manifest. Example:
resources
:
limits
:
cpu
:
250m
memory
:
1024Mi
requests
:
cpu
:
250m
memory
:
1024Mi
Tolerations for Taint
Specify tolerations for the taint with the key
applications/default
and effect
NoSchedule
. Example:
tolerations
:
-
key
:
applications/default
operator
:
"Exists"
effect
:
NoSchedule
Node Selector
Set the node selector for your pods using the
nodeSelector
field. Example:
nodeSelector
:
applications
:
default
Pod Disruption Budget
WARNING:
Be aware that minAvailable count is less that exact number of pods.... Otherwice pod will be sticked to karpenter node and wont be evicted, that way scaling wont work proper
Define a Pod Disruption Budget in a separate manifest. Example:
apiVersion
:
policy/v1
kind
:
PodDisruptionBudget
metadata
:
name
:
test-deployment
namespace
:
karpenter
spec
:
minAvailable
:
2
selector
:
matchLabels
:
app
:
test
Full Example
¶
Here's a complete example incorporating the above configurations:
apiVersion
:
apps/v1
kind
:
Deployment
metadata
:
name
:
test-deployment
namespace
:
karpenter
spec
:
replicas
:
3
selector
:
matchLabels
:
app
:
test
template
:
metadata
:
labels
:
app
:
test
spec
:
shareProcessNamespace
:
true
containers
:
-
name
:
nginx
image
:
nginx
resources
:
limits
:
cpu
:
250m
memory
:
1024Mi
requests
:
cpu
:
250m
memory
:
1024Mi
tolerations
:
-
key
:
applications/default
operator
:
"Exists"
effect
:
NoSchedule
nodeSelector
:
applications
:
default
---
apiVersion
:
policy/v1
kind
:
PodDisruptionBudget
metadata
:
name
:
test-deployment
namespace
:
karpenter
spec
:
minAvailable
:
2
selector
:
matchLabels
:
app
:
test
Explanation:
¶
Resources: Requests and Limits:
¶
Resource requests and limits define the amount of CPU and memory that a container in your pod requires. This information is crucial for Karpenter to make informed decisions about scaling and resource allocation.
Tolerations for Taints:
¶
Karpenter may use node taints to control where pods can be scheduled. The toleration for the specified taint ensures that pods from your application are allowed to be scheduled on nodes with the specific taint (applications/default). Without this toleration, Karpenter might avoid nodes with this taint, impacting the scalability of your application.
Node Selector:
¶
The node selector allows you to constrain which nodes your pods are eligible to be scheduled based on labels. By specifying applications: default in the node selector, you are instructing Karpenter to place your application's pods on nodes with the corresponding label. This helps in optimizing resource allocation and can be crucial for workload distribution.
Pod Disruption Budget:
¶
The Pod Disruption Budget (PDB) is used to control the disruption caused by voluntary disruptions (e.g., scaling down or updates). In the given example, the PDB ensures that at least 2 pods labeled with app: test remain available during disruptions. This is essential for maintaining the desired level of availability and preventing potential issues during rolling updates or other disruptions.
2024-09-18