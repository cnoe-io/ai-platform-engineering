AppD
AppDynamics
CCO
CNAO
FSO
Observability
access
log
logging
login
logs
Logging User Guide
¶
!!! warning This documentation is deprecated, we are using splunk now for observability
Logs emitted to stdout by the application are automatically collected with OpenTelemetry and sent to the
Cisco Cloud Observability
(CCO) Platform.
Step 1: Tenant Access
¶
Note
If you have already onboarded to AppDynamics, you may skip this step.
CCO Access
Self-Service Link:
Just In Time Access Link
Tenant Access (Automation Coming Soon)
If the self-service link does not provide access to the tenants, please follow the following instructions
Submit Jira to SRE Team:
Jira Request Link
For Urgent Requests, follow up in the
Ask Outshift SRE
space.
Step 2: Logging Endpoints
¶
CCO Production Endpoint
¶
Log in with Cisco SSO via the endpoint below:
*
https://outshift-prod.observe.appdynamics.com
CCO Pre-Production Endpoint
¶
Log in with Cisco SSO via the endpoint below:
*
https://outshift-preprod.observe.appdynamics.com
Locating Logs
¶
Where are my logs?
¶
Log into the endpoint where your cluster is sending logs. If your application is hosted on a production Kubernetes cluster use the production endpoint. If your application is hosted on dev, staging or any other cluster type use the pre-production endpoint.
How do I find the logs in CCO?
¶
Begin with accessing the appropriate endpoint.
Navigate to
Explore
in the left menu.
Expand
Explore
and navigate to
logs
This view brings up all the logs in the Cisco Observability Cloud Tenant. To filter logs for your application, follow the instructions in the next section.
How can use the filter to focus on my logs?
¶
Expand the
>>
icon between the left menu, and the log results to reveal the filters menu.
Navigate to the
KUBERNETES
section, expand the metric type you want to filter by and select the filter.
Multiple filters can be used to narrow down the results in the left logs results.
You can narrow in on the time range by selecting the range in the histogram, or by using the range selector in the upper-right of the page.
General Logging Guidelines
¶
Your code should support logging verbosity levels. Since the collectors are configured to collect all stdout from running containers, logging unnecessary logs can exhaust the collector and cause unnecessary traffic and clog AppDynamics quotas. By default, log important (
Warning
/
Error
level) logs only. Increase logging verbosity (Debug/Info level) of your running workloads for debugging purposes when necessary.
Write your logs to match the default AppDynamics grok pattern:
%{TIMESTAMP_ISO8601:time}\t%{LOGLEVEL:severity}\t%{DATA:class}:%{NUMBER:line}\t%{GREEDYDATA:data}
If your logs requires a different pattern, or your logs arenât being parsed correctly, work with the SRE team to develop and deploy a matching grok pattern.
Why aren't my logs formatted properly?
¶
Cisco Cloud Observability uses Grok patterns to parse logs for improved readability visualization events and alerting.
As every application could have a unique log format, all logs can't be formatted out of the box. The platform does provide the ability to add filters.
Grok Log
Documentation
CCO Custom Grok Patterns
Documentation
Grok Debugger:
https://grokdebugger.com/
Recent example by Marvin team
:
https://github.com/cisco-eti/sre-baseapps-configs-genai/blob/main/clusters/marvin-prod-euc1-1/appdynamics-collectors/values.yaml
Once you have developed a Grok pattern that can parse your logs, please create an
SRE Service Desk ticket
so that we can add this pattern to the observability platform configuration.
Example Python code snippet
¶
import
logging
def
configure_logging
(
verbosity
):
"""
Configures the logging module based on the specified verbosity level.
Args:
verbosity (int): The verbosity level (0, 1, or 2).
"""
log_format
=
"
%(asctime)s
\t
%(levelname)s
\t
%(module)s
:
%(lineno)d
\t
%(message)s
"
logging
.
basicConfig
(
format
=
log_format
,
level
=
logging
.
DEBUG
)
if
verbosity
==
0
:
logging
.
disable
(
logging
.
INFO
)
elif
verbosity
==
1
:
logging
.
disable
(
logging
.
DEBUG
)
def
main
():
# Parse command-line arguments or set the verbosity level manually
verbosity
=
2
# Set the desired verbosity level (0, 1, or 2)
configure_logging
(
verbosity
)
# Your application code here
logging
.
info
(
"This is an informational message."
)
logging
.
warning
(
"This is a warning message."
)
logging
.
error
(
"This is an error message."
)
logging
.
debug
(
"This is a debug message."
)
if
__name__
==
"__main__"
:
main
()
Additional Resources
¶
The SRE team hosts the Cisco Cloud Observability Platform but does not provide training in the full use of the product.  The AppDynamics team has additional support available for advanced logging concepts.
Troubleshooting With Logs:
https://docs.appdynamics.com/fso/cloud-native-app-obs/en/kubernetes-and-app-service-monitoring/log-collection/troubleshoot-with-logs
AppDynamics Support:
https://www.appdynamics.com/support
You can create a service ticket here, or schedule a call with an observability consultant.
2025-06-20