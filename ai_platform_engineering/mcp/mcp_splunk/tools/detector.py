# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /detector operations"""

import logging
from typing import Dict, Any, List, Literal
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def create__single__detector(
    body_name: str,
    body_programText: str,
    body_rules: List[Dict[str, Any]],
    body_authorizedWriters__teams: List[str] = None,
    body_authorizedWriters__users: List[str] = None,
    body_customProperties: Dict[str, Any] = None,
    body_description: str = None,
    body_detectorOrigin: Literal["Standard", "AutoDetect", "AutoDetectCustomization"] = None,
    body_maxDelay: int = None,
    body_minDelay: int = None,
    body_packageSpecifications: str = None,
    body_parentDetectorId: str = None,
    body_tags: List[str] = None,
    body_teams: List[str] = None,
    body_timezone: str = None,
    body_visualizationOptions__disableSampling: bool = None,
    body_visualizationOptions__publishLabelOptions: List[Dict[str, Any]] = None,
    body_visualizationOptions__showDataMarkers: bool = None,
    body_visualizationOptions__showEventLines: bool = None,
    body_visualizationOptions__time__end: int = None,
    body_visualizationOptions__time__range: int = None,
    body_visualizationOptions__time__start: int = None,
    body_visualizationOptions__time__type: Literal["absolute", "relative"] = None,
) -> Any:
    """
    Creates a detector

    OpenAPI Description:
        Creates a detector


    Args:

        body_authorizedWriters__teams (List[str]): List of team IDs


        body_authorizedWriters__users (List[str]): List of user IDs


        body_customProperties (Dict[str, Any]): Detector metadata


        body_description (str): Detector description


        body_detectorOrigin (Literal['Standard', 'AutoDetect', 'AutoDetectCustomization']): Indicates how a detector was created.


        body_maxDelay (int): Upper limit of how long the SignalFlow computation waits for delayed data before continuing, in milliseconds. The default is 0, which tells SignalFlow to set the limit dynamically.


        body_minDelay (int): Lower limit of how long the SignalFlow computation for the detector waits before continuing, in milliseconds.


        body_name (str): Detector name


        body_packageSpecifications (str): For internal use only


        body_parentDetectorId (str): ID of the parent detector


        body_programText (str): The detector's SignalFlow program


        body_rules (List[Dict[str, Any]]): List of alert rules for a detector


        body_tags (List[str]): List of tags for the detector


        body_teams (List[str]): IDs of teams associated with this detector


        body_timezone (str): Time zone for SignalFlow calendar window transformations


        body_visualizationOptions__disableSampling (bool): Controls display of all data points instead of sampled data points


        body_visualizationOptions__publishLabelOptions (List[Dict[str, Any]]): List of display options for the detector's chart


        body_visualizationOptions__showDataMarkers (bool): Controls the display of markers for data points


        body_visualizationOptions__showEventLines (bool): Controls displaying vertical lines for event times


        body_visualizationOptions__time__end (int): Timestamp of the last time to display


        body_visualizationOptions__time__range (int): Number of milliseconds to display for the detector


        body_visualizationOptions__time__start (int): Timestamp of the first time to display


        body_visualizationOptions__time__type (Literal['absolute', 'relative']): Enumeration of time range choices



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /detector")

    params = {}
    data = {}

    flat_body = {}
    if body_name is not None:
        flat_body["name"] = body_name
    if body_programText is not None:
        flat_body["programText"] = body_programText
    if body_rules is not None:
        flat_body["rules"] = body_rules
    if body_authorizedWriters__teams is not None:
        flat_body["authorizedWriters__teams"] = body_authorizedWriters__teams
    if body_authorizedWriters__users is not None:
        flat_body["authorizedWriters__users"] = body_authorizedWriters__users
    if body_customProperties is not None:
        flat_body["customProperties"] = body_customProperties
    if body_description is not None:
        flat_body["description"] = body_description
    if body_detectorOrigin is not None:
        flat_body["detectorOrigin"] = body_detectorOrigin
    if body_maxDelay is not None:
        flat_body["maxDelay"] = body_maxDelay
    if body_minDelay is not None:
        flat_body["minDelay"] = body_minDelay
    if body_packageSpecifications is not None:
        flat_body["packageSpecifications"] = body_packageSpecifications
    if body_parentDetectorId is not None:
        flat_body["parentDetectorId"] = body_parentDetectorId
    if body_tags is not None:
        flat_body["tags"] = body_tags
    if body_teams is not None:
        flat_body["teams"] = body_teams
    if body_timezone is not None:
        flat_body["timezone"] = body_timezone
    if body_visualizationOptions__disableSampling is not None:
        flat_body["visualizationOptions__disableSampling"] = body_visualizationOptions__disableSampling
    if body_visualizationOptions__publishLabelOptions is not None:
        flat_body["visualizationOptions__publishLabelOptions"] = body_visualizationOptions__publishLabelOptions
    if body_visualizationOptions__showDataMarkers is not None:
        flat_body["visualizationOptions__showDataMarkers"] = body_visualizationOptions__showDataMarkers
    if body_visualizationOptions__showEventLines is not None:
        flat_body["visualizationOptions__showEventLines"] = body_visualizationOptions__showEventLines
    if body_visualizationOptions__time__end is not None:
        flat_body["visualizationOptions__time__end"] = body_visualizationOptions__time__end
    if body_visualizationOptions__time__range is not None:
        flat_body["visualizationOptions__time__range"] = body_visualizationOptions__time__range
    if body_visualizationOptions__time__start is not None:
        flat_body["visualizationOptions__time__start"] = body_visualizationOptions__time__start
    if body_visualizationOptions__time__type is not None:
        flat_body["visualizationOptions__time__type"] = body_visualizationOptions__time__type
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/detector", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def retrieve__detectors__query(
    param_limit: int = None,
    param_name: str = None,
    param_offset: int = None,
    param_orderBy: Literal["creator", "created", "description", "lastUpdated", "lastUpdatedBy", "name", "tags"] = None,
    param_tags: str = None,
    param_prefixTags: List[str] = None,
    param_prefixTagExclusions: List[str] = None,
) -> Any:
    """
        Retrieves detectors based on search criteria

        OpenAPI Description:
            Retrieves detector properties based on the query parameters


        Args:

            param_limit (int): Number of results to return from the result set


            param_name (str): Search criteria for existing detector name


            param_offset (int): Index in result set at which request should start returning detector


            param_orderBy (Literal['creator', 'created', 'description', 'lastUpdated', 'lastUpdatedBy', 'name', 'tags']): The field on which the API should sort the query results. The API only supports fields specified in the enum.


            param_tags (str): Detector tags search criteria


            param_prefixTags (List[str]): Search filter that the API applies to find and return only detectors
    which have at least one tag starting with the provided prefix,
    for each prefix provided.


            param_prefixTagExclusions (List[str]): Search filter that the API applies to exclude detectors which have at least one
    tag starting with any of the provided prefixes from the query result.



        Returns:
            Any: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /detector")

    params = {}
    data = {}

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    if param_name is not None:
        params["name"] = str(param_name).lower() if isinstance(param_name, bool) else param_name

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_orderBy is not None:
        params["orderBy"] = str(param_orderBy).lower() if isinstance(param_orderBy, bool) else param_orderBy

    if param_tags is not None:
        params["tags"] = str(param_tags).lower() if isinstance(param_tags, bool) else param_tags

    if param_prefixTags is not None:
        params["prefixTags"] = str(param_prefixTags).lower() if isinstance(param_prefixTags, bool) else param_prefixTags

    if param_prefixTagExclusions is not None:
        params["prefixTagExclusions"] = (
            str(param_prefixTagExclusions).lower() if isinstance(param_prefixTagExclusions, bool) else param_prefixTagExclusions
        )

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/detector", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
