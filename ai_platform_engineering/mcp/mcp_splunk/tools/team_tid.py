# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /team/{tid} operations"""

import logging
from typing import Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def retrieve__team__using_id(path_tid: str) -> Any:
    """
    Retrieves the team specified in the {tid} path parameter

    OpenAPI Description:
        Retrieves a team


    Args:

        path_tid (str): Team ID



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /team/{tid}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/team/{path_tid}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def update__team(
    path_tid: str,
    body_description: str = None,
    body_members: List[str] = None,
    body_name: str = None,
    body_notificationLists__default: List[str] = None,
    body_notificationLists__critical: List[str] = None,
    body_notificationLists__warning: List[str] = None,
    body_notificationLists__major: List[str] = None,
    body_notificationLists__minor: List[str] = None,
    body_notificationLists__info: List[str] = None,
) -> Any:
    """
    Updates the team specified in the {tid} path parameter

    OpenAPI Description:
        Updates a team


    Args:

        path_tid (str): Team ID


        body_description (str): Team description


        body_members (List[str]): List of user IDs that belong to a team


        body_name (str): Team name


        body_notificationLists__default (List[str]): Notification services to use for undefined alerts


        body_notificationLists__critical (List[str]): Notification services to use for critical alerts


        body_notificationLists__warning (List[str]): Notification services to use for warning alerts


        body_notificationLists__major (List[str]): Notification services to use for major alerts


        body_notificationLists__minor (List[str]): Notification services to use for minor alerts


        body_notificationLists__info (List[str]): Notification services to use for information alerts



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /team/{tid}")

    params = {}
    data = {}

    flat_body = {}
    if body_description is not None:
        flat_body["description"] = body_description
    if body_members is not None:
        flat_body["members"] = body_members
    if body_name is not None:
        flat_body["name"] = body_name
    if body_notificationLists__default is not None:
        flat_body["notificationLists__default"] = body_notificationLists__default
    if body_notificationLists__critical is not None:
        flat_body["notificationLists__critical"] = body_notificationLists__critical
    if body_notificationLists__warning is not None:
        flat_body["notificationLists__warning"] = body_notificationLists__warning
    if body_notificationLists__major is not None:
        flat_body["notificationLists__major"] = body_notificationLists__major
    if body_notificationLists__minor is not None:
        flat_body["notificationLists__minor"] = body_notificationLists__minor
    if body_notificationLists__info is not None:
        flat_body["notificationLists__info"] = body_notificationLists__info
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/team/{path_tid}", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete__team(path_tid: str) -> Any:
    """
    Deletes the team specified in the {tid} path parameter

    OpenAPI Description:
        Deletes a team


    Args:

        path_tid (str): Team ID



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /team/{tid}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/team/{path_tid}", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
