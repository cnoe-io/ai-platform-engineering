# ---------- Stage 1: Build dependencies ----------
FROM python:3.13-slim AS builder

# Install system dependencies and uv in one layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && pip install uv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy necessary directories for the build
COPY --chown=root:root __init__.py /app/ai_platform_engineering/
COPY --chown=root:root utils /app/ai_platform_engineering/utils/
COPY --chown=root:root agents/aws /app/ai_platform_engineering/agents/aws/

# Set working directory to the AWS agent
WORKDIR /app/ai_platform_engineering/agents/aws

# Create README.md if not present (due to .dockerignore)
RUN [ ! -f "README.md" ] && echo "# AWS Agent" > README.md || true

# Install dependencies into venv (no dev deps)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --no-dev

# Patch EKS MCP server to fix Union type signature issue
RUN --mount=type=cache,target=/root/.cache/uv \
    uvx awslabs.eks-mcp-server@0.1.6 --help > /dev/null 2>&1 && \
    EKS_FILE=$(find /root/.cache/uv -name "eks_stack_handler.py" -path "*/lib/python*" 2>/dev/null | head -1) && \
    if [ -n "$EKS_FILE" ]; then \
        echo "Patching EKS MCP server at: $EKS_FILE" && \
        sed -i '/from mcp.types import CallToolResult/d' "$EKS_FILE" && \
        sed -i '39a from mcp.types import CallToolResult' "$EKS_FILE" && \
        sed -i '/Union\[/,/\]:/c\    ) -> CallToolResult:' "$EKS_FILE" && \
        echo "✅ EKS MCP server patched during build"; \
    else \
        echo "⚠️ EKS handler not found, skipping patch"; \
    fi

# ---------- Stage 2: Final runtime image ----------
FROM python:3.13-slim

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create appuser in final image
RUN groupadd -r appuser && useradd -r -g appuser -u 1001 -m appuser

WORKDIR /app/ai_platform_engineering/agents/aws

# Set env vars for uv & PATH
ENV UV_PROJECT_ENVIRONMENT=/app/ai_platform_engineering/agents/aws/.venv \
    PATH="/app/ai_platform_engineering/agents/aws/.venv/bin:${PATH}" \
    PYTHONPATH="/app:${PYTHONPATH}" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Copy venv & code from builder (maintain directory structure)
COPY --from=builder --chown=appuser:appuser /app /app

# Create startup script that patches EKS MCP server before starting the agent (as root)
RUN echo '#!/bin/sh\n\
echo "Applying EKS MCP server patch..."\n\
uvx awslabs.eks-mcp-server@0.1.6 --help > /dev/null 2>&1\n\
EKS_FILE=$(find /home/appuser/.cache/uv -name "eks_stack_handler.py" -path "*/lib/python*" 2>/dev/null | head -1)\n\
if [ -n "$EKS_FILE" ]; then\n\
    echo "Patching EKS MCP server at: $EKS_FILE"\n\
    sed -i "39a from mcp.types import CallToolResult" "$EKS_FILE"\n\
    sed -i "132,134c\\    ) -> CallToolResult:" "$EKS_FILE"\n\
    echo "✅ EKS MCP server patched successfully!"\n\
else\n\
    echo "⚠️ EKS handler not found, will patch when MCP initializes"\n\
fi\n\
echo "Starting AWS agent..."\n\
exec python -m agent_aws --host 0.0.0.0 --port 8000' > /app/start-with-patch.sh && chmod +x /app/start-with-patch.sh

USER appuser

EXPOSE 8000

CMD ["/app/start-with-patch.sh"]
