# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet operations"""

import logging
from typing import Dict, Any, List
from agent_petstore.protocol_bindings.mcp_server.mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def update_pet(
    body_name: str,
    body_photoUrls: List[str],
    body_id: int = None,
    body_category_id: int = None,
    body_category_name: str = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    '''
    Update an existing pet by its ID.

    Args:
        body_name (str): The name of the pet.
        body_photoUrls (List[str]): List of photo URLs for the pet.
        body_id (int, optional): The unique identifier of the pet. Defaults to None.
        body_category_id (int, optional): The unique identifier of the pet's category. Defaults to None.
        body_category_name (str, optional): The name of the pet's category. Defaults to None.
        body_tags (List[str], optional): List of tags associated with the pet. Defaults to None.
        body_status (str, optional): The status of the pet in the store. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the updated pet information or an error message.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      put:
        summary: Update an existing pet
        description: Update an existing pet by Id.
        operationId: updatePet
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The unique identifier of the pet.
                  name:
                    type: string
                    description: The name of the pet.
                  category_id:
                    type: integer
                    description: The unique identifier of the pet's category.
                  category_name:
                    type: string
                    description: The name of the pet's category.
                  photoUrls:
                    type: array
                    items:
                      type: string
                    description: List of photo URLs for the pet.
                  tags:
                    type: array
                    items:
                      type: string
                    description: List of tags associated with the pet.
                  status:
                    type: string
                    description: The status of the pet in the store.
                required:
                  - name
                  - photoUrls
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid input
          '404':
            description: Pet not found
          '405':
            description: Validation exception
    '''
    logger.debug("Making PUT request to /pet")

    params = {}
    data = {}

    flat_body = {}
    if body_name is not None:
        flat_body["name"] = body_name
    if body_photoUrls is not None:
        flat_body["photoUrls"] = body_photoUrls
    if body_id is not None:
        flat_body["id"] = body_id
    if body_category_id is not None:
        flat_body["category_id"] = body_category_id
    if body_category_name is not None:
        flat_body["category_name"] = body_category_name
    if body_tags is not None:
        flat_body["tags"] = body_tags
    if body_status is not None:
        flat_body["status"] = body_status
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/pet", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def add_pet(
    body_name: str,
    body_photoUrls: List[str],
    body_id: int = None,
    body_category_id: int = None,
    body_category_name: str = None,
    body_tags: List[str] = None,
    body_status: str = None,
) -> Dict[str, Any]:
    '''
    Add a new pet to the store.

    Args:
        body_name (str): Name of the pet.
        body_photoUrls (List[str]): List of photo URLs for the pet.
        body_id (int, optional): Unique identifier for the pet. Defaults to None.
        body_category_id (int, optional): Unique identifier for the pet's category. Defaults to None.
        body_category_name (str, optional): Name of the pet's category. Defaults to None.
        body_tags (List[str], optional): List of tags associated with the pet. Defaults to None.
        body_status (str, optional): Status of the pet in the store (e.g., 'available', 'pending', 'sold'). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
        post:
          summary: Add a new pet to the store
          operationId: addPet
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Unique identifier for the pet
                    name:
                      type: string
                      description: Name of the pet
                    category_id:
                      type: integer
                      format: int64
                      description: Unique identifier for the pet's category
                    category_name:
                      type: string
                      description: Name of the pet's category
                    photoUrls:
                      type: array
                      items:
                        type: string
                      description: List of photo URLs for the pet
                    tags:
                      type: array
                      items:
                        type: string
                      description: List of tags associated with the pet
                    status:
                      type: string
                      description: Status of the pet in the store (e.g., 'available', 'pending', 'sold')
                  required:
                    - name
                    - photoUrls
          responses:
            '200':
              description: Successful operation
              content:
                application/json:
                  schema:
                    type: object
            '400':
              description: Invalid input
    '''
    logger.debug("Making POST request to /pet")

    params = {}
    data = {}

    flat_body = {}
    if body_name is not None:
        flat_body["name"] = body_name
    if body_photoUrls is not None:
        flat_body["photoUrls"] = body_photoUrls
    if body_id is not None:
        flat_body["id"] = body_id
    if body_category_id is not None:
        flat_body["category_id"] = body_category_id
    if body_category_name is not None:
        flat_body["category_name"] = body_category_name
    if body_tags is not None:
        flat_body["tags"] = body_tags
    if body_status is not None:
        flat_body["status"] = body_status
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/pet", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response