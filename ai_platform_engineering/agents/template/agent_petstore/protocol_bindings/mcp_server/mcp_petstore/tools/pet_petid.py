# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pet/{petId} operations"""

import logging
from typing import Dict, Any
from agent_petstore.protocol_bindings.mcp_server.mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_pet_by_id(path_petId: int) -> Dict[str, Any]:
    '''
    Find a pet by its unique ID.

    Args:
        path_petId (int): The ID of the pet to retrieve.

    Returns:
        Dict[str, Any]: The JSON response containing the pet details if found.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Find pet by ID
        description: Returns a single pet.
        operationId: getPetById
        parameters:
          - name: petId
            in: path
            required: true
            description: ID of pet to return
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Pet'
          '400':
            description: Invalid ID supplied
          '404':
            description: Pet not found
    '''
    logger.debug("Making GET request to /pet/{petId}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/pet/{path_petId}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def update_pet_with_form(path_petId: int, param_name: str = None, param_status: str = None) -> Dict[str, Any]:
    '''
    Updates a pet in the store with form data.

    Args:
        path_petId (int): ID of the pet that needs to be updated.
        param_name (str, optional): Name of the pet that needs to be updated. Defaults to None.
        param_status (str, optional): Status of the pet that needs to be updated. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      put:
        summary: Updates a pet in the store with form data.
        description: Updates a pet resource based on the form data.
        operationId: updatePetWithForm
        parameters:
          - name: petId
            in: path
            required: true
            description: ID of pet that needs to be updated
            schema:
              type: integer
          - name: name
            in: query
            required: false
            description: Name of pet that needs to be updated
            schema:
              type: string
          - name: status
            in: query
            required: false
            description: Status of pet that needs to be updated
            schema:
              type: string
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid input
          '404':
            description: Pet not found
    '''
    logger.debug("Making POST request to /pet/{petId}")

    params = {}
    data = {}

    if param_name is not None:
        params["name"] = str(param_name).lower() if isinstance(param_name, bool) else param_name

    if param_status is not None:
        params["status"] = str(param_status).lower() if isinstance(param_status, bool) else param_status

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/pet/{path_petId}", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete_pet(path_petId: int) -> Dict[str, Any]:
    '''
    Deletes a pet by its unique identifier.

    Args:
        path_petId (int): The ID of the pet to delete.

    Returns:
        Dict[str, Any]: The JSON response from the API call, typically indicating success or failure.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      delete:
        summary: Delete a pet
        description: Deletes a pet by its unique identifier.
        operationId: deletePet
        parameters:
          - name: petId
            in: path
            required: true
            description: The ID of the pet to delete.
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Pet deleted successfully.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid ID supplied.
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Pet not found.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making DELETE request to /pet/{petId}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/pet/{path_petId}", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response