# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /store/order/{orderId} operations"""

import logging
from typing import Dict, Any
from agent_petstore.protocol_bindings.mcp_server.mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_order_by_id(path_orderId: int) -> Dict[str, Any]:
    '''
    Find purchase order by ID.

    Args:
        path_orderId (int): ID of the order that needs to be fetched.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing order details.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Find purchase order by ID
        description: >
          For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
        operationId: getOrderById
        parameters:
          - name: orderId
            in: path
            required: true
            description: ID of order that needs to be fetched
            schema:
              type: integer
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid ID supplied
          '404':
            description: Order not found
          '500':
            description: Internal server error
    '''
    logger.debug("Making GET request to /store/order/{orderId}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/store/order/{path_orderId}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete_order(path_orderId: int) -> Dict[str, Any]:
    '''
    Delete a purchase order by its identifier.

    Args:
        path_orderId (int): ID of the order that needs to be deleted.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      delete:
        summary: Delete purchase order by identifier
        description: |
          For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
        operationId: deleteOrder
        parameters:
          - name: orderId
            in: path
            required: true
            description: ID of the order that needs to be deleted
            schema:
              type: integer
        responses:
          '200':
            description: Order deleted successfully
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid ID supplied
            content:
              application/json:
                schema:
                  type: object
          '404':
            description: Order not found
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Server error
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making DELETE request to /store/order/{orderId}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/store/order/{path_orderId}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response