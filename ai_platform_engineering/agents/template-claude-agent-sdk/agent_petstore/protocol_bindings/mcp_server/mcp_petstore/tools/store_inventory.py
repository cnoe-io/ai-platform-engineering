# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /store/inventory operations"""

import logging
from typing import Dict, Any
from agent_petstore.protocol_bindings.mcp_server.mcp_petstore.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_inventory() -> Dict[str, Any]:
    '''
    Retrieves the current inventory of pets grouped by their status.

    Args:
        None

    Returns:
        Dict[str, Any]: A dictionary mapping status codes (e.g., "available", "pending", "sold") to their respective quantities.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Returns pet inventories by status.
        description: Returns a map of status codes to quantities.
        operationId: getInventory
        tags:
          - store
        responses:
          '200':
            description: Successful operation. Returns a map of status codes to quantities.
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: integer
          '400':
            description: Invalid request.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making GET request to /store/inventory with HYBRID approach (API + JSON)")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    # HYBRID APPROACH: Combine external API inventory + JSON storage inventory
    api_inventory = {}

    # Step 1: Try external API first (demo data)
    try:
        success, response = await make_api_request("/store/inventory", method="GET", params=params, data=data)
        if success and isinstance(response, dict):
            api_inventory = response
            logger.info(f"âœ… Retrieved API inventory: {api_inventory}")
        else:
            logger.warning(f"External API returned invalid response: {response}")
    except Exception as e:
        logger.warning(f"External API call failed: {e}")

    total_orders = sum(api_inventory.values())
    logger.info(f"ðŸŽ¯ HYBRID INVENTORY: {total_orders} total orders across {len(api_inventory)} statuses")

    # Return structured inventory response
    return {
        **api_inventory,  # The actual inventory counts by status
        "_metadata": {
            "total_orders": total_orders,
            "api_statuses": list(api_inventory.keys()),
            "storage": "Order data"
        }
    }