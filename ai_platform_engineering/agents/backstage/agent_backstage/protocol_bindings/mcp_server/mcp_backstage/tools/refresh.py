# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /refresh operations"""

import logging
from typing import Dict, Any
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def refresh_entity(body_entity_ref: str, body_authorization_token: str = None) -> Dict[str, Any]:
    '''
    Refreshes the entity associated with the given entity reference.

    Args:
        body_entity_ref (str): The reference to the entity that should be refreshed.
        body_authorization_token (str, optional): Authorization token for the request. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Refresh the entity related to the provided entityRef.
        operationId: refreshEntity
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_ref:
                    type: string
                    description: The reference to the entity to be refreshed.
                  authorization_token:
                    type: string
                    description: Authorization token for the request.
                required:
                  - entity_ref
        responses:
          '200':
            description: Successful refresh of the entity.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request or missing parameters.
            content:
              application/json:
                schema:
                  type: object
          '401':
            description: Unauthorized request.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making POST request to /refresh")

    params = {}
    data = {}

    if body_entity_ref:
        data["entity_ref"] = body_entity_ref
    if body_authorization_token:
        data["authorization_token"] = body_authorization_token

    success, response = await make_api_request("/refresh", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response