# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-name/{kind}/{namespace}/{name}/ancestry operations"""

import logging
from typing import Dict, Any
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entity_ancestry_by_name(path_kind: str, path_namespace: str, path_name: str) -> Dict[str, Any]:
    '''
    Retrieves the ancestry of an entity by its kind, namespace, and name.

    Args:
        path_kind (str): The kind of the entity (e.g., 'Component', 'Resource').
        path_namespace (str): The namespace of the entity.
        path_name (str): The name of the entity.

    Returns:
        Dict[str, Any]: The JSON response containing the entity's ancestry information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get an entity's ancestry by entity ref.
        operationId: getEntityAncestryByName
        parameters:
          - name: kind
            in: path
            required: true
            schema:
              type: string
            description: The kind of the entity.
          - name: namespace
            in: path
            required: true
            schema:
              type: string
            description: The namespace of the entity.
          - name: name
            in: path
            required: true
            schema:
              type: string
            description: The name of the entity.
        responses:
          '200':
            description: Successful response with the entity's ancestry.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
          '404':
            description: Entity not found.
          '500':
            description: Internal server error.
        tags:
          - Entities
    '''
    logger.debug("Making GET request to /entities/by-name/{kind}/{namespace}/{name}/ancestry")

    params = {}
    data = {}

    success, response = await make_api_request(
        f"/api/catalog/entities/by-name/{path_kind}/{path_namespace}/{path_name}/ancestry", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response