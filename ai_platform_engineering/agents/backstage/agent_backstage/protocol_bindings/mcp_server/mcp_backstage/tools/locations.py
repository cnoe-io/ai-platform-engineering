# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /locations operations"""

import logging
from typing import Dict, Any
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def create_location(body_target: str, body_type: str, param_dryRun: str = None) -> Dict[str, Any]:
    '''
    Creates a location for a given target.

    Args:
        body_target (str): The target location to be created.
        body_type (str): The type of the location.
        param_dryRun (str, optional): If set, the request will be validated but not persisted. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Create a location for a given target.
        operationId: createLocation
        parameters:
          - name: dryRun
            in: query
            description: If set, the request will be validated but not persisted.
            required: false
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  target:
                    type: string
                    description: The target location to be created.
                  type:
                    type: string
                    description: The type of the location.
                required:
                  - target
                  - type
        responses:
          '200':
            description: Successful response with location details.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request or parameters.
            content:
              application/json:
                schema:
                  type: object
          '500':
            description: Internal server error.
            content:
              application/json:
                schema:
                  type: object
    '''
    logger.debug("Making POST request to /locations")

    params = {}
    data = {}

    params["dryRun"] = param_dryRun

    if body_target:
        data["target"] = body_target
    if body_type:
        data["type"] = body_type

    success, response = await make_api_request("/locations", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def get_locations() -> Dict[str, Any]:
    '''
    Retrieves all available locations from the API.

    Args:
        None

    Returns:
        Dict[str, Any]: The JSON response containing a list of locations and associated metadata.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get all locations
        description: Retrieve a list of all available locations.
        operationId: getLocations
        tags:
          - Locations
        responses:
          '200':
            description: A JSON array of location objects.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    locations:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Unique identifier for the location.
                          name:
                            type: string
                            description: Name of the location.
                    metadata:
                      type: object
                      description: Additional metadata about the response.
          '4XX':
            description: Client error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message.
          '5XX':
            description: Server error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message.
    '''
    logger.debug("Making GET request to /locations")

    params = {}
    data = {}

    success, response = await make_api_request("/locations", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response