# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entity-facets operations"""

import logging
from typing import Dict, Any, List
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entity_facets(param_facet: List[str], param_filter: List[str] = None) -> Dict[str, Any]:
    '''
    Retrieves all entity facets that match the specified filters.

    Args:
        param_facet (List[str]): List of facet names to retrieve for the entities.
        param_filter (List[str], optional): One or more filter sets to match against each entity. Each filter set is a list of conditions (ANDed together), and at least one filter set must match (ORed together). Each condition can be of the form `<key>` (existence) or `<key>=<value>` (equality). Keys are simplified JSON paths and matching is case-insensitive. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response containing the entity facets that match the given filters.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Get all entity facets that match the given filters.
        operationId: getEntityFacets
        parameters:
          - name: facet
            in: query
            description: List of facet names to retrieve for the entities.
            required: true
            schema:
              type: array
              items:
                type: string
          - name: filter
            in: query
            description: |
              One or more filter sets to match against each entity. Each filter set is a list of conditions (ANDed together), and at least one filter set must match (ORed together). Each condition can be of the form `<key>` (existence) or `<key>=<value>` (equality). Keys are simplified JSON paths and matching is case-insensitive.
            required: false
            schema:
              type: array
              items:
                type: string
        responses:
          '200':
            description: A JSON object containing the entity facets that match the filters.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making GET request to /entity-facets")

    params = {}
    data = {}

    params["facet"] = param_facet
    params["filter"] = param_filter

    success, response = await make_api_request("/entity-facets", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response