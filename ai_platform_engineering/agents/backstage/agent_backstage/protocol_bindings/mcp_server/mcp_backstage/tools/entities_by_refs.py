# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-refs operations"""

import logging
from typing import Dict, Any, List
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entities_by_refs(
    body_entity_refs: List[str], param_filter: List[str] = None, body_fields: List[str] = None
) -> Dict[str, Any]:
    '''
    Retrieve a batch set of entities given an array of entity references.

    Args:
        body_entity_refs (List[str]): List of entity references to retrieve.
        param_filter (List[str], optional): One or more filter sets to match against each entity. Each filter set is a group of conditions (ANDed together), and at least one filter set must match (ORed together) for an entity to be included. Each condition can be of the form `<key>` (existence) or `<key>=<value>` (equality), using simplified JSON paths. Defaults to None.
        body_fields (List[str], optional): List of fields to include in the response for each entity. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response containing the matched entities and their data.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Get a batch set of entities given an array of entityRefs.
        operationId: getEntitiesByRefs
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_refs:
                    type: array
                    items:
                      type: string
                    description: List of entity references to retrieve.
                  fields:
                    type: array
                    items:
                      type: string
                    description: List of fields to include in the response.
        parameters:
          - in: query
            name: filter
            schema:
              type: array
              items:
                type: string
            required: false
            description: >
              One or more filter sets to match against each entity. Each filter set is a group of conditions (ANDed together), and at least one filter set must match (ORed together) for an entity to be included. Each condition can be of the form `<key>` (existence) or `<key>=<value>` (equality), using simplified JSON paths.
        responses:
          '200':
            description: A JSON object containing the matched entities.
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: Invalid request or parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making POST request to /entities/by-refs")

    params = {}
    data = {}

    params["filter"] = param_filter

    if body_entity_refs:
        data["entity_refs"] = body_entity_refs
    if body_fields:
        data["fields"] = body_fields

    success, response = await make_api_request("/entities/by-refs", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response