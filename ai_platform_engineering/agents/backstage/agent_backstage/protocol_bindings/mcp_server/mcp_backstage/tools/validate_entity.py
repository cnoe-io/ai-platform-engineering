# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /validate-entity operations"""

import logging
from typing import Dict, Any
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def validate_entity(body_location: str, body_entity: Dict[str, Any]) -> Dict[str, Any]:
    '''
    Validates that the provided entity conforms to the expected schema and contains no errors.

    Args:
        body_location (str): The location identifier for the entity to be validated.
        body_entity (Dict[str, Any]): The entity data to validate against the schema.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing validation results or errors.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      post:
        summary: Validate an entity against its schema.
        description: Validates that a passed-in entity has no errors in its schema.
        operationId: validateEntity
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                    description: The location identifier for the entity.
                  entity:
                    type: object
                    additionalProperties: true
                    description: The entity data to validate.
                required:
                  - location
                  - entity
        responses:
          '200':
            description: Validation result.
            content:
              application/json:
                schema:
                  type: object
                  description: The validation result or error details.
          '400':
            description: Invalid input or schema error.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      description: Error message.
        tags:
          - Entity Validation
    '''
    logger.debug("Making POST request to /validate-entity")

    params = {}
    data = {}

    if body_location:
        data["location"] = body_location
    if body_entity:
        data["entity"] = body_entity

    success, response = await make_api_request("/validate-entity", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response