# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-query operations"""

import logging
from typing import Dict, Any, List
from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entities_by_query(
    param_fields: List[str] = None,
    param_limit: int = None,
    param_offset: int = None,
    param_orderField: List[str] = None,
    param_cursor: str = None,
    param_filter: List[str] = None,
    param_fullTextFilterTerm: str = None,
    param_fullTextFilterFields: List[str] = None,
) -> Dict[str, Any]:
    '''
    Search for entities by a given query.

    Args:
        param_fields (List[str], optional): A list of simplified JSON paths specifying which parts of the entity data to retain in the response. This reduces response size and may improve query efficiency. For example, ['metadata.name', 'metadata.annotations', 'spec'].
        param_limit (int, optional): The maximum number of records to return in the response. Defaults to None.
        param_offset (int, optional): The number of records to skip in the query page. Defaults to None.
        param_orderField (List[str], optional): A list of fields to order the entities by. Each field can be followed by 'asc' or 'desc' for ascending or descending order, respectively. For example, ['metadata.name,asc'].
        param_cursor (str, optional): A cursor string for cursor-based pagination. If provided, it is used to retrieve the next or previous batch of entities. Mutually exclusive with filter, orderField, and fullTextFilter. Defaults to None.
        param_filter (List[str], optional): One or more filter sets to match against each entity. Each filter set is a comma-separated list of conditions (e.g., ['kind=user,metadata.namespace=default']). At least one filter set must match for the entity to be included. Defaults to None.
        param_fullTextFilterTerm (str, optional): A text search term to filter entities by full-text search. Defaults to None.
        param_fullTextFilterFields (List[str], optional): A list of fields to apply the full-text search term to. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of entities and pagination information.

    Raises:
        Exception: If the API request fails or returns an error.

    OpenAPI Specification:
      get:
        summary: Search for entities by a given query.
        operationId: getEntitiesByQuery
        parameters:
          - in: query
            name: fields
            schema:
              type: array
              items:
                type: string
            description: Comma-separated list of JSON paths to select specific fields from each entity.
            required: false
            style: form
            explode: false
          - in: query
            name: limit
            schema:
              type: integer
            description: Number of records to return in the response.
            required: false
          - in: query
            name: offset
            schema:
              type: integer
            description: Number of records to skip in the query page.
            required: false
          - in: query
            name: orderField
            schema:
              type: array
              items:
                type: string
            description: List of fields to order the entities by, each optionally followed by 'asc' or 'desc'.
            required: false
            style: form
            explode: false
          - in: query
            name: cursor
            schema:
              type: string
            description: Cursor string for cursor-based pagination.
            required: false
          - in: query
            name: filter
            schema:
              type: array
              items:
                type: string
            description: One or more filter sets, each as a comma-separated list of conditions.
            required: false
            style: form
            explode: false
          - in: query
            name: fullTextFilterTerm
            schema:
              type: string
            description: Text search term for full-text filtering.
            required: false
          - in: query
            name: fullTextFilterFields
            schema:
              type: array
              items:
                type: string
            description: List of fields to apply the full-text search term to.
            required: false
            style: form
            explode: false
        responses:
          '200':
            description: Successful response with a list of entities.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    items:
                      type: array
                      items:
                        type: object
                    pageInfo:
                      type: object
                      properties:
                        nextCursor:
                          type: string
                        prevCursor:
                          type: string
          '400':
            description: Invalid request parameters.
          '500':
            description: Internal server error.
    '''
    logger.debug("Making GET request to /entities/by-query")

    params = {}
    data = {}

    params["fields"] = param_fields
    params["limit"] = param_limit
    params["offset"] = param_offset
    params["orderField"] = param_orderField
    params["cursor"] = param_cursor
    params["filter"] = param_filter
    params["fullTextFilterTerm"] = param_fullTextFilterTerm
    params["fullTextFilterFields"] = param_fullTextFilterFields

    success, response = await make_api_request("/entities/by-query", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response