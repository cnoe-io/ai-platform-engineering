# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

#!/usr/bin/env python3
"""
 MCP Server

This server provides a Model Context Protocol (MCP) interface to the ,
allowing large language models and AI assistants to interact with the service.
"""

import logging
import os
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP


from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import refresh

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import entities

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import entities_by_uid_uid

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import entities_by_name_kind_namespace_name

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import (
    entities_by_name_kind_namespace_name_ancestry,
)

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import entities_by_refs

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import entities_by_query

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import entity_facets

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import locations

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import locations_id

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import locations_by_entity_kind_namespace_name

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import analyze_location

from agent_backstage.protocol_bindings.mcp_server.mcp_backstage.tools import validate_entity


def main():
    # Load environment variables
    load_dotenv()

    # Configure logging
    logging.basicConfig(level=logging.DEBUG)

    # Get MCP configuration from environment variables
    MCP_MODE = os.getenv("MCP_MODE", "STDIO")

    # Get host and port for server
    MCP_HOST = os.getenv("MCP_HOST", "localhost")
    MCP_PORT = int(os.getenv("MCP_PORT", "8000"))

    logging.info(f"Starting MCP server in {MCP_MODE} mode on {MCP_HOST}:{MCP_PORT}")

    # Get agent name from environment variables
    AGENT_NAME = os.getenv("AGENT_NAME", "BACKSTAGE Agent")
    logging.info(f"Agent name: {AGENT_NAME}")

    # Create server instance
    if MCP_MODE == "SSE":
        mcp = FastMCP(f"{AGENT_NAME} MCP Server", host=MCP_HOST, port=MCP_PORT)
    else:
        mcp = FastMCP("BACKSTAGE MCP Server")

    # Register refresh tools

    mcp.tool()(refresh.refresh_entity)

    # Register entities tools

    mcp.tool()(entities.get_entities)

    # Register entities_by_uid_uid tools

    mcp.tool()(entities_by_uid_uid.get_entity_by_uid)

    mcp.tool()(entities_by_uid_uid.delete_entity_by_uid)

    # Register entities_by_name_kind_namespace_name tools

    mcp.tool()(entities_by_name_kind_namespace_name.get_entity_by_name)

    # Register entities_by_name_kind_namespace_name_ancestry tools

    mcp.tool()(entities_by_name_kind_namespace_name_ancestry.get_entity_ancestry_by_name)

    # Register entities_by_refs tools

    mcp.tool()(entities_by_refs.get_entities_by_refs)

    # Register entities_by_query tools

    mcp.tool()(entities_by_query.get_entities_by_query)

    # Register entity_facets tools

    mcp.tool()(entity_facets.get_entity_facets)

    # Register locations tools

    mcp.tool()(locations.create_location)

    mcp.tool()(locations.get_locations)

    # Register locations_id tools

    mcp.tool()(locations_id.get_location)

    mcp.tool()(locations_id.delete_location)

    # Register locations_by_entity_kind_namespace_name tools

    mcp.tool()(locations_by_entity_kind_namespace_name.get_location_by_entity)

    # Register analyze_location tools

    mcp.tool()(analyze_location.analyze_location)

    # Register validate_entity tools

    mcp.tool()(validate_entity.validate_entity)

    # Run the MCP server
    mcp.run()


if __name__ == "__main__":
    main()
