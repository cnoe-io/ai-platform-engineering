# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

#!/usr/bin/env python3
"""
 MCP Server

This server provides a Model Context Protocol (MCP) interface to the ,
allowing large language models and AI assistants to interact with the service.
"""

import logging
import os
from dotenv import load_dotenv
from fastmcp import FastMCP

from mcp_backstage.tools import entities_by_query
from mcp_backstage.tools import techdocs_metadata
from mcp_backstage.tools import techdocs_content
from mcp_backstage.tools import techdocs_index


def main():
  # Load environment variables
  load_dotenv()

  # Configure logging
  logging.basicConfig(level=logging.DEBUG)

  # Get MCP configuration from environment variables
  MCP_MODE = os.getenv("MCP_MODE", "STDIO")

  # Get host and port for server
  MCP_HOST = os.getenv("MCP_HOST", "localhost")
  MCP_PORT = int(os.getenv("MCP_PORT", "8000"))

  logging.info(f"Starting MCP server in {MCP_MODE} mode on {MCP_HOST}:{MCP_PORT}")

  # Get agent name from environment variables
  logging.info('*'*80)
  SERVER_NAME = os.getenv("SERVER_NAME", "BACKSTAGE")
  logging.info('*'*80)
  logging.info(f"MCP Server name: {SERVER_NAME}")

  # Create server instance
  if MCP_MODE.lower() in ["sse", "http"]:
    mcp = FastMCP(f"{SERVER_NAME} MCP Server", host=MCP_HOST, port=MCP_PORT)
  else:
    mcp = FastMCP(f"{SERVER_NAME} MCP Server")

  mcp.tool()(entities_by_query.get_entities_by_query)

  # Register TechDocs tools
  mcp.tool()(techdocs_metadata.get_techdocs_metadata)
  mcp.tool()(techdocs_metadata.get_techdocs_entity_metadata)
  mcp.tool()(techdocs_content.get_techdocs_page)
  mcp.tool()(techdocs_content.get_techdocs_mkdocs_yml)
  mcp.tool()(techdocs_content.search_techdocs)
  mcp.tool()(techdocs_index.get_techdocs_index)
  mcp.tool()(techdocs_index.list_entities_with_techdocs)

  # Run the MCP server
  mcp.run(transport=MCP_MODE.lower())


if __name__ == "__main__":
  main()
