# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-refs operations"""

import logging
from typing import Any, List
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entities_by_refs(body_entityRefs: List[str], param_filter: List[str] = None, body_fields: List[str] = None) -> Any:
  '''
  Retrieve a batch set of entities given an array of entity references.

  Args:
      body_entityRefs (List[str]): A list of entity reference strings to retrieve entities for.
      param_filter (List[str], optional): One or more filter sets to match against each entity.
          Each filter set is a group of conditions that must all be true for the set to match (AND logic within a set).
          At least one filter set must match for the entity to be included in the result (OR logic between sets).
          Each condition can be in the form `<key>` (checks for existence) or `<key>=<value>` (checks for a specific value).
          Keys are simplified JSON paths and checks are case-insensitive. Defaults to None.
      body_fields (List[str], optional): A list of specific fields to include in the response for each entity. Defaults to None.

  Returns:
      Any: The JSON response containing the matched entities from the API call.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making POST request to /entities/by-refs")

  params = {}
  data = {}

  if param_filter is not None:
    params["filter"] = str(param_filter).lower() if isinstance(param_filter, bool) else param_filter

  flat_body = {}
  if body_entityRefs is not None:
    flat_body["entityRefs"] = body_entityRefs
  if body_fields is not None:
    flat_body["fields"] = body_fields
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/entities/by-refs", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response