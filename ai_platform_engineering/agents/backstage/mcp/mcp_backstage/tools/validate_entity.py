# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /validate-entity operations"""

import logging
from typing import Dict, Any
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def validate_entity(body_location: str, body_entity: Dict[str, Any]) -> Any:
  '''
  Validate that a passed-in entity has no errors in its schema.

  Args:
      body_location (str): The location identifier for the entity to be validated.
      body_entity (Dict[str, Any]): The entity data to validate against the schema.

  Returns:
      Any: The JSON response from the API call indicating validation success or detailing schema errors.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making POST request to /validate-entity")

  params = {}
  data = {}

  flat_body = {}
  if body_location is not None:
    flat_body["location"] = body_location
  if body_entity is not None:
    flat_body["entity"] = body_entity
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/validate-entity", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response