# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /locations/by-entity/{kind}/{namespace}/{name} operations"""

import logging
from typing import Any
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_location_by_entity(path_kind: str, path_namespace: str, path_name: str) -> Any:
  '''
  Get the location information for a specific entity.

  Args:
      path_kind (str): The kind of the entity (e.g., 'Component', 'Resource').
      path_namespace (str): The namespace of the entity.
      path_name (str): The name of the entity.

  Returns:
      Any: The JSON response containing the location details for the specified entity.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making GET request to /locations/by-entity/{kind}/{namespace}/{name}")

  params = {}
  data = {}

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request(
    f"/locations/by-entity/{path_kind}/{path_namespace}/{path_name}", method="GET", params=params, data=data
  )

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response