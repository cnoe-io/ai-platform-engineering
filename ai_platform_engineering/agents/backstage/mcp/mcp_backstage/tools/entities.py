# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities operations"""

import logging
from typing import Any, List
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entities(
  param_fields: List[str] = None,
  param_limit: int = None,
  param_filter: List[str] = None,
  param_offset: int = None,
  param_after: str = None,
  param_order: List[str] = None,
) -> Any:
  '''
  Retrieve all entities matching the specified filters.

  Args:
      param_fields (List[str], optional): A list of fields to include in the response for each entity.
          By default, the full entity is returned. Specifying fields reduces the response size and may improve query performance.
          Each field should be a simplified JSON path, e.g., 'metadata.name,metadata.annotations,spec'. Defaults to None.
      param_limit (int, optional): The maximum number of records to return in the response. Defaults to None.
      param_filter (List[str], optional): One or more filter sets to match against each entity.
          Each filter set is a list of conditions (ANDed together), and at least one filter set must match (ORed together).
          Conditions can be of the form '<key>' (existence) or '<key>=<value>' (equality), using simplified JSON paths.
          Examples include filtering by kind, namespace, tags, or relations. Defaults to None.
      param_offset (int, optional): The number of records to skip in the query page, for pagination. Defaults to None.
      param_after (str, optional): A pointer to the previous page of results, used for pagination. Defaults to None.
      param_order (List[str], optional): A list of fields to order the results by. Defaults to None.

  Returns:
      Any: The JSON response from the API call containing the list of entities matching the provided filters and parameters.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making GET request to /entities")

  params = {}
  data = {}

  if param_fields is not None:
    params["fields"] = str(param_fields).lower() if isinstance(param_fields, bool) else param_fields

  if param_limit is not None:
    params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

  if param_filter is not None:
    params["filter"] = str(param_filter).lower() if isinstance(param_filter, bool) else param_filter

  if param_offset is not None:
    params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

  if param_after is not None:
    params["after"] = str(param_after).lower() if isinstance(param_after, bool) else param_after

  if param_order is not None:
    params["order"] = str(param_order).lower() if isinstance(param_order, bool) else param_order

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/entities", method="GET", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response