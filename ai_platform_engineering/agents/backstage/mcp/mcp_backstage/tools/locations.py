# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /locations operations"""

import logging
from typing import Any
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def create_location(body_target: str, body_type: str, param_dryRun: str = None) -> Any:
  '''
  Creates a location for a given target.

  Args:
      body_target (str): The target for which the location is being created.
      body_type (str): The type of the location to be created.
      param_dryRun (str, optional): If set, performs a dry run without actually creating the location. Defaults to None.

  Returns:
      Any: The JSON response from the API call, containing details of the created location or error information.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making POST request to /locations")

  params = {}
  data = {}

  if param_dryRun is not None:
    params["dryRun"] = str(param_dryRun).lower() if isinstance(param_dryRun, bool) else param_dryRun

  flat_body = {}
  if body_target is not None:
    flat_body["target"] = body_target
  if body_type is not None:
    flat_body["type"] = body_type
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/locations", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response


async def get_locations() -> Any:
  '''
  Retrieves all available locations from the API.

  Args:
      None

  Returns:
      Any: The JSON response containing the list of locations retrieved from the API.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making GET request to /locations")

  params = {}
  data = {}

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/locations", method="GET", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response