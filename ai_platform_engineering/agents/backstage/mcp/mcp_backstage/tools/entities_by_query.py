# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-query operations"""

import logging
from typing import Any, List
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entities_by_query(
  param_fields: List[str] = None,
  param_limit: int = None,
  param_offset: int = None,
  param_orderField: List[str] = None,
  param_cursor: str = None,
  param_filter: List[str] = None,
  param_fullTextFilterTerm: str = None,
  param_fullTextFilterFields: List[str] = None,
) -> Any:
  '''
  Search for entities by a given query.

  Args:
      param_fields (List[str], optional): A list of simplified JSON paths specifying which parts of the entity data to retain in the response.
          This reduces the response size and may improve query efficiency.
          For example, ['metadata.name', 'metadata.annotations', 'spec'] will only include those fields in each entity. Defaults to None.
      param_limit (int, optional): The maximum number of records to return in the response. Defaults to None.
      param_offset (int, optional): The number of records to skip in the query page, used for pagination. Defaults to None.
      param_orderField (List[str], optional): A list of fields to order the returned entities by.
          Each field can be followed by 'asc' or 'desc' to specify ascending or descending order, respectively.
          For example, ['metadata.name,asc']. Defaults to None.
      param_cursor (str, optional): A cursor string for cursor-based pagination.
          When provided, it is used to retrieve the next or previous batch of entities.
          Note: 'filter', 'orderField', and 'fullTextFilter' are mutually exclusive with 'cursor'. Defaults to None.
      param_filter (List[str], optional): One or more filter sets to match against each entity.
          Each filter set is a list of conditions (ANDed together), and at least one filter set must match (ORed together).
          Conditions can be of the form '<key>' (existence) or '<key>=<value>' (equality). For example, ['kind=user,metadata.namespace=default', 'kind=group,spec.type']. Defaults to None.
      param_fullTextFilterTerm (str, optional): A text search term to filter entities by full-text search. Defaults to None.
      param_fullTextFilterFields (List[str], optional): A list of fields to apply the full-text search term to. Defaults to None.

  Returns:
      Any: The JSON response from the API call containing the list of entities matching the query and any pagination information.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making GET request to /entities/by-query")

  params = {}
  data = {}

  if param_fields is not None:
    params["fields"] = str(param_fields).lower() if isinstance(param_fields, bool) else param_fields

  if param_limit is not None:
    params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

  if param_offset is not None:
    params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

  if param_orderField is not None:
    params["orderField"] = str(param_orderField).lower() if isinstance(param_orderField, bool) else param_orderField

  if param_cursor is not None:
    params["cursor"] = str(param_cursor).lower() if isinstance(param_cursor, bool) else param_cursor

  if param_filter is not None:
    params["filter"] = str(param_filter).lower() if isinstance(param_filter, bool) else param_filter

  if param_fullTextFilterTerm is not None:
    params["fullTextFilterTerm"] = (
      str(param_fullTextFilterTerm).lower() if isinstance(param_fullTextFilterTerm, bool) else param_fullTextFilterTerm
    )

  if param_fullTextFilterFields is not None:
    params["fullTextFilterFields"] = (
      str(param_fullTextFilterFields).lower() if isinstance(param_fullTextFilterFields, bool) else param_fullTextFilterFields
    )

  flat_body = {}
  data = assemble_nested_body(flat_body)

  # HACK: The API endpoint for entities by query is not standard, so we use a custom path
  # This is a workaround for the specific query structure expected by the API
  success, response = await make_api_request("/entities/by-query?filter=kind=user,metadata.namespace=default&filter=kind=group,spec.type", method="GET", params=None, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response