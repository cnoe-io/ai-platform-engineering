# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /analyze-location operations"""

import logging
from typing import Any
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def analyze_location(body_location_type: str, body_location_target: str, body_catalogFileName: str = None) -> Any:
  '''
  Validate a given location by analyzing the provided location type, target, and optional catalog file name.

  Args:
      body_location_type (str): The type of the location to validate (e.g., 'url', 'file', etc.).
      body_location_target (str): The target value of the location (e.g., a URL or file path).
      body_catalogFileName (str, optional): The name of the catalog file associated with the location. Defaults to None.

  Returns:
      Any: The JSON response from the API call containing the validation result or error details.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making POST request to /analyze-location")

  params = {}
  data = {}

  flat_body = {}
  if body_location_type is not None:
    flat_body["location_type"] = body_location_type
  if body_location_target is not None:
    flat_body["location_target"] = body_location_target
  if body_catalogFileName is not None:
    flat_body["catalogFileName"] = body_catalogFileName
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/analyze-location", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response