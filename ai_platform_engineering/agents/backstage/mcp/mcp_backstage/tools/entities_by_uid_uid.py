# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /entities/by-uid/{uid} operations"""

import logging
from typing import Any
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_entity_by_uid(path_uid: str) -> Any:
  '''
  Retrieves a single entity by its unique identifier (UID).

  Args:
      path_uid (str): The unique identifier of the entity to retrieve.

  Returns:
      Any: The JSON response containing the entity data if the request is successful, or an error message if the request fails.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making GET request to /entities/by-uid/{uid}")

  params = {}
  data = {}

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request(f"/entities/by-uid/{path_uid}", method="GET", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response


async def delete_entity_by_uid(path_uid: str) -> Any:
  '''
  Deletes a single entity identified by its UID.

  Args:
      path_uid (str): The unique identifier (UID) of the entity to delete.

  Returns:
      Any: The JSON response from the API call, typically indicating success or providing error details.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making DELETE request to /entities/by-uid/{uid}")

  params = {}
  data = {}

  flat_body = {}
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request(f"/entities/by-uid/{path_uid}", method="DELETE", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response