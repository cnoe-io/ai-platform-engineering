# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /refresh operations"""

import logging
from typing import Any
from mcp_backstage.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def refresh_entity(body_entityRef: str, body_authorizationToken: str = None) -> Any:
  '''
  Refreshes the entity associated with the given entity reference.

  Args:
      body_entityRef (str): The reference to the entity that should be refreshed.
      body_authorizationToken (str, optional): Authorization token for the request. Defaults to None.

  Returns:
      Any: The JSON response from the API call containing the refreshed entity data or error information.

  Raises:
      Exception: If the API request fails or returns an error.
  '''
  logger.debug("Making POST request to /refresh")

  params = {}
  data = {}

  flat_body = {}
  if body_entityRef is not None:
    flat_body["entityRef"] = body_entityRef
  if body_authorizationToken is not None:
    flat_body["authorizationToken"] = body_authorizationToken
  data = assemble_nested_body(flat_body)

  success, response = await make_api_request("/refresh", method="POST", params=params, data=data)

  if not success:
    logger.error(f"Request failed: {response.get('error')}")
    return {"error": response.get("error", "Request failed")}
  return response