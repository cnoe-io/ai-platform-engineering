
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pages/{page-id}/versions/{version-number} operations"""

import logging
from typing import Dict, Any, Optional, List
from pydantic import BaseModel
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_page_version_details(path_page_id: int, path_version_number: int) -> Dict[str, Any]:
    """
    Get version details for page version

    OpenAPI Description:
        Retrieves version details for the specified page and version number.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page.

    Args:
    
        path_page_id (int): The ID of the page for which version details should be returned.
    
        path_version_number (int): The version number of the page to be returned.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pages/{page-id}/versions/{version-number}")

    params = {}
    data = {}
        

        

    success, response = await make_api_request(
        f"/pages/{path_page_id}/versions/{path_version_number}",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
