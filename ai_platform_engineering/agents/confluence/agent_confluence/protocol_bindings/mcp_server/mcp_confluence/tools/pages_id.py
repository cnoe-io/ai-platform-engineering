
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pages/{id} operations"""

import logging
from typing import Dict, Any, Optional, List
from pydantic import BaseModel
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_page_by_id(path_id: int, param_body_format: str = None, param_get_draft: bool = None, param_status: List[str] = None, param_version: int = None, param_include_labels: bool = None, param_include_properties: bool = None, param_include_operations: bool = None, param_include_likes: bool = None, param_include_versions: bool = None, param_include_version: bool = None, param_include_favorited_by_current_user_status: bool = None, param_include_webresources: bool = None, param_include_collaborators: bool = None, param_include_direct_children: bool = None) -> Dict[str, Any]:
    """
    Get page by id

    OpenAPI Description:
        Returns a specific page.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page and its corresponding space.

    Args:
    
        path_id (int): The ID of the page to be returned. If you don't know the page ID, use Get pages and filter the results.
    
        param_body_format (str): The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
    
        param_get_draft (bool): Retrieve the draft version of this page.
    
        param_status (List[str]): Filter the page being retrieved by its status.
    
        param_version (int): Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.
    
        param_include_labels (bool): Includes labels associated with this page in the response.
The number of results will be limited to 50 and sorted in the default sort order. 
A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.
    
        param_include_properties (bool): Includes content properties associated with this page in the response.
The number of results will be limited to 50 and sorted in the default sort order. 
A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.
    
        param_include_operations (bool): Includes operations associated with this page in the response, as defined in the `Operation` object.
The number of results will be limited to 50 and sorted in the default sort order. 
A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.
    
        param_include_likes (bool): Includes likes associated with this page in the response.
The number of results will be limited to 50 and sorted in the default sort order. 
A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.
    
        param_include_versions (bool): Includes versions associated with this page in the response.
The number of results will be limited to 50 and sorted in the default sort order. 
A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.
    
        param_include_version (bool): Includes the current version associated with this page in the response.
By default this is included and can be omitted by setting the value to `false`.
    
        param_include_favorited_by_current_user_status (bool): Includes whether this page has been favorited by the current user.
    
        param_include_webresources (bool): Includes web resources that can be used to render page content on a client.
    
        param_include_collaborators (bool): Includes collaborators on the page.
    
        param_include_direct_children (bool): Includes direct children of the page, as defined in the `ChildrenResponse` object.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pages/{id}")

    params = {}
    data = {}
       
    params["body-format"] = param_body_format   
    params["get-draft"] = param_get_draft   
    params["status"] = param_status   
    params["version"] = param_version   
    params["include-labels"] = param_include_labels   
    params["include-properties"] = param_include_properties   
    params["include-operations"] = param_include_operations   
    params["include-likes"] = param_include_likes   
    params["include-versions"] = param_include_versions   
    params["include-version"] = param_include_version   
    params["include-favorited-by-current-user-status"] = param_include_favorited_by_current_user_status   
    params["include-webresources"] = param_include_webresources   
    params["include-collaborators"] = param_include_collaborators   
    params["include-direct-children"] = param_include_direct_children  

                                  

    success, response = await make_api_request(
        f"/pages/{path_id}",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

async def update_page(path_id: int) -> Dict[str, Any]:
    """
    Update page

    OpenAPI Description:
        Update a page by id.

When the "current" version is updated, the provided body content is considered as the latest version. This latest body content
will be attempted to be merged into the draft version through a content reconciliation algorithm. If two versions are significantly diverged, 
the latest provided content may entirely override what was previously in the draft. 

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page and its corresponding space. Permission to update pages in the space.

    Args:
    
        path_id (int): The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /pages/{id}")

    params = {}
    data = {}
      

      

    success, response = await make_api_request(
        f"/pages/{path_id}",
        method="PUT",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

async def delete_page(path_id: int, param_purge: bool = None, param_draft: bool = None) -> Dict[str, Any]:
    """
    Delete page

    OpenAPI Description:
        Delete a page by id.

By default this will delete pages that are non-drafts. To delete a page that is a draft, the endpoint must be called on a 
draft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.

Deleting a page moves the page to the trash, where it can be restored later. To permanently delete a page (or "purge" it),
the endpoint must be called on a **trashed** page with the following param `purge=true`.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page and its corresponding space.
Permission to delete pages in the space.
Permission to administer the space (if attempting to purge).

    Args:
    
        path_id (int): The ID of the page to be deleted.
    
        param_purge (bool): If attempting to purge the page.
    
        param_draft (bool): If attempting to delete a page that is a draft.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /pages/{id}")

    params = {}
    data = {}
       
    params["purge"] = param_purge   
    params["draft"] = param_draft  

          

    success, response = await make_api_request(
        f"/pages/{path_id}",
        method="DELETE",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
