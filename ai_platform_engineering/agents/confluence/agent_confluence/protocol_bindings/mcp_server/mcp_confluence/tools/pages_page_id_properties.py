
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pages/{page-id}/properties operations"""

import logging
from typing import Dict, Any, Optional, List
from pydantic import BaseModel
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_page_content_properties(path_page_id: int, param_key: str = None, param_sort: str = None, param_cursor: str = None, param_limit: int = None) -> Dict[str, Any]:
    """
    Get content properties for page

    OpenAPI Description:
        Retrieves Content Properties tied to a specified page.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page.

    Args:
    
        path_page_id (int): The ID of the page for which content properties should be returned.
    
        param_key (str): Filters the response to return a specific content property with matching key (case sensitive).
    
        param_sort (str): Used to sort the result by a particular field.
    
        param_cursor (str): Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.
    
        param_limit (int): Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pages/{page-id}/properties")

    params = {}
    data = {}
       
    params["key"] = param_key   
    params["sort"] = param_sort   
    params["cursor"] = param_cursor   
    params["limit"] = param_limit  

              

    success, response = await make_api_request(
        f"/pages/{path_page_id}/properties",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

async def create_page_property(path_page_id: int, body_key: str = None, body_value: str = None) -> Dict[str, Any]:
    """
    Create content property for page

    OpenAPI Description:
        Creates a new content property for a page.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to update the page.

    Args:
    
        path_page_id (int): The ID of the page to create a property for.
    
        body_key (str): Key of the content property
    
        body_value (str): Value of the content property.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /pages/{page-id}/properties")

    params = {}
    data = {}
          

       
    if body_key:
      data["key"] = body_key      
    if body_value:
      data["value"] = body_value     

    success, response = await make_api_request(
        f"/pages/{path_page_id}/properties",
        method="POST",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
