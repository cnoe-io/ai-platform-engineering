# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /labels operations"""

import logging
import os
from typing import Dict, Any, List
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging - use LOG_LEVEL from environment or default to INFO
log_level = os.getenv("LOG_LEVEL", "INFO").upper()
numeric_level = getattr(logging, log_level, logging.INFO)
logging.basicConfig(level=numeric_level)
logger = logging.getLogger("mcp_tools")


async def get_content_labels(content_id: str, param_prefix: str = None, param_cursor: str = None, param_sort: str = None, param_limit: int = None) -> Dict[str, Any]:
    """
    Get labels for specific content (page, blog post, etc.)

    OpenAPI Description:
        Returns the labels on a piece of content. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission) and view the content.

    Args:
        content_id (str): The ID of the content to get labels for (required)
        param_prefix (str): Filters on label prefix
        param_cursor (str): Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.
        param_sort (str): Used to sort the result by a particular field.
        param_limit (int): Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug(f"Making GET request to get labels for content {content_id}")

    # Validate required parameters
    if not content_id or not content_id.strip():
        error_msg = "Content ID is required and cannot be empty"
        logger.error(error_msg)
        raise ValueError(error_msg)

    params = {}
    data = {}
     
    # Only add parameters if they have values
    if param_prefix is not None:
        params["prefix"] = param_prefix   
    if param_cursor is not None:
        params["cursor"] = param_cursor   
    if param_sort is not None:
        params["sort"] = param_sort   
    if param_limit is not None:
        params["limit"] = param_limit  

    success, response = await make_api_request(
        f"/content/{content_id.strip()}/label",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        error_details = response.get('error', 'Request failed')
        error_message = f"Failed to get labels for content {content_id}: {error_details}"
        logger.error(error_message)
        raise Exception(error_message)
    return response


async def add_labels_to_content(content_id: str, labels: List[str]) -> Dict[str, Any]:
    """
    Add labels to specific content (page, blog post, etc.)

    Args:
        content_id (str): The ID of the content to add labels to (required)
        labels (List[str]): List of label names to add (required)

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug(f"Making POST request to add labels to content {content_id}")

    # Validate required parameters
    if not content_id or not content_id.strip():
        error_msg = "Content ID is required and cannot be empty"
        logger.error(error_msg)
        raise ValueError(error_msg)
    
    if not labels or len(labels) == 0:
        error_msg = "At least one label is required"
        logger.error(error_msg)
        raise ValueError(error_msg)

    # Format labels for the API
    label_data = [{"prefix": "global", "name": label.strip()} for label in labels if label.strip()]
    
    if not label_data:
        error_msg = "No valid labels provided"
        logger.error(error_msg)
        raise ValueError(error_msg)

    data = label_data

    success, response = await make_api_request(
        f"/content/{content_id.strip()}/label",
        method="POST",
        data=data
    )

    if not success:
        error_details = response.get('error', 'Request failed')
        error_message = f"Failed to add labels to content {content_id}: {error_details}"
        logger.error(error_message)
        raise Exception(error_message)
    
    logger.info(f"Labels added successfully to content {content_id}: {[label['name'] for label in label_data]}")
    return response
