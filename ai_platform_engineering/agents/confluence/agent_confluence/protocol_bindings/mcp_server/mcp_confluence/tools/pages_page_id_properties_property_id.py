
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pages/{page-id}/properties/{property-id} operations"""

import logging
from typing import Dict, Any, Optional, List
from pydantic import BaseModel
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_page_content_properties_by_id(path_page_id: int, path_property_id: int) -> Dict[str, Any]:
    """
    Get content property for page by id

    OpenAPI Description:
        Retrieves a specific Content Property by ID that is attached to a specified page.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the page.

    Args:
    
        path_page_id (int): The ID of the page for which content properties should be returned.
    
        path_property_id (int): The ID of the content property being requested.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pages/{page-id}/properties/{property-id}")

    params = {}
    data = {}
        

        

    success, response = await make_api_request(
        f"/pages/{path_page_id}/properties/{path_property_id}",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

async def update_page_property_by_id(path_page_id: int, path_property_id: int, body_key: str = None, body_value: str = None, body_version_number: int = None, body_version_message: str = None) -> Dict[str, Any]:
    """
    Update content property for page by id

    OpenAPI Description:
        Update a content property for a page by its id. 

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the page.

    Args:
    
        path_page_id (int): The ID of the page the property belongs to.
    
        path_property_id (int): The ID of the property to be updated.
    
        body_key (str): Key of the content property
    
        body_value (str): Value of the content property.
    
        body_version_number (int): Version number of the new version. Should be 1 more than the current version number.
    
        body_version_message (str): Message to be associated with the new version.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /pages/{page-id}/properties/{property-id}")

    params = {}
    data = {}
                

         
    if body_key:
      data["key"] = body_key      
    if body_value:
      data["value"] = body_value      
    if body_version_number:
      data["version_number"] = body_version_number      
    if body_version_message:
      data["version_message"] = body_version_message     

    success, response = await make_api_request(
        f"/pages/{path_page_id}/properties/{path_property_id}",
        method="PUT",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

async def delete_page_property_by_id(path_page_id: int, path_property_id: int) -> Dict[str, Any]:
    """
    Delete content property for page by id

    OpenAPI Description:
        Deletes a content property for a page by its id. 

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to edit the page.

    Args:
    
        path_page_id (int): The ID of the page the property belongs to.
    
        path_property_id (int): The ID of the property to be deleted.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /pages/{page-id}/properties/{property-id}")

    params = {}
    data = {}
        

        

    success, response = await make_api_request(
        f"/pages/{path_page_id}/properties/{path_property_id}",
        method="DELETE",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
