
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pages/{id}/descendants operations"""

import logging
from typing import Dict, Any, Optional, List
from pydantic import BaseModel
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_page_descendants(path_id: int, param_limit: int = None, param_depth: int = None, param_cursor: str = None) -> Dict[str, Any]:
    """
    Get descendants of page

    OpenAPI Description:
        Returns descendants in the content tree for a given page by ID in top-to-bottom order (that is, the highest descendant is the first
item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
of descendants to be fetched.

The following types of content will be returned:
- Database
- Embed
- Folder
- Page
- Whiteboard

This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
as:

- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission).
Permission to view the page and its corresponding space

    Args:
    
        path_id (int): The ID of the page.
    
        param_limit (int): Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.
    
        param_depth (int): Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.
    
        param_cursor (str): Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pages/{id}/descendants")

    params = {}
    data = {}
       
    params["limit"] = param_limit   
    params["depth"] = param_depth   
    params["cursor"] = param_cursor  

            

    success, response = await make_api_request(
        f"/pages/{path_id}/descendants",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
