
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /pages operations"""

import logging
from typing import Dict, Any, Optional, List
from pydantic import BaseModel
from agent_confluence.protocol_bindings.mcp_server.mcp_confluence.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_pages(param_id: List[int] = None, param_space_id: List[int] = None, param_sort: str = None, param_status: List[str] = None, param_title: str = None, param_body_format: str = None, param_subtype: str = None, param_cursor: str = None, param_limit: int = None) -> Dict[str, Any]:
    """
    Get pages

    OpenAPI Description:
        Returns all pages. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to access the Confluence site ('Can use' global permission).
Only pages that the user has permission to view will be returned.

    Args:
    
        param_id (List[int]): Filter the results based on page ids. Multiple page ids can be specified as a comma-separated list.
    
        param_space_id (List[int]): Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.
    
        param_sort (str): Used to sort the result by a particular field.
    
        param_status (List[str]): Filter the results to pages based on their status. By default, `current` and `archived` are used.
    
        param_title (str): Filter the results to pages based on their title.
    
        param_body_format (str): The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
    
        param_subtype (str): Filter the results to pages based on their subtype.
    
        param_cursor (str): Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.
    
        param_limit (int): Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /pages")

    params = {}
    data = {}
     
    params["id"] = param_id   
    params["space-id"] = param_space_id   
    params["sort"] = param_sort   
    params["status"] = param_status   
    params["title"] = param_title   
    params["body-format"] = param_body_format   
    params["subtype"] = param_subtype   
    params["cursor"] = param_cursor   
    params["limit"] = param_limit  

                      

    success, response = await make_api_request(
        f"/pages",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response

async def create_page(param_embedded: bool = None, param_private: bool = None, param_root_level: bool = None) -> Dict[str, Any]:
    """
    Create page

    OpenAPI Description:
        Creates a page in the space.

Pages are created as published by default unless specified as a draft in the status field. If creating a published page, the title must be specified.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the corresponding space. Permission to create a page in the space.

    Args:
    
        param_embedded (bool): Tag the content as embedded and content will be created in NCS.
    
        param_private (bool): The page will be private. Only the user who creates this page will have permission to view and edit one.
    
        param_root_level (bool): The page will be created at the root level of the space (outside the space homepage tree). If true, then a 
value may not be supplied for the `parentId` body parameter.
    

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /pages")

    params = {}
    data = {}
     
    params["embedded"] = param_embedded   
    params["private"] = param_private   
    params["root-level"] = param_root_level  

          

    success, response = await make_api_request(
        f"/pages",
        method="POST",
        params=params,
        data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
