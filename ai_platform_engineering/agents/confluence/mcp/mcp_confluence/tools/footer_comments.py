
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /footer-comments operations"""

import logging
import os
from typing import Dict, Any
from mcp_confluence.api.client import make_api_request

# Configure logging - use LOG_LEVEL from environment or default to INFO
log_level = os.getenv("LOG_LEVEL", "INFO").upper()
numeric_level = getattr(logging, log_level, logging.INFO)
logging.basicConfig(level=numeric_level)
logger = logging.getLogger("mcp_tools")


async def get_footer_comments(content_id: str, param_body_format: str = None, param_sort: str = None, param_cursor: str = None, param_limit: int = None) -> Dict[str, Any]:
    """
    Get footer comments for specific content (page, blog post, etc.)

    OpenAPI Description:
        Returns all footer comments for a specific piece of content. The number of results is limited by the `limit` parameter and additional results (if available)
will be available through the `next` URL present in the `Link` response header.

**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
Permission to view the content of the container and its corresponding space.

    Args:
        content_id (str): The ID of the content to get footer comments for (required)
        param_body_format (str): The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        param_sort (str): Used to sort the result by a particular field.
        param_cursor (str): Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.
        param_limit (int): Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug(f"Making GET request to get footer comments for content {content_id}")

    # Validate required parameters
    if not content_id or not content_id.strip():
        error_msg = "Content ID is required and cannot be empty"
        logger.error(error_msg)
        raise ValueError(error_msg)

    params = {}
    data = {}

    # Expand body content by default if not specified
    if param_body_format is None:
        params["expand"] = "body.storage"
    elif param_body_format:
        params["expand"] = param_body_format

    # Only add parameters if they have values
    if param_sort is not None:
        params["sort"] = param_sort
    if param_cursor is not None:
        params["cursor"] = param_cursor
    if param_limit is not None:
        params["limit"] = param_limit

    success, response = await make_api_request(
        f"/content/{content_id.strip()}/child/comment",
        method="GET",
        params=params,
        data=data
    )

    if not success:
        error_details = response.get('error', 'Request failed')
        error_message = f"Failed to get footer comments for content {content_id}: {error_details}"
        logger.error(error_message)
        raise Exception(error_message)
    return response

async def create_footer_comment(
    page_id: str,
    comment_body: str,
    body_representation: str = "storage",
    parent_comment_id: str = None
) -> Dict[str, Any]:
    """
    Create footer comment using Confluence Cloud REST API

    Args:
        page_id (str): ID of the page to comment on (required)
        comment_body (str): The content of the comment (required)
        body_representation (str): The format of the comment body (optional, defaults to "storage")
        parent_comment_id (str): ID of the parent comment if this is a reply (optional)

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug(f"Making POST request to create comment on page {page_id}")

    # Validate required parameters
    if not page_id or not page_id.strip():
        error_msg = "Page ID is required and cannot be empty"
        logger.error(error_msg)
        raise ValueError(error_msg)

    if not comment_body or not comment_body.strip():
        error_msg = "Comment body is required and cannot be empty"
        logger.error(error_msg)
        raise ValueError(error_msg)

    # Create the comment data using Confluence Cloud API format
    data = {
        "type": "comment",
        "container": {
            "id": page_id,
            "type": "page"
        },
        "body": {
            body_representation: {
                "value": comment_body.strip(),
                "representation": body_representation
            }
        }
    }

    # Add parent comment if this is a reply
    if parent_comment_id:
        data["ancestors"] = [{"id": parent_comment_id}]

    params = {}
    logger.debug(f"Request data: {data}")

    success, response = await make_api_request(
        "/content",
        method="POST",
        params=params,
        data=data
    )

    if not success:
        error_details = response.get('error', 'Request failed')
        error_message = f"Failed to create comment on page {page_id}: {error_details}"
        logger.error(error_message)
        raise Exception(error_message)

    logger.info(f"Comment created successfully on page {page_id} (Comment ID: {response.get('id')})")
    return response
