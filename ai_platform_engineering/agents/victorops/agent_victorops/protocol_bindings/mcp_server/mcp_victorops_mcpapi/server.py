# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

#!/usr/bin/env python3
"""
 MCP Server

This server provides a Model Context Protocol (MCP) interface to the ,
allowing large language models and AI assistants to interact with the service.
"""

import logging
import os
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP

from agent_victorops.protocol_bindings.mcp_server.mcp_victorops_mcpapi.tools import (
    api_public_v2_user,
    api_reporting_v2_incidents,
    api_public_v1_incidents,
    incidentnumber_notes_notename,
    incidentnumber_notes,
    api_public_v1_chat
)

def main():
    # Load environment variables
    load_dotenv()

    # Configure logging
    logging.basicConfig(level=logging.DEBUG)

    # Get MCP configuration from environment variables
    MCP_MODE = os.getenv("MCP_MODE", "STDIO")

    # Get host and port for server
    MCP_HOST = os.getenv("MCP_HOST", "localhost")
    MCP_PORT = int(os.getenv("MCP_PORT", "8000"))

    logging.info(f"Starting MCP server in {MCP_MODE} mode on {MCP_HOST}:{MCP_PORT}")

    # Get agent name from environment variables
    AGENT_NAME = os.getenv("AGENT_NAME", "VICTOROPS_MCPAPI Agent")
    logging.info(f"Agent name: {AGENT_NAME}")

    # Create server instance
    if MCP_MODE == "SSE":
        mcp = FastMCP(f"{AGENT_NAME} MCP Server", host=MCP_HOST, port=MCP_PORT)
    else:
        mcp = FastMCP("VICTOROPS_MCPAPI MCP Server")

    # Register api_public_v2_user tools
    mcp.tool()(api_public_v2_user.get_api_public_v2_user)

    # Register api_reporting_v2_incidents tools
    mcp.tool()(api_reporting_v2_incidents.get_api_reporting_v2_incidents)

    # Register api_public_v1_incidents tools
    mcp.tool()(api_public_v1_incidents.post_api_public_v1_incidents)

    mcp.tool()(incidentnumber_notes.get_api_public_v1_incidents_incident_number_notes)
    mcp.tool()(incidentnumber_notes.post_api_public_v1_incidents_incident_number_notes)

    mcp.tool()(incidentnumber_notes_notename.put_api_public_v1_incidents_incident_number_notes_note_name)
    mcp.tool()(incidentnumber_notes_notename.delete_api_public_v1_incidents_incident_number_notes_note_name)
    

    # Register api_public_v1_chat tools
    mcp.tool()(api_public_v1_chat.post_api_public_v1_chat)


    # Run the MCP server
    mcp.run()


if __name__ == "__main__":
    main()
