# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api-public/v1/incidents operations"""

import logging
from typing import Dict, Any, List , Optional
from ..api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_api_public_v1_incidents() -> Dict[str, Any]:
    """
        Get current incident information

        OpenAPI Description:
            Get a list of the currently open, acknowledged and recently resolved incidents.

    This API may be called a maximum of 2 times per second.


        Args:


        Returns:
            Dict[str, Any]: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api-public/v1/incidents")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api-public/v1/incidents", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def post_api_public_v1_incidents(
    body_summary: str,
    body_details: str,
    body_userName: str,
    body_targets:List[Dict[str, Any]],
    body_isMultiResponder: Optional[bool] = None,
) -> Dict[str, Any]:
    """
        Create a new incident

        OpenAPI Description:
            Create a new incident.

    This call replicates the function of our
    <a href="https://help.victorops.com/knowledge-base/manual-incident-creation/">manual incident creation process</a>.
    Monitoring tools and custom integrations
    should be configured using our
    <a href="https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/">REST Endpoint</a>.

    The "isMultiResponder" option will require a response from each paged user and escalation policy before
    paging is stopped. The option is available only to Enterprise accounts.

    This API may be called a maximum of 2 times per second.


        Args:

            body_summary (str): OpenAPI parameter corresponding to 'body_summary'

            body_details (str): OpenAPI parameter corresponding to 'body_details'

            body_userName (str): OpenAPI parameter corresponding to 'body_userName'

            body_targets (List[Dict[str, Any]]): OpenAPI parameter corresponding to 'body_targets'

            body_isMultiResponder (bool): OpenAPI parameter corresponding to 'body_isMultiResponder'


        Returns:
            Dict[str, Any]: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /api-public/v1/incidents")

    params = {}
    data = {}

    flat_body = {}
    if body_summary is not None:
        flat_body["summary"] = body_summary
    if body_details is not None:
        flat_body["details"] = body_details
    if body_userName is not None:
        flat_body["userName"] = body_userName
    if body_targets is not None:
        flat_body["targets"] = body_targets
    if body_isMultiResponder is not None:
        flat_body["isMultiResponder"] = body_isMultiResponder
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api-public/v1/incidents", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
