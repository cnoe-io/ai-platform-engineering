# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api-public/v1/chat operations"""

import logging
from typing import Dict, Any, List,Optional
from ..api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def post_api_public_v1_chat(
    body_username: str,
    body_externalUsername: str,
    body_text: str,
    body_monitoringTool: str,
    body_incidentId: Optional[float] = None,
    body_tags: Optional[List[str]] = None,
) -> Dict[str, Any]:
    """
    Send a chat message into VictorOps

    OpenAPI Description:


    Args:

        body_username (str): The user's VictorOps username.

        body_externalUsername (str): The username used in the integration application.

        body_text (str): The body of the chat message to be created.

        body_incidentId (float): When included, will link the created chat message to the provided incident's timeline.

        body_monitoringTool (str): The monitoring_tool value registered for your integration.

        body_tags (List[str]): An optional list of tags to be added to the created chat message.


    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /api-public/v1/chat")

    params = {}
    data = {}

    flat_body = {}
    if body_username is not None:
        flat_body["username"] = body_username
    if body_externalUsername is not None:
        flat_body["externalUsername"] = body_externalUsername
    if body_text is not None:
        flat_body["text"] = body_text
    if body_monitoringTool is not None:
        flat_body["monitoringTool"] = body_monitoringTool
    if body_incidentId is not None:
        flat_body["incidentId"] = body_incidentId
    if body_tags is not None:
        flat_body["tags"] = body_tags
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api-public/v1/chat", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
