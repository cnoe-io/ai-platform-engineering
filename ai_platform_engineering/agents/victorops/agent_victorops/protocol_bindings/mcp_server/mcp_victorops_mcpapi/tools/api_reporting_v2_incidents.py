# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api-reporting/v2/incidents operations"""

import logging
from typing import Dict, Any, Optional
from ..api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_api_reporting_v2_incidents(
    param_offset: Optional[int] = None,
    param_limit: Optional[int] = None,
    param_entityId: Optional[str] = None,
    param_incidentNumber: Optional[str] = None,
    param_startedAfter: Optional[str] = None,
    param_startedBefore: Optional[str] = None,
    param_host: Optional[str] = None,
    param_service: Optional[str] = None,
    param_currentPhase: Optional[str] = None,
    param_routingKey: Optional[str] = None,
) -> Dict[str, Any]:
    """
        Get/search incident history

        OpenAPI Description:
            Retrieve incident history for your company, searching over date ranges and with filtering options.

    This API may be called a maximum of once a minute.

    Incident requests are paginated with a offset and limit query string parameters.
      The query for incidents is run and offset records are skipped, after which limit records will be returned.

    The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.

    Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.

    On return, the total number of records available for that query will be returned in the payload as 'total'.


        Args:

            param_offset (int): The offset within the set of matching incidents

            param_limit (int): The maximum number of matching incidents to return (100 max)

            param_entityId (str): The entity ID involved  This is the unique identifier for the entity causing the incident.

            param_incidentNumber (str): The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50


            param_startedAfter (str): Return incidents started after this timestamp Specify the timestamp in ISO8601 format

            param_startedBefore (str): Find incidents started before this timestamp  Specify the timestamp in ISO8601 format

            param_host (str): The host involved in the incident Multiple values can be separated with commas.

            param_service (str): The service involved in the incident (if any) Multiple values can be separated with commas.

            param_currentPhase (str): The current phase of the incident "resolved", "triggered" or "acknowledged". Multiple values can be separated with commas. By default, response contains only "resolved" incidents

            param_routingKey (str): The original routing of the incident


        Returns:
            Dict[str, Any]: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api-reporting/v2/incidents")

    params = {}
    data = {}

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    if param_entityId is not None:
        params["entityId"] = str(param_entityId).lower() if isinstance(param_entityId, bool) else param_entityId

    if param_incidentNumber is not None:
        params["incidentNumber"] = (
            str(param_incidentNumber).lower() if isinstance(param_incidentNumber, bool) else param_incidentNumber
        )

    if param_startedAfter is not None:
        params["startedAfter"] = (
            str(param_startedAfter).lower() if isinstance(param_startedAfter, bool) else param_startedAfter
        )

    if param_startedBefore is not None:
        params["startedBefore"] = (
            str(param_startedBefore).lower() if isinstance(param_startedBefore, bool) else param_startedBefore
        )

    if param_host is not None:
        params["host"] = str(param_host).lower() if isinstance(param_host, bool) else param_host

    if param_service is not None:
        params["service"] = str(param_service).lower() if isinstance(param_service, bool) else param_service

    if param_currentPhase is not None:
        params["currentPhase"] = (
            str(param_currentPhase).lower() if isinstance(param_currentPhase, bool) else param_currentPhase
        )

    if param_routingKey is not None:
        params["routingKey"] = str(param_routingKey).lower() if isinstance(param_routingKey, bool) else param_routingKey

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api-reporting/v2/incidents", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
