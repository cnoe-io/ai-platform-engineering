# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api-public/v1/incidents/{incidentNumber}/notes operations"""

import logging
from typing import Dict, Any , Optional
from ..api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def get_api_public_v1_incidents_incident_number_notes(path_incidentNumber: str) -> Dict[str, Any]:
    """
        Get the notes associated with an incident

        OpenAPI Description:
            Get notes any associated with a single incident with the provided incident number.

    This API may be called a maximum of 2 times per second.


        Args:

            path_incidentNumber (str): The incident number


        Returns:
            Dict[str, Any]: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /api-public/v1/incidents/{incidentNumber}/notes")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api-public/v1/incidents/{path_incidentNumber}/notes", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def post_api_public_v1_incidents_incident_number_notes(
    path_incidentNumber: str,
    body_name: Optional[str] = None,
    body_display_name: Optional[str]  = None,
    body_json_value: Optional[Dict[str, Any]] = None,
) -> Dict[str, Any]:
    """
        Create a new Note

        OpenAPI Description:
            Create a new note.

    This API may be called a maximum of 2 times per second.


        Args:

            body_name (str): OpenAPI parameter corresponding to 'body_name'

            body_display_name (str): OpenAPI parameter corresponding to 'body_display_name'

            body_json_value (Dict[str, Any]): The note body

            path_incidentNumber (str): The incident number


        Returns:
            Dict[str, Any]: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /api-public/v1/incidents/{incidentNumber}/notes")

    params = {}
    data = {}

    flat_body = {}
    if body_name is not None:
        flat_body["name"] = body_name
    if body_display_name is not None:
        flat_body["display_name"] = body_display_name
    if body_json_value is not None:
        flat_body["json_value"] = body_json_value
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api-public/v1/incidents/{path_incidentNumber}/notes", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
