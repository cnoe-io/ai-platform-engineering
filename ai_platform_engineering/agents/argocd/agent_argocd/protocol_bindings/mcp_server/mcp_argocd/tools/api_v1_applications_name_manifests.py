# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/manifests operations"""

import logging
from typing import Dict, Any, List
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__get_manifests(
    path_name: str,
    param_revision: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
    param_sourcePositions: List[str] = None,
    param_revisions: List[str] = None,
) -> Dict[str, Any]:
    '''
    GetManifests returns application manifests.

    Args:
        path_name (str): The name of the path for the application.
        param_revision (str, optional): The revision of the application. Defaults to None.
        param_appNamespace (str, optional): The namespace of the application. Defaults to None.
        param_project (str, optional): The project associated with the application. Defaults to None.
        param_sourcePositions (List[str], optional): The source positions for the application. Defaults to None.
        param_revisions (List[str], optional): The list of revisions for the application. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the application manifests.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/manifests")

    params = {}
    data = {}

    if param_revision is not None:
        params["revision"] = str(param_revision).lower() if isinstance(param_revision, bool) else param_revision

    if param_appNamespace is not None:
        params["appNamespace"] = (
            str(param_appNamespace).lower() if isinstance(param_appNamespace, bool) else param_appNamespace
        )

    if param_project is not None:
        params["project"] = str(param_project).lower() if isinstance(param_project, bool) else param_project

    if param_sourcePositions is not None:
        params["sourcePositions"] = (
            str(param_sourcePositions).lower() if isinstance(param_sourcePositions, bool) else param_sourcePositions
        )

    if param_revisions is not None:
        params["revisions"] = str(param_revisions).lower() if isinstance(param_revisions, bool) else param_revisions

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/manifests", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response