
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/clusters operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def clusterservice_list(server: str = None, name: str = None, id_type: str = None, id_value: str = None) -> Dict[str, Any]:
    '''
    Retrieves a list of clusters based on the provided filter criteria.

    Args:
        server (str, optional): The server address to filter clusters. Defaults to None.
        name (str, optional): The name of the cluster to filter by. Defaults to None.
        id_type (str, optional): The type of identifier to filter clusters (e.g., 'uuid', 'name'). Defaults to None.
        id_value (str, optional): The value of the identifier to filter clusters. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the list of clusters matching the filter criteria, or an error message if the request fails.

    Raises:
        Exception: If there is an unexpected error during the API request.
    '''
    logger.debug("Making GET request to /api/v1/clusters")
    params = {}
    
    if server is not None:
      params["server"] = server
    
    if name is not None:
      params["name"] = name
    
    if id_type is not None:
      params["id_type"] = id_type
    
    if id_value is not None:
      params["id_value"] = id_value
    
    data = None

    success, response = await make_api_request(
        "/api/v1/clusters",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def clusterservice_create(body: str, upsert: str = None) -> Dict[str, Any]:
    '''
    Creates a new cluster.

    Args:
        body (str): The request body containing cluster configuration in JSON format.
        upsert (str, optional): If set, allows upserting an existing cluster. Defaults to None.

    Returns:
        Dict[str, Any]: The response from the cluster creation API, including cluster details or error information.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/clusters")
    params = {}
    
    if body is not None:
      params["body"] = body
    
    if upsert is not None:
      params["upsert"] = upsert
    
    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/clusters",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
