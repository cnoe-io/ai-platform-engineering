# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name} operations"""

import logging
from typing import Dict, Any, List
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__get(
    path_name: str,
    param_refresh: str = None,
    param_projects: List[str] = None,
    param_resourceVersion: str = None,
    param_selector: str = None,
    param_repo: str = None,
    param_appNamespace: str = None,
    param_project: List[str] = None,
) -> Dict[str, Any]:
    '''
    Get returns an application by name.

    Args:
        path_name (str): The application's name.
        param_refresh (str, optional): Forces application reconciliation if set to 'hard'. Defaults to None.
        param_projects (List[str], optional): The project names to restrict returned list applications. Defaults to None.
        param_resourceVersion (str, optional): When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to None.
        param_selector (str, optional): The selector to restrict returned list to applications only with matched labels. Defaults to None.
        param_repo (str, optional): The repoURL to restrict returned list applications. Defaults to None.
        param_appNamespace (str, optional): The application's namespace. Defaults to None.
        param_project (List[str], optional): The project names to restrict returned list applications (legacy name for backwards-compatibility). Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}")

    params = {}
    data = {}

    if param_refresh is not None:
        params["refresh"] = str(param_refresh).lower() if isinstance(param_refresh, bool) else param_refresh

    if param_projects is not None:
        params["projects"] = str(param_projects).lower() if isinstance(param_projects, bool) else param_projects

    if param_resourceVersion is not None:
        params["resourceVersion"] = (
            str(param_resourceVersion).lower() if isinstance(param_resourceVersion, bool) else param_resourceVersion
        )

    if param_selector is not None:
        params["selector"] = str(param_selector).lower() if isinstance(param_selector, bool) else param_selector

    if param_repo is not None:
        params["repo"] = str(param_repo).lower() if isinstance(param_repo, bool) else param_repo

    if param_appNamespace is not None:
        params["appNamespace"] = (
            str(param_appNamespace).lower() if isinstance(param_appNamespace, bool) else param_appNamespace
        )

    if param_project is not None:
        params["project"] = str(param_project).lower() if isinstance(param_project, bool) else param_project

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_service__delete(
    path_name: str,
    param_cascade: bool = False,
    param_propagationPolicy: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    Deletes an application using the specified parameters.

    Args:
        path_name (str): The name of the application to delete.
        param_cascade (bool, optional): If set to True, the deletion will cascade. Defaults to False.
        param_propagationPolicy (str, optional): The policy for propagating the deletion. Defaults to None.
        param_appNamespace (str, optional): The namespace of the application. Defaults to None.
        param_project (str, optional): The project associated with the application. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the deletion operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/applications/{name}")

    params = {}
    data = {}

    if param_cascade is not None:
        params["cascade"] = str(param_cascade).lower() if isinstance(param_cascade, bool) else param_cascade

    if param_propagationPolicy is not None:
        params["propagationPolicy"] = (
            str(param_propagationPolicy).lower()
            if isinstance(param_propagationPolicy, bool)
            else param_propagationPolicy
        )

    if param_appNamespace is not None:
        params["appNamespace"] = (
            str(param_appNamespace).lower() if isinstance(param_appNamespace, bool) else param_appNamespace
        )

    if param_project is not None:
        params["project"] = str(param_project).lower() if isinstance(param_project, bool) else param_project

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}", method="DELETE", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response