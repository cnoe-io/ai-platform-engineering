# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/rollback operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__rollback(
    path_name: str,
    body_appNamespace: str = None,
    body_dryRun: bool = None,
    body_id: int = None,
    body_name: str = None,
    body_project: str = None,
    body_prune: bool = None,
) -> Dict[str, Any]:
    '''
    Rollback syncs an application to its target state.

    Args:
        path_name (str): The name of the application path to rollback.
        body_appNamespace (str, optional): The namespace of the application. Defaults to None.
        body_dryRun (bool, optional): If true, the rollback will be simulated but not executed. Defaults to None.
        body_id (int, optional): The unique identifier of the application. Defaults to None.
        body_name (str, optional): The name of the application. Defaults to None.
        body_project (str, optional): The project to which the application belongs. Defaults to None.
        body_prune (bool, optional): If true, resources not defined in the target state will be deleted. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the rollback operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/applications/{name}/rollback")

    params = {}
    data = {}

    flat_body = {}
    if body_appNamespace is not None:
        flat_body["appNamespace"] = body_appNamespace
    if body_dryRun is not None:
        flat_body["dryRun"] = body_dryRun
    if body_id is not None:
        flat_body["id"] = body_id
    if body_name is not None:
        flat_body["name"] = body_name
    if body_project is not None:
        flat_body["project"] = body_project
    if body_prune is not None:
        flat_body["prune"] = body_prune
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/rollback", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response