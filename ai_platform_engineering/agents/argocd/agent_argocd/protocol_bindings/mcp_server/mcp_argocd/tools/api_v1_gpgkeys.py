# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/gpgkeys operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def gpg_key_service__list(param_keyID: str = None) -> Dict[str, Any]:
    '''
    List all available repository certificates.

    Args:
        param_keyID (str, optional): The GPG key ID to query for. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/gpgkeys")

    params = {}
    data = {}

    if param_keyID is not None:
        params["keyID"] = str(param_keyID).lower() if isinstance(param_keyID, bool) else param_keyID

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/gpgkeys", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def gpg_key_service__create(
    body_fingerprint: str = None,
    body_keyData: str = None,
    body_keyID: str = None,
    body_owner: str = None,
    body_subType: str = None,
    body_trust: str = None,
    param_upsert: bool = False,
) -> Dict[str, Any]:
    '''
    Create one or more GPG public keys in the server's configuration.

    Args:
        body_fingerprint (str, optional): The fingerprint of the GPG key. Defaults to None.
        body_keyData (str, optional): The actual key data of the GPG key. Defaults to None.
        body_keyID (str, optional): The ID of the GPG key. Defaults to None.
        body_owner (str, optional): The owner of the GPG key. Defaults to None.
        body_subType (str, optional): The subtype of the GPG key. Defaults to None.
        body_trust (str, optional): The trust level of the GPG key. Defaults to None.
        param_upsert (bool, optional): Whether to upsert already existing public keys. Defaults to False.

    Returns:
        Dict[str, Any]: The JSON response from the API call, containing the result of the operation.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/gpgkeys")

    params = {}
    data = {}

    if param_upsert is not None:
        params["upsert"] = str(param_upsert).lower() if isinstance(param_upsert, bool) else param_upsert

    flat_body = {}
    if body_fingerprint is not None:
        flat_body["fingerprint"] = body_fingerprint
    if body_keyData is not None:
        flat_body["keyData"] = body_keyData
    if body_keyID is not None:
        flat_body["keyID"] = body_keyID
    if body_owner is not None:
        flat_body["owner"] = body_owner
    if body_subType is not None:
        flat_body["subType"] = body_subType
    if body_trust is not None:
        flat_body["trust"] = body_trust
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/gpgkeys", method="POST", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def gpg_key_service__delete(param_keyID: str = None) -> Dict[str, Any]:
    '''
    Delete specified GPG public key from the server's configuration.

    Args:
        param_keyID (str, optional): The GPG key ID to query for. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making DELETE request to /api/v1/gpgkeys")

    params = {}
    data = {}

    if param_keyID is not None:
        params["keyID"] = str(param_keyID).lower() if isinstance(param_keyID, bool) else param_keyID

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/api/v1/gpgkeys", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response