# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications/{name}/resource/actions operations"""

import logging
from typing import Dict, Any, List
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_service__list_resource_actions(
    path_name: str,
    param_namespace: str = None,
    param_resourceName: str = None,
    param_version: str = None,
    param_group: str = None,
    param_kind: str = None,
    param_appNamespace: str = None,
    param_project: str = None,
) -> Dict[str, Any]:
    '''
    ListResourceActions returns a list of resource actions for a specified application.

    Args:
        path_name (str): The name of the application for which resource actions are being requested.
        param_namespace (str, optional): The namespace of the resource. Defaults to None.
        param_resourceName (str, optional): The name of the resource. Defaults to None.
        param_version (str, optional): The version of the resource. Defaults to None.
        param_group (str, optional): The group of the resource. Defaults to None.
        param_kind (str, optional): The kind of the resource. Defaults to None.
        param_appNamespace (str, optional): The application namespace. Defaults to None.
        param_project (str, optional): The project associated with the resource. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call containing the list of resource actions.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making GET request to /api/v1/applications/{name}/resource/actions")

    params = {}
    data = {}

    if param_namespace is not None:
        params["namespace"] = str(param_namespace).lower() if isinstance(param_namespace, bool) else param_namespace

    if param_resourceName is not None:
        params["resourceName"] = (
            str(param_resourceName).lower() if isinstance(param_resourceName, bool) else param_resourceName
        )

    if param_version is not None:
        params["version"] = str(param_version).lower() if isinstance(param_version, bool) else param_version

    if param_group is not None:
        params["group"] = str(param_group).lower() if isinstance(param_group, bool) else param_group

    if param_kind is not None:
        params["kind"] = str(param_kind).lower() if isinstance(param_kind, bool) else param_kind

    if param_appNamespace is not None:
        params["appNamespace"] = (
            str(param_appNamespace).lower() if isinstance(param_appNamespace, bool) else param_appNamespace
        )

    if param_project is not None:
        params["project"] = str(param_project).lower() if isinstance(param_project, bool) else param_project

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/resource/actions", method="GET", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def application_service__run_resource_action(
    path_name: str,
    body_action: str = None,
    body_appNamespace: str = None,
    body_group: str = None,
    body_kind: str = None,
    body_name: str = None,
    body_namespace: str = None,
    body_project: str = None,
    body_resourceActionParameters: List[str] = None,
    body_resourceName: str = None,
    body_version: str = None,
) -> Dict[str, Any]:
    '''
    Run a resource action for a specified application.

    Args:
        path_name (str): The name of the application path.
        body_action (str, optional): The action to be performed on the resource. Defaults to None.
        body_appNamespace (str, optional): The namespace of the application. Defaults to None.
        body_group (str, optional): The group of the resource. Defaults to None.
        body_kind (str, optional): The kind of the resource. Defaults to None.
        body_name (str, optional): The name of the resource. Defaults to None.
        body_namespace (str, optional): The namespace of the resource. Defaults to None.
        body_project (str, optional): The project associated with the resource. Defaults to None.
        body_resourceActionParameters (List[str], optional): Parameters for the resource action. Defaults to None.
        body_resourceName (str, optional): The name of the resource to act upon. Defaults to None.
        body_version (str, optional): The version of the resource. Defaults to None.

    Returns:
        Dict[str, Any]: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    '''
    logger.debug("Making POST request to /api/v1/applications/{name}/resource/actions")

    params = {}
    data = {}

    flat_body = {}
    if body_action is not None:
        flat_body["action"] = body_action
    if body_appNamespace is not None:
        flat_body["appNamespace"] = body_appNamespace
    if body_group is not None:
        flat_body["group"] = body_group
    if body_kind is not None:
        flat_body["kind"] = body_kind
    if body_name is not None:
        flat_body["name"] = body_name
    if body_namespace is not None:
        flat_body["namespace"] = body_namespace
    if body_project is not None:
        flat_body["project"] = body_project
    if body_resourceActionParameters is not None:
        flat_body["resourceActionParameters"] = body_resourceActionParameters
    if body_resourceName is not None:
        flat_body["resourceName"] = body_resourceName
    if body_version is not None:
        flat_body["version"] = body_version
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/applications/{path_name}/resource/actions", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response