# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/repositories/{source.repoURL}/appdetails operations"""

import logging
from typing import Dict, Any, List
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def repository_service__get_app_details(
    path_source_repoURL: str,
    body_appName: str = None,
    body_appProject: str = None,
    body_source_chart: str = None,
    body_source_directory_exclude: str = None,
    body_source_directory_include: str = None,
    body_source_directory_jsonnet_extVars: List[str] = None,
    body_source_directory_jsonnet_libs: List[str] = None,
    body_source_directory_jsonnet_tlas: List[str] = None,
    body_source_directory_recurse: bool = None,
    body_source_helm_apiVersions: List[str] = None,
    body_source_helm_fileParameters: List[str] = None,
    body_source_helm_ignoreMissingValueFiles: bool = None,
    body_source_helm_kubeVersion: str = None,
    body_source_helm_namespace: str = None,
    body_source_helm_parameters: List[str] = None,
    body_source_helm_passCredentials: bool = None,
    body_source_helm_releaseName: str = None,
    body_source_helm_skipCrds: bool = None,
    body_source_helm_skipSchemaValidation: bool = None,
    body_source_helm_skipTests: bool = None,
    body_source_helm_valueFiles: List[str] = None,
    body_source_helm_values: str = None,
    body_source_helm_valuesObject_raw: str = None,
    body_source_helm_version: str = None,
    body_source_kustomize_apiVersions: List[str] = None,
    body_source_kustomize_commonAnnotations: Dict[str, Any] = None,
    body_source_kustomize_commonAnnotationsEnvsubst: bool = None,
    body_source_kustomize_commonLabels: Dict[str, Any] = None,
    body_source_kustomize_components: List[str] = None,
    body_source_kustomize_forceCommonAnnotations: bool = None,
    body_source_kustomize_forceCommonLabels: bool = None,
    body_source_kustomize_ignoreMissingComponents: bool = None,
    body_source_kustomize_images: List[str] = None,
    body_source_kustomize_kubeVersion: str = None,
    body_source_kustomize_labelIncludeTemplates: bool = None,
    body_source_kustomize_labelWithoutSelector: bool = None,
    body_source_kustomize_namePrefix: str = None,
    body_source_kustomize_nameSuffix: str = None,
    body_source_kustomize_namespace: str = None,
    body_source_kustomize_patches: List[str] = None,
    body_source_kustomize_replicas: List[str] = None,
    body_source_kustomize_version: str = None,
    body_source_name: str = None,
    body_source_path: str = None,
    body_source_plugin_env: List[str] = None,
    body_source_plugin_name: str = None,
    body_source_plugin_parameters: List[str] = None,
    body_source_ref: str = None,
    body_source_repoURL: str = None,
    body_source_targetRevision: str = None,
    body_sourceIndex: int = None,
    body_versionId: int = None,
) -> Dict[str, Any]:
    """
        GetAppDetails returns application details by given path

        OpenAPI Description:


        Args:

            path_source_repoURL (str): RepoURL is the URL to the repository (Git or Helm) that contains the application manifests

            body_appName (str): OpenAPI parameter corresponding to 'body_appName'

            body_appProject (str): OpenAPI parameter corresponding to 'body_appProject'

            body_source_chart (str): Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.

            body_source_directory_exclude (str): OpenAPI parameter corresponding to 'body_source_directory_exclude'

            body_source_directory_include (str): OpenAPI parameter corresponding to 'body_source_directory_include'

            body_source_directory_jsonnet_extVars (List[str]): OpenAPI parameter corresponding to 'body_source_directory_jsonnet_extVars'

            body_source_directory_jsonnet_libs (List[str]): OpenAPI parameter corresponding to 'body_source_directory_jsonnet_libs'

            body_source_directory_jsonnet_tlas (List[str]): OpenAPI parameter corresponding to 'body_source_directory_jsonnet_tlas'

            body_source_directory_recurse (bool): OpenAPI parameter corresponding to 'body_source_directory_recurse'

            body_source_helm_apiVersions (List[str]): APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
    Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.

            body_source_helm_fileParameters (List[str]): OpenAPI parameter corresponding to 'body_source_helm_fileParameters'

            body_source_helm_ignoreMissingValueFiles (bool): OpenAPI parameter corresponding to 'body_source_helm_ignoreMissingValueFiles'

            body_source_helm_kubeVersion (str): KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
    uses the Kubernetes version of the target cluster.

            body_source_helm_namespace (str): Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.

            body_source_helm_parameters (List[str]): OpenAPI parameter corresponding to 'body_source_helm_parameters'

            body_source_helm_passCredentials (bool): OpenAPI parameter corresponding to 'body_source_helm_passCredentials'

            body_source_helm_releaseName (str): OpenAPI parameter corresponding to 'body_source_helm_releaseName'

            body_source_helm_skipCrds (bool): OpenAPI parameter corresponding to 'body_source_helm_skipCrds'

            body_source_helm_skipSchemaValidation (bool): OpenAPI parameter corresponding to 'body_source_helm_skipSchemaValidation'

            body_source_helm_skipTests (bool): SkipTests skips test manifest installation step (Helm's --skip-tests).

            body_source_helm_valueFiles (List[str]): OpenAPI parameter corresponding to 'body_source_helm_valueFiles'

            body_source_helm_values (str): OpenAPI parameter corresponding to 'body_source_helm_values'

            body_source_helm_valuesObject_raw (str): Raw is the underlying serialization of this object.

    TODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.

            body_source_helm_version (str): OpenAPI parameter corresponding to 'body_source_helm_version'

            body_source_kustomize_apiVersions (List[str]): APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
    Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.

            body_source_kustomize_commonAnnotations (Dict[str, Any]): OpenAPI parameter corresponding to 'body_source_kustomize_commonAnnotations'

            body_source_kustomize_commonAnnotationsEnvsubst (bool): OpenAPI parameter corresponding to 'body_source_kustomize_commonAnnotationsEnvsubst'

            body_source_kustomize_commonLabels (Dict[str, Any]): OpenAPI parameter corresponding to 'body_source_kustomize_commonLabels'

            body_source_kustomize_components (List[str]): OpenAPI parameter corresponding to 'body_source_kustomize_components'

            body_source_kustomize_forceCommonAnnotations (bool): OpenAPI parameter corresponding to 'body_source_kustomize_forceCommonAnnotations'

            body_source_kustomize_forceCommonLabels (bool): OpenAPI parameter corresponding to 'body_source_kustomize_forceCommonLabels'

            body_source_kustomize_ignoreMissingComponents (bool): OpenAPI parameter corresponding to 'body_source_kustomize_ignoreMissingComponents'

            body_source_kustomize_images (List[str]): OpenAPI parameter corresponding to 'body_source_kustomize_images'

            body_source_kustomize_kubeVersion (str): KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
    uses the Kubernetes version of the target cluster.

            body_source_kustomize_labelIncludeTemplates (bool): OpenAPI parameter corresponding to 'body_source_kustomize_labelIncludeTemplates'

            body_source_kustomize_labelWithoutSelector (bool): OpenAPI parameter corresponding to 'body_source_kustomize_labelWithoutSelector'

            body_source_kustomize_namePrefix (str): OpenAPI parameter corresponding to 'body_source_kustomize_namePrefix'

            body_source_kustomize_nameSuffix (str): OpenAPI parameter corresponding to 'body_source_kustomize_nameSuffix'

            body_source_kustomize_namespace (str): OpenAPI parameter corresponding to 'body_source_kustomize_namespace'

            body_source_kustomize_patches (List[str]): OpenAPI parameter corresponding to 'body_source_kustomize_patches'

            body_source_kustomize_replicas (List[str]): OpenAPI parameter corresponding to 'body_source_kustomize_replicas'

            body_source_kustomize_version (str): OpenAPI parameter corresponding to 'body_source_kustomize_version'

            body_source_name (str): Name is used to refer to a source and is displayed in the UI. It is used in multi-source Applications.

            body_source_path (str): Path is a directory path within the Git repository, and is only valid for applications sourced from Git.

            body_source_plugin_env (List[str]): OpenAPI parameter corresponding to 'body_source_plugin_env'

            body_source_plugin_name (str): OpenAPI parameter corresponding to 'body_source_plugin_name'

            body_source_plugin_parameters (List[str]): OpenAPI parameter corresponding to 'body_source_plugin_parameters'

            body_source_ref (str): Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.

            body_source_repoURL (str): OpenAPI parameter corresponding to 'body_source_repoURL'

            body_source_targetRevision (str): TargetRevision defines the revision of the source to sync the application to.
    In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
    In case of Helm, this is a semver tag for the Chart's version.

            body_sourceIndex (int): OpenAPI parameter corresponding to 'body_sourceIndex'

            body_versionId (int): OpenAPI parameter corresponding to 'body_versionId'


        Returns:
            Dict[str, Any]: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making POST request to /api/v1/repositories/{source.repoURL}/appdetails")

    params = {}
    data = {}

    flat_body = {}
    if body_appName is not None:
        flat_body["appName"] = body_appName
    if body_appProject is not None:
        flat_body["appProject"] = body_appProject
    if body_source_chart is not None:
        flat_body["source_chart"] = body_source_chart
    if body_source_directory_exclude is not None:
        flat_body["source_directory_exclude"] = body_source_directory_exclude
    if body_source_directory_include is not None:
        flat_body["source_directory_include"] = body_source_directory_include
    if body_source_directory_jsonnet_extVars is not None:
        flat_body["source_directory_jsonnet_extVars"] = body_source_directory_jsonnet_extVars
    if body_source_directory_jsonnet_libs is not None:
        flat_body["source_directory_jsonnet_libs"] = body_source_directory_jsonnet_libs
    if body_source_directory_jsonnet_tlas is not None:
        flat_body["source_directory_jsonnet_tlas"] = body_source_directory_jsonnet_tlas
    if body_source_directory_recurse is not None:
        flat_body["source_directory_recurse"] = body_source_directory_recurse
    if body_source_helm_apiVersions is not None:
        flat_body["source_helm_apiVersions"] = body_source_helm_apiVersions
    if body_source_helm_fileParameters is not None:
        flat_body["source_helm_fileParameters"] = body_source_helm_fileParameters
    if body_source_helm_ignoreMissingValueFiles is not None:
        flat_body["source_helm_ignoreMissingValueFiles"] = body_source_helm_ignoreMissingValueFiles
    if body_source_helm_kubeVersion is not None:
        flat_body["source_helm_kubeVersion"] = body_source_helm_kubeVersion
    if body_source_helm_namespace is not None:
        flat_body["source_helm_namespace"] = body_source_helm_namespace
    if body_source_helm_parameters is not None:
        flat_body["source_helm_parameters"] = body_source_helm_parameters
    if body_source_helm_passCredentials is not None:
        flat_body["source_helm_passCredentials"] = body_source_helm_passCredentials
    if body_source_helm_releaseName is not None:
        flat_body["source_helm_releaseName"] = body_source_helm_releaseName
    if body_source_helm_skipCrds is not None:
        flat_body["source_helm_skipCrds"] = body_source_helm_skipCrds
    if body_source_helm_skipSchemaValidation is not None:
        flat_body["source_helm_skipSchemaValidation"] = body_source_helm_skipSchemaValidation
    if body_source_helm_skipTests is not None:
        flat_body["source_helm_skipTests"] = body_source_helm_skipTests
    if body_source_helm_valueFiles is not None:
        flat_body["source_helm_valueFiles"] = body_source_helm_valueFiles
    if body_source_helm_values is not None:
        flat_body["source_helm_values"] = body_source_helm_values
    if body_source_helm_valuesObject_raw is not None:
        flat_body["source_helm_valuesObject_raw"] = body_source_helm_valuesObject_raw
    if body_source_helm_version is not None:
        flat_body["source_helm_version"] = body_source_helm_version
    if body_source_kustomize_apiVersions is not None:
        flat_body["source_kustomize_apiVersions"] = body_source_kustomize_apiVersions
    if body_source_kustomize_commonAnnotations is not None:
        flat_body["source_kustomize_commonAnnotations"] = body_source_kustomize_commonAnnotations
    if body_source_kustomize_commonAnnotationsEnvsubst is not None:
        flat_body["source_kustomize_commonAnnotationsEnvsubst"] = body_source_kustomize_commonAnnotationsEnvsubst
    if body_source_kustomize_commonLabels is not None:
        flat_body["source_kustomize_commonLabels"] = body_source_kustomize_commonLabels
    if body_source_kustomize_components is not None:
        flat_body["source_kustomize_components"] = body_source_kustomize_components
    if body_source_kustomize_forceCommonAnnotations is not None:
        flat_body["source_kustomize_forceCommonAnnotations"] = body_source_kustomize_forceCommonAnnotations
    if body_source_kustomize_forceCommonLabels is not None:
        flat_body["source_kustomize_forceCommonLabels"] = body_source_kustomize_forceCommonLabels
    if body_source_kustomize_ignoreMissingComponents is not None:
        flat_body["source_kustomize_ignoreMissingComponents"] = body_source_kustomize_ignoreMissingComponents
    if body_source_kustomize_images is not None:
        flat_body["source_kustomize_images"] = body_source_kustomize_images
    if body_source_kustomize_kubeVersion is not None:
        flat_body["source_kustomize_kubeVersion"] = body_source_kustomize_kubeVersion
    if body_source_kustomize_labelIncludeTemplates is not None:
        flat_body["source_kustomize_labelIncludeTemplates"] = body_source_kustomize_labelIncludeTemplates
    if body_source_kustomize_labelWithoutSelector is not None:
        flat_body["source_kustomize_labelWithoutSelector"] = body_source_kustomize_labelWithoutSelector
    if body_source_kustomize_namePrefix is not None:
        flat_body["source_kustomize_namePrefix"] = body_source_kustomize_namePrefix
    if body_source_kustomize_nameSuffix is not None:
        flat_body["source_kustomize_nameSuffix"] = body_source_kustomize_nameSuffix
    if body_source_kustomize_namespace is not None:
        flat_body["source_kustomize_namespace"] = body_source_kustomize_namespace
    if body_source_kustomize_patches is not None:
        flat_body["source_kustomize_patches"] = body_source_kustomize_patches
    if body_source_kustomize_replicas is not None:
        flat_body["source_kustomize_replicas"] = body_source_kustomize_replicas
    if body_source_kustomize_version is not None:
        flat_body["source_kustomize_version"] = body_source_kustomize_version
    if body_source_name is not None:
        flat_body["source_name"] = body_source_name
    if body_source_path is not None:
        flat_body["source_path"] = body_source_path
    if body_source_plugin_env is not None:
        flat_body["source_plugin_env"] = body_source_plugin_env
    if body_source_plugin_name is not None:
        flat_body["source_plugin_name"] = body_source_plugin_name
    if body_source_plugin_parameters is not None:
        flat_body["source_plugin_parameters"] = body_source_plugin_parameters
    if body_source_ref is not None:
        flat_body["source_ref"] = body_source_ref
    if body_source_repoURL is not None:
        flat_body["source_repoURL"] = body_source_repoURL
    if body_source_targetRevision is not None:
        flat_body["source_targetRevision"] = body_source_targetRevision
    if body_sourceIndex is not None:
        flat_body["sourceIndex"] = body_sourceIndex
    if body_versionId is not None:
        flat_body["versionId"] = body_versionId
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(
        f"/api/v1/repositories/{path_source_repoURL}/appdetails", method="POST", params=params, data=data
    )

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
