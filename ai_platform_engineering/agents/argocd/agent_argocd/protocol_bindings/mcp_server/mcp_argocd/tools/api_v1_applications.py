
# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applications operations"""

import logging
from typing import Dict, Any
from agent_argocd.protocol_bindings.mcp_server.mcp_argocd.api.client import make_api_request

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def applicationservice_list(
    name: str = None,
    refresh: str = None,
    projects: str = None,
    resourceVersion: str = None,
    selector: str = None,
    repo: str = None,
    appNamespace: str = None,
    project: str = None
  ) -> Dict[str, Any]:
    '''
    Retrieves a list of applications based on the provided filter criteria.

    Args:
        name (str, optional): Filter applications by name. Defaults to None.
        refresh (str, optional): If set, refreshes the application list cache. Defaults to None.
        projects (str, optional): Comma-separated list of project names to filter applications. Defaults to None.
        resourceVersion (str, optional): Filter by resource version. Defaults to None.
        selector (str, optional): Label selector to filter applications. Defaults to None.
        repo (str, optional): Filter applications by repository URL. Defaults to None.
        appNamespace (str, optional): Filter applications by namespace. Defaults to None.
        project (str, optional): Filter applications by project name. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the list of applications or an error message.

    Raises:
        Exception: If the API request fails due to network issues or server errors.
    '''
    logger.debug("Making GET request to /api/v1/applications")
    params = {}

    if name is not None:
      params["name"] = name

    if refresh is not None:
      params["refresh"] = refresh

    if projects is not None:
      params["projects"] = projects

    if resourceVersion is not None:
      params["resourceVersion"] = resourceVersion

    if selector is not None:
      params["selector"] = selector

    if repo is not None:
      params["repo"] = repo

    if appNamespace is not None:
      params["appNamespace"] = appNamespace

    if project is not None:
      params["project"] = project

    data = None

    success, response = await make_api_request(
        "/api/v1/applications",
        method="GET",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response


async def applicationservice_create(body: str, upsert: str = None, validate: str = None) -> Dict[str, Any]:
    '''
    Creates a new application.

    Args:
        body (str): The application definition in JSON or YAML format.
        upsert (str, optional): If set, allows updating an existing application if it already exists. Defaults to None.
        validate (str, optional): If set, validates the application definition without creating it. Defaults to None.

    Returns:
        Dict[str, Any]: The response from the API containing details of the created application or an error message.

    Raises:
        Exception: If the API request fails or returns an unexpected error.
    '''
    logger.debug("Making POST request to /api/v1/applications")
    params = {}

    if body is not None:
      params["body"] = body

    if upsert is not None:
      params["upsert"] = upsert

    if validate is not None:
      params["validate"] = validate

    data = None

    # Add parameters to request
    if body is not None:
        data = body

    success, response = await make_api_request(
        "/api/v1/applications",
        method="POST",
        params=params,
        data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get('error', 'Request failed')}
    return response
