# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /api/v1/applicationsets/generate operations"""

import logging
from typing import Dict, Any
from mcp_argocd.api.client import make_api_request, assemble_nested_body

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("mcp_tools")


async def application_set_service__generate(
    generators: list,
    template: dict,
    applicationSet_metadata_labels: dict = None,
    applicationSet_metadata_annotations: dict = None,
) -> Dict[str, Any]:
    """
    Generate an application set service.

    Args:
        generators (list): List of generator definitions (required).
        template (dict): Application template definition (required).
        applicationSet_metadata_labels (dict, optional): Metadata labels for the ApplicationSet.
        applicationSet_metadata_annotations (dict, optional): Metadata annotations for the ApplicationSet.

    Returns:
        Dict[str, Any]: The JSON response from the API call.
    """
    # Prompt:
    # "Generate an application set with a single in-cluster generator and a basic template:
    # await application_set_service__generate(
    #     generators=[{'list': {'elements': [{'cluster': 'in-cluster', 'url': 'https://kubernetes.default.svc'}]}}],
    #     template={
    #         'metadata': {'name': 'my-app'},
    #         'spec': {
    #             'project': 'default',
    #             'source': {'repoURL': 'https://github.com/org/repo', 'path': 'app'},
    #             'destination': {'server': 'https://kubernetes.default.svc', 'namespace': 'default'}
    #         }
    #     }
    # )

    # Generate an application set with extra metadata labels:
    # await application_set_service__generate(
    #     generators=[...],
    #     template={...},
    #     applicationSet_metadata_labels={'env': 'prod'}
    # )"

    logger.debug(
        "Making POST request to /api/v1/applicationsets/generate with generators: %s, template: %s, labels: %s, annotations: %s",
        generators, template, applicationSet_metadata_labels, applicationSet_metadata_annotations
    )
    # Build the minimal required body
    body = {
        "applicationSet_spec_generators": generators,
        "applicationSet_spec_template": template,
    }
    if applicationSet_metadata_labels is not None:
        body["applicationSet_metadata_labels"] = applicationSet_metadata_labels
    if applicationSet_metadata_annotations is not None:
        body["applicationSet_metadata_annotations"] = applicationSet_metadata_annotations

    data = assemble_nested_body(body)
    success, response = await make_api_request(
        "/api/v1/applicationsets/generate", method="POST", params={}, data=data
    )
    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response