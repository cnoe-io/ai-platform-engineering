# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

#!/usr/bin/env python3
"""
 MCP Server

This server provides a Model Context Protocol (MCP) interface to the ,
allowing large language models and AI assistants to interact with the service.
"""

import logging
import os
from dotenv import load_dotenv
from fastmcp import FastMCP

from mcp_argocd.tools import api_v1_account_can_i_resource_action_subresource

# Due to the fact that the token/password may be read by LLM,
# we are not exposing the token creation and deletion tools
# Note: Only expose these tools at your own risk
#from mcp_argocd.tools import api_v1_account_name_token_id
#from mcp_argocd.tools import api_v1_account_name_token
#from mcp_argocd.tools import api_v1_account_password

from mcp_argocd.tools import api_v1_account_name

from mcp_argocd.tools import api_v1_account

from mcp_argocd.tools import api_v1_applications

from mcp_argocd.tools import api_version

# TODO: These tools are not working as expected, need to fix them
# ERROR:  Input is too long for requested model.
# from mcp_argocd.tools import api_v1_applications_application_name_managed_resources
# from mcp_argocd.tools import api_v1_applications_application_name_resource_tree

from mcp_argocd.tools import api_v1_applications_name_events
from mcp_argocd.tools import api_v1_applications_name_links

from mcp_argocd.tools import api_v1_applications_name_logs

# Projects
from mcp_argocd.tools import api_v1_projects

# ApplicationSets
from mcp_argocd.tools import api_v1_applicationsets_generate
from mcp_argocd.tools import api_v1_applicationsets
from mcp_argocd.tools import api_v1_applicationsets_name

# Certificates
from mcp_argocd.tools import api_v1_certificates

# Clusters
from mcp_argocd.tools import api_v1_clusters
from mcp_argocd.tools import api_v1_clusters_id_value

# GPG Keys
from mcp_argocd.tools import api_v1_gpgkeys
from mcp_argocd.tools import api_v1_gpgkeys_keyid

def main():
    # Load environment variables
    load_dotenv()

    # Configure logging
    logging.basicConfig(level=logging.DEBUG)

    # Get MCP configuration from environment variables
    MCP_MODE = os.getenv("MCP_MODE", "STDIO")

    # Get host and port for server
    MCP_HOST = os.getenv("MCP_HOST", "localhost")
    MCP_PORT = int(os.getenv("MCP_PORT", "8000"))

    logging.info(f"Starting MCP server in {MCP_MODE} mode on {MCP_HOST}:{MCP_PORT}")

    # Get server name from environment variables
    SERVER_NAME = os.getenv("SERVER_NAME", "ArgoCD")
    logging.info('*'*40)
    logging.info(f"MCP Server name: {SERVER_NAME}")
    logging.info('*'*40)

    # Create server instance
    if MCP_MODE.lower() in ["sse", "http"]:
        mcp = FastMCP(f"{SERVER_NAME} MCP Server", host=MCP_HOST, port=MCP_PORT)
    else:
        mcp = FastMCP(f"{SERVER_NAME} MCP Server")

    # Checks if the current account has permission to perform a specified action on a resource.
    mcp.tool()(api_v1_account_can_i_resource_action_subresource.account_service__can_i)

    # Get the details of the current account
    mcp.tool()(api_v1_account_name.account_service__get_account)

    # List all accounts
    mcp.tool()(api_v1_account.account_service__list_accounts)

    # Resource events
    mcp.tool()(api_v1_applications_name_events.application_service__list_resource_events)

    # List of all application deep links.
    # TODO: This tool is not working as expected.
    mcp.tool()(api_v1_applications_name_links.application_service__list_links)

    # TODO: These tools are not working as expected, need to fix them
    # ERROR:  Input is too long for requested model.
    # # Managed Resources
    # mcp.tool()(api_v1_applications_application_name_managed_resources.application_service__managed_resources)
    # # Resource Tree
    # mcp.tool()(api_v1_applications_application_name_resource_tree.application_service__resource_tree)

    # Application Logs
    mcp.tool()(api_v1_applications_name_logs.application_service__pod_logs)
    # mcp.tool()(api_v1_applications_name_pods_podname_logs.application_service__pod_logs)

    # Application Management
    mcp.tool()(api_v1_applications.list_applications)
    mcp.tool()(api_v1_applications.get_application_details)
    mcp.tool()(api_v1_applications.create_application)
    mcp.tool()(api_v1_applications.update_application)
    mcp.tool()(api_v1_applications.delete_application)
    mcp.tool()(api_v1_applications.sync_application)
    mcp.tool()(api_version.version_service__version)

    # Due to the fact that the tokens/passwords may be read by LLM,
    # we are not exposing the token creation and deletion tools
    # Note: Only expose these tools at your own risk

    # mcp.tool()(api_v1_account_name_token_id.account_service__delete_token)
    # mcp.tool()(api_v1_account_name_token.account_service__create_token)
    # mcp.tool()(api_v1_account_password.account_service__update_password)

    # Projects
    mcp.tool()(api_v1_projects.project_list)
    mcp.tool()(api_v1_projects.project_create)
    mcp.tool()(api_v1_projects.project_delete)
    mcp.tool()(api_v1_projects.project_get)
    mcp.tool()(api_v1_projects.project_update)

    # ApplicationSets
    mcp.tool()(api_v1_applicationsets_generate.application_set_service__generate)
    mcp.tool()(api_v1_applicationsets.applicationset_list)
    mcp.tool()(api_v1_applicationsets.applicationset_create)
    mcp.tool()(api_v1_applicationsets_name.applicationset_service__get)
    mcp.tool()(api_v1_applicationsets_name.applicationset_service__delete)

    # Certificates
    mcp.tool()(api_v1_certificates.certificate_service__list_certificates)

    # Clusters
    mcp.tool()(api_v1_clusters_id_value.cluster_service__get)
    mcp.tool()(api_v1_clusters.cluster_service__list)

    # GPG Keys
    mcp.tool()(api_v1_gpgkeys_keyid.gpg_key_service__get)
    mcp.tool()(api_v1_gpgkeys.gpg_key_service__list)
    mcp.tool()(api_v1_gpgkeys.gpg_key_service__create)
    mcp.tool()(api_v1_gpgkeys.gpg_key_service__delete)

    # Run the MCP server
    mcp.run(transport=MCP_MODE.lower())

if __name__ == "__main__":
    main()
