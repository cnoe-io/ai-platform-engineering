# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /incident/clear operations"""

import logging
from typing import Dict, Any, List
from mcp_splunk.api.client import make_api_request, assemble_nested_body

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def clear__incidents(body_filters: List[Dict[str, Any]] = None) -> Any:
    """
    Clears specified incidents

    OpenAPI Description:
        Clears alerts specified in the request body


    Args:

        body_filters (List[Dict[str, Any]]): List of rules that identify incidents



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /incident/clear")

    params = {}
    data = {}

    flat_body = {}
    if body_filters is not None:
        flat_body["filters"] = body_filters
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/incident/clear", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
