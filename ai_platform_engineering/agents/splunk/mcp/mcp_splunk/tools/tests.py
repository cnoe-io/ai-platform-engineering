# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /tests operations"""

import logging
from typing import Any

from mcp_splunk.api.client import assemble_nested_body, make_api_request

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def get_tests(
    param_page: int = None,
    param_perPage: int = None,
    param_testType: str = None,
    param_orderby: str = None,
    param_search: str = None,
    param_locationId: str = None,
    param_customProperties: list[str] = None,
    param_testTypes: list[str] = None,
    param_frequencies: list[int] = None,
    param_locationIds: list[str] = None,
    param_lastRunStatus: list[str] = None,
    param_schedulingStragety: str = None,
    param_active: bool = False,
) -> Any:
    """
        Gets a list of all tests.

        OpenAPI Description:
            Returns a list of all tests.

    ## Requirements

    * You must have an organization access token with the API permission or a session token to use the API.
    * You need the Splunk Observability Cloud admin, power, or read_only role.


        Args:

            param_page (int): Page of tests to return.

            param_perPage (int): Number of tests to return.

            param_testType (str): Test type to return.

            param_orderby (str): Sort tests by the specified value.

            param_search (str): Search for tests based on Name or Type.

            param_locationId (str): Filter for tests by the given locationId.

            param_customProperties (List[str]): Filter for tests by the given customProperties.

            param_testTypes (List[str]): Test types to return.

            param_frequencies (List[int]): Filter for tests by the given frequencies.

            param_locationIds (List[str]): Filter for tests by the given locationIds.

            param_lastRunStatus (List[str]): Filter for tests by the given lastRunStatus.

            param_schedulingStragety (str): Filter for tests by the given schedulingStrategy

            param_active (bool): Filter tests by active or paused status.


        Returns:
            Any: The JSON response from the API call.

        Raises:
            Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /tests")

    params = {}
    data = {}

    if param_page is not None:
        params["page"] = str(param_page).lower() if isinstance(param_page, bool) else param_page

    if param_perPage is not None:
        params["perPage"] = str(param_perPage).lower() if isinstance(param_perPage, bool) else param_perPage

    if param_testType is not None:
        params["testType"] = str(param_testType).lower() if isinstance(param_testType, bool) else param_testType

    if param_orderby is not None:
        params["orderby"] = str(param_orderby).lower() if isinstance(param_orderby, bool) else param_orderby

    if param_search is not None:
        params["search"] = str(param_search).lower() if isinstance(param_search, bool) else param_search

    if param_locationId is not None:
        params["locationId"] = str(param_locationId).lower() if isinstance(param_locationId, bool) else param_locationId

    if param_customProperties is not None:
        params["customProperties"] = (
            str(param_customProperties).lower() if isinstance(param_customProperties, bool) else param_customProperties
        )

    if param_testTypes is not None:
        params["testTypes"] = str(param_testTypes).lower() if isinstance(param_testTypes, bool) else param_testTypes

    if param_frequencies is not None:
        params["frequencies"] = str(param_frequencies).lower() if isinstance(param_frequencies, bool) else param_frequencies

    if param_locationIds is not None:
        params["locationIds"] = str(param_locationIds).lower() if isinstance(param_locationIds, bool) else param_locationIds

    if param_lastRunStatus is not None:
        params["lastRunStatus"] = str(param_lastRunStatus).lower() if isinstance(param_lastRunStatus, bool) else param_lastRunStatus

    if param_schedulingStragety is not None:
        params["schedulingStragety"] = (
            str(param_schedulingStragety).lower() if isinstance(param_schedulingStragety, bool) else param_schedulingStragety
        )

    if param_active is not None:
        params["active"] = str(param_active).lower() if isinstance(param_active, bool) else param_active

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/tests", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
