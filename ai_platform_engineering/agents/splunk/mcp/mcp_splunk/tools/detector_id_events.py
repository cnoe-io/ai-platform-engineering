# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /detector/{id}/events operations"""

import logging
from typing import Any

from mcp_splunk.api.client import assemble_nested_body, make_api_request

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def retrieve__events__single__detector(
    path_id: str, param_from: int = None, param_to: int = None, param_offset: int = None, param_limit: int = None,
) -> Any:
    """
    Retrieves events generated by a detector

    OpenAPI Description:
        Retrieves events for a detector, based on the query parameters


    Args:

        path_id (str): ID of the detector you want to retrieve


        param_from (int): Starting timestamp (inclusive) of events you want to retrieve


        param_to (int): Ending timestamp (inclusive) of events you want to retrieve


        param_offset (int): Index in query result set at which to start returning results


        param_limit (int): Number of query results to return



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /detector/{id}/events")

    params = {}
    data = {}

    if param_from is not None:
        params["from"] = str(param_from).lower() if isinstance(param_from, bool) else param_from

    if param_to is not None:
        params["to"] = str(param_to).lower() if isinstance(param_to, bool) else param_to

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/detector/{path_id}/events", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
