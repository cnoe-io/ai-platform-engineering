# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /tag/{name} operations"""

import logging
from typing import Any

from mcp_splunk.api.client import assemble_nested_body, make_api_request

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def retrieve__tag__metadata__using__name(path_name: str) -> Any:
    """
    Retrieves metadata for a tag

    OpenAPI Description:
        Retrieves metadata for the tag specified by the query parameter


    Args:

        path_name (str): Tag you want to retrieve



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /tag/{name}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/tag/{path_name}", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def create__update__tag(
    path_name: str, body_customProperties: dict[str, Any] = None, body_description: str = None, body_name: str = None,
) -> Any:
    """
    Creates or updates a tag

    OpenAPI Description:
        Creates or updates the tag specified in the path parameter


    Args:

        path_name (str): Tag name


        body_customProperties (Dict[str, Any]): Custom properties for the tag


        body_description (str): Tag description


        body_name (str): Tag name



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making PUT request to /tag/{name}")

    params = {}
    data = {}

    flat_body = {}
    if body_customProperties is not None:
        flat_body["customProperties"] = body_customProperties
    if body_description is not None:
        flat_body["description"] = body_description
    if body_name is not None:
        flat_body["name"] = body_name
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/tag/{path_name}", method="PUT", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response


async def delete__single__tag(path_name: str) -> Any:
    """
    Deletes a tag

    OpenAPI Description:
        Deletes the specified tag


    Args:

        path_name (str): Tag you want to delete



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making DELETE request to /tag/{name}")

    params = {}
    data = {}

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request(f"/tag/{path_name}", method="DELETE", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
