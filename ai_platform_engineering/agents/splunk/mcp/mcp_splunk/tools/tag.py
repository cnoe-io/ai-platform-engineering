# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0
# Generated by CNOE OpenAPI MCP Codegen tool

"""Tools for /tag operations"""

import logging
from typing import Any

from mcp_splunk.api.client import assemble_nested_body, make_api_request

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mcp_tools")


async def retrieve__tag__metadata__using__query(
    param_query: str = None, param_order_by: str = None, param_offset: int = None, param_limit: int = None,
) -> Any:
    """
    Retrieves metadata for tags

    OpenAPI Description:
        Retrieves metadata for the tag specified by the query parameter


    Args:

        param_query (str): Search criteria


        param_order_by (str): Property on which the API should sort the query results


        param_offset (int): Index in the result set at which the API should start returning results


        param_limit (int): Number of results to return from the result set



    Returns:
        Any: The JSON response from the API call.

    Raises:
        Exception: If the API request fails or returns an error.
    """
    logger.debug("Making GET request to /tag")

    params = {}
    data = {}

    if param_query is not None:
        params["query"] = str(param_query).lower() if isinstance(param_query, bool) else param_query

    if param_order_by is not None:
        params["order_by"] = str(param_order_by).lower() if isinstance(param_order_by, bool) else param_order_by

    if param_offset is not None:
        params["offset"] = str(param_offset).lower() if isinstance(param_offset, bool) else param_offset

    if param_limit is not None:
        params["limit"] = str(param_limit).lower() if isinstance(param_limit, bool) else param_limit

    flat_body = {}
    data = assemble_nested_body(flat_body)

    success, response = await make_api_request("/tag", method="GET", params=params, data=data)

    if not success:
        logger.error(f"Request failed: {response.get('error')}")
        return {"error": response.get("error", "Request failed")}
    return response
