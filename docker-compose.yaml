services:
  # AI Platform Engineer Multi-Agent System (stable image)
  ai-platform-engineer:
    image: ghcr.io/cnoe-io/ai-platform-engineering:stable
    container_name: platform-engineer
    depends_on:
      - agent-argocd
      - agent-atlassian
      - agent-pagerduty
      - agent-github
      - agent-slack
      - agent-komodor
    env_file:
      - .env
    ports:
      # Expose the AI Platform Engineer agent on port 8000
      - "8000:8000"
    environment:
      - AGENT_PROTOCOL=a2a
      - ARGOCD_AGENT_HOST=agent-argocd
      - ARGOCD_AGENT_PORT=8000
      - ATLASSIAN_AGENT_HOST=agent-atlassian
      - ATLASSIAN_AGENT_PORT=8000
      - GITHUB_AGENT_HOST=agent-github
      - GITHUB_AGENT_PORT=8000
      - PAGERDUTY_AGENT_HOST=agent-pagerduty
      - PAGERDUTY_AGENT_PORT=8000
      - SLACK_AGENT_HOST=agent-slack
      - SLACK_AGENT_PORT=8000
      - KOMODOR_AGENT_HOST=agent-komodor
      - KOMODOR_AGENT_PORT=8000
      # Uncomment this once the stable GHCR image includes tracing evaluation support
      # - ENABLE_TRACING=${ENABLE_TRACING:-false}
      # - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      # - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      # - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
      # - LANGFUSE_SESSION_ID=${LANGFUSE_SESSION_ID:-ai-platform-engineering}
      # - LANGFUSE_USER_ID=${LANGFUSE_USER_ID:-platform-engineer}
    command: platform-engineer

  # AI Platform Engineer Multi-Agent System (local build for tracing)
  # TODO: Remove this local build service once the stable GHCR image includes tracing evaluation support
  ai-platform-engineer-tracing:
    build:
      context: .
      dockerfile: build/Dockerfile
    container_name: platform-engineer-tracing
    profiles:
      - tracing
    depends_on:
      - agent-argocd
      - agent-atlassian
      - agent-pagerduty
      - agent-github
      - agent-slack
      - agent-komodor
    env_file:
      - .env
    ports:
      # Expose the AI Platform Engineer agent on port 8000
      - "8000:8000"
    environment:
      - AGENT_PROTOCOL=a2a
      - ARGOCD_AGENT_HOST=agent-argocd
      - ARGOCD_AGENT_PORT=8000
      - ATLASSIAN_AGENT_HOST=agent-atlassian
      - ATLASSIAN_AGENT_PORT=8000
      - BACKSTAGE_AGENT_HOST=agent-backstage
      - BACKSTAGE_AGENT_PORT=8000
      - GITHUB_AGENT_HOST=agent-github
      - GITHUB_AGENT_PORT=8000
      - PAGERDUTY_AGENT_HOST=agent-pagerduty
      - PAGERDUTY_AGENT_PORT=8000
      - SLACK_AGENT_HOST=agent-slack
      - SLACK_AGENT_PORT=8000
      - KOMODOR_AGENT_HOST=agent-komodor
      - KOMODOR_AGENT_PORT=8000
      # Tracing configuration (will be read from .env if ENABLE_TRACING=true)
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
      - LANGFUSE_SESSION_ID=${LANGFUSE_SESSION_ID:-ai-platform-engineering}
      - LANGFUSE_USER_ID=${LANGFUSE_USER_ID:-platform-engineer}
    volumes:
      - .env:/app/.env
      - ./prompt_config.yaml:/app/prompt_config.yaml
      - ./ai_platform_engineering:/app/ai_platform_engineering
    command: platform-engineer
  # Agent ArgoCD
  agent-argocd:
    image: ghcr.io/cnoe-io/agent-argocd:a2a-stable
    container_name: agent-argocd
    volumes:
      - ./.env:/app/.env
    ports:
      # Expose the ArgoCD agent on port 8080
      - "8001:8000"
  # Agent Atlassian
  agent-atlassian:
    image: ghcr.io/cnoe-io/agent-atlassian:a2a-stable
    container_name: agent-atlassian
    volumes:
      - ./.env:/app/.env
    ports:
      # Expose the Atlassian agent on port 8002
      - "8002:8000"
  # Agent GitHub
  agent-github:
    image: ghcr.io/cnoe-io/agent-github:a2a-stable
    container_name: agent-github
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.env:/app/.env
    ports:
      # Expose the GitHub agent on port 8003
      - "8003:8000"
  # Agent PagerDuty
  agent-pagerduty:
    image: ghcr.io/cnoe-io/agent-pagerduty:a2a-stable
    container_name: agent-pagerduty
    volumes:
      - ./.env:/app/.env
    ports:
      # Expose the PagerDuty agent on port 8004
      - "8004:8000"
  # Agent Slack
  agent-slack:
    image: ghcr.io/cnoe-io/agent-slack:a2a-stable
    container_name: agent-slack
    volumes:
      - ./.env:/app/.env
    ports:
      # Expose the Slack agent on port 8005
      - "8005:8000"
  # Sample UI container to interact with A2A applications
  # ui:
  #   image: ghcr.io/eti-demos/agentconnect
  #   container_name: ui
  #   ports:
  #     - "3001:3001"
  backstage-agent-forge:
    image: ghcr.io/cnoe-io/backstage-plugin-agent-forge:latest
    container_name: backstage-agent-forge
    ports:
      - "8007:3000"
  # Agent Backstage
  agent-backstage:
    image: ghcr.io/cnoe-io/agent-backstage:a2a-stable
    container_name: agent-backstage
    volumes:
      - ./.env:/app/.env
    ports:
      # Expose the Backstage agent on port 8006
      - "8006:8000"
    environment:
      - BACKSTAGE_API_TOKEN=${BACKSTAGE_API_TOKEN}
      - BACKSTAGE_URL=${BACKSTAGE_URL}
  # Agent Komodor
  agent-komodor:
    image: ghcr.io/cnoe-io/agent-komodor:a2a-166e5fc
    container_name: agent-komodor
    volumes:
      - ./.env:/app/.env
    ports:
      # Expose the Komodor agent on port 8080
      - "8008:8000"

  # Langfuse Tracing Services (use --profile tracing to enable)
  # Reference: https://github.com/langfuse/langfuse/blob/main/docker-compose.yml
  langfuse-worker:
    image: langfuse/langfuse-worker:3
    container_name: langfuse-worker
    restart: always
    profiles:
      - tracing
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "127.0.0.1:3030:3030"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@langfuse-postgres:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      CLICKHOUSE_MIGRATION_URL: clickhouse://langfuse-clickhouse:9000
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      # S3 Event Upload Configuration (Required for tracing)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: "events/"
      # S3 Media Upload Configuration
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: "media/"
      REDIS_HOST: langfuse-redis
      REDIS_AUTH: myredissecret

  langfuse-web:
    image: langfuse/langfuse:3
    container_name: langfuse-web
    restart: always
    profiles:
      - tracing
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@langfuse-postgres:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      CLICKHOUSE_MIGRATION_URL: clickhouse://langfuse-clickhouse:9000
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      # S3 Event Upload Configuration (Required for tracing)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: "events/"
      # S3 Media Upload Configuration
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: "media/"
      REDIS_HOST: langfuse-redis
      REDIS_AUTH: myredissecret
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: mysecret

  langfuse-clickhouse:
    image: clickhouse/clickhouse-server
    container_name: langfuse-clickhouse
    restart: always
    profiles:
      - tracing
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - "127.0.0.1:8123:8123"
      - "127.0.0.1:9000:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  langfuse-minio:
    image: minio/minio
    container_name: langfuse-minio
    restart: always
    profiles:
      - tracing
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9090:9000"
      - "127.0.0.1:9091:9001"
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  langfuse-redis:
    image: redis:7
    container_name: langfuse-redis
    restart: always
    profiles:
      - tracing
    command: >
      --requirepass ${REDIS_AUTH:-myredissecret}
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  langfuse-postgres:
    image: postgres:15
    container_name: langfuse-postgres
    restart: always
    profiles:
      - tracing
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

volumes:
  langfuse_postgres_data:
    driver: local
  langfuse_clickhouse_data:
    driver: local
  langfuse_clickhouse_logs:
    driver: local
  langfuse_minio_data:
    driver: local
