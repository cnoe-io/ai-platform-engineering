services:
  # AI Platform Engineering Multi-Agent System (stable image)
  platform-engineer:
    image: ghcr.io/cnoe-io/ai-platform-engineering:stable
    container_name: platform-engineer
    depends_on:
      - agent-argocd
      - agent-backstage
      - agent-confluence
      - agent-github
      - agent-jira
      - agent-pagerduty
      - agent-slack
    env_file:
      - .env
    ports:
      # Expose the AI Platform Engineer agent on port 8000
      - "8000:8000"
    environment:
      - AGENT_PROTOCOL=a2a
      - ARGOCD_AGENT_HOST=agent-argocd
      - BACKSTAGE_AGENT_HOST=agent-backstage
      - CONFLUENCE_AGENT_HOST=agent-confluence
      - JIRA_AGENT_HOST=agent-jira
      - GITHUB_AGENT_HOST=agent-github
      - PAGERDUTY_AGENT_HOST=agent-pagerduty
      - SLACK_AGENT_HOST=agent-slack
      - KOMODOR_AGENT_HOST=agent-komodor
      # Uncomment this once the stable GHCR image includes tracing evaluation support
      # - ENABLE_TRACING=${ENABLE_TRACING:-false}
      # - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      # - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      # - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
      # - LANGFUSE_SESSION_ID=${LANGFUSE_SESSION_ID:-ai-platform-engineering}
      # - LANGFUSE_USER_ID=${LANGFUSE_USER_ID:-platform-engineer}
    volumes:
      - .env:/app/.env
      - ./prompt_config.yaml:/app/prompt_config.yaml
      # Uncomment for local development
      - ./ai_platform_engineering:/app/ai_platform_engineering
    command: platform-engineer
  # AI Platform Engineer Multi-Agent System (local build for tracing)
  # TODO: Remove this local build service once the stable GHCR image includes tracing evaluation support
  ai-platform-engineer-tracing:
    build:
      context: .
      dockerfile: build/Dockerfile
    container_name: platform-engineer-tracing
    profiles:
      - tracing
    depends_on:
      - agent-argocd
      - agent-jira
      - agent-pagerduty
      - agent-github
      - agent-slack
    env_file:
      - .env
    ports:
      # Expose the AI Platform Engineer agent on port 8000
      - "8000:8000"
    environment:
      - AGENT_PROTOCOL=a2a
      - ARGOCD_AGENT_HOST=agent-argocd
      - ATLASSIAN_AGENT_HOST=agent-jira
      - BACKSTAGE_AGENT_HOST=agent-backstage
      - GITHUB_AGENT_HOST=agent-github
      - PAGERDUTY_AGENT_HOST=agent-pagerduty
      - SLACK_AGENT_HOST=agent-slack
      - KOMODOR_AGENT_HOST=agent-komodor
      # Tracing configuration (will be read from .env if ENABLE_TRACING=true)
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
      - LANGFUSE_SESSION_ID=${LANGFUSE_SESSION_ID:-ai-platform-engineering}
      - LANGFUSE_USER_ID=${LANGFUSE_USER_ID:-platform-engineer}
    volumes:
      - .env:/app/.env
      - ./prompt_config.yaml:/app/prompt_config.yaml
      - ./ai_platform_engineering:/app/ai_platform_engineering
    command: platform-engineer
  # Agent ArgoCD
  agent-argocd:
    image: ghcr.io/cnoe-io/agent-argocd:a2a-stable
    container_name: agent-argocd
    environment:
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
    volumes:
      - ./.env:/app/.env
    ports:
      - "8001:8000"
  # Agent Backstage
  agent-backstage:
    image: ghcr.io/cnoe-io/agent-backstage:a2a-stable
    container_name: agent-backstage
    volumes:
      - ./.env:/app/.env
    ports:
      - "8002:8000"
  # Agent Confluence
  agent-confluence:
    image: ghcr.io/cnoe-io/agent-confluence:a2a-stable
    container_name: agent-confluence
    volumes:
      - ./.env:/app/.env
      # Uncomment for local development
      # - ./ai_platform_engineering/agents/confluence:/app/
    ports:
      - "8003:8000"
  # Agent GitHub
  agent-github:
    image: ghcr.io/cnoe-io/agent-github:a2a-stable
    container_name: agent-github
    environment:
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-http://langfuse-web:3000}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.env:/app/.env
      # Uncomment for local development
      # - ./ai_platform_engineering/agents/github:/app
    ports:
      - "8004:8000"
  agent-jira:
    image: ghcr.io/cnoe-io/agent-jira:a2a-stable
    container_name: agent-jira
    volumes:
      - ./.env:/app/.env
    ports:
      - "8005:8000"
  # Agent PagerDuty
  agent-pagerduty:
    image: ghcr.io/cnoe-io/agent-pagerduty:a2a-stable
    container_name: agent-pagerduty
    volumes:
      - ./.env:/app/.env
    ports:
      - "8006:8000"
  # Agent Slack
  agent-slack:
    image: ghcr.io/cnoe-io/agent-slack:a2a-stable
    container_name: agent-slack
    volumes:
      - ./.env:/app/.env
    ports:
      - "8007:8000"
  # Agent KB-RAG
  kb-rag:
    image: ghcr.io/cnoe-io/kb-rag:a2a-latest
    container_name: kb-rag
    profiles:
      - kb-rag
    depends_on:
      - milvus-standalone
    volumes:
      - ./.env:/app/.env
    ports:
      - "8008:8000"

  backstage-agent-forge:
    image: ghcr.io/cnoe-io/backstage-plugin-agent-forge:latest
    container_name: backstage-agent-forge
    ports:
      - "3000:3000"
  # Langfuse Tracing Services (use --profile tracing to enable)
  # Reference: https://github.com/langfuse/langfuse/blob/main/docker-compose.yml
  langfuse-worker:
    image: langfuse/langfuse-worker:3
    container_name: langfuse-worker
    restart: always
    profiles:
      - tracing
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "127.0.0.1:3030:3030"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@langfuse-postgres:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      CLICKHOUSE_MIGRATION_URL: clickhouse://langfuse-clickhouse:9000
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      # S3 Event Upload Configuration (Required for tracing)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: "events/"
      # S3 Media Upload Configuration
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: "media/"
      REDIS_HOST: langfuse-redis
      REDIS_AUTH: myredissecret

  langfuse-web:
    image: langfuse/langfuse:3
    container_name: langfuse-web
    restart: always
    profiles:
      - tracing
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@langfuse-postgres:5432/postgres
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      CLICKHOUSE_MIGRATION_URL: clickhouse://langfuse-clickhouse:9000
      CLICKHOUSE_URL: http://langfuse-clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      # S3 Event Upload Configuration (Required for tracing)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: "events/"
      # S3 Media Upload Configuration
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://langfuse-minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: "media/"
      REDIS_HOST: langfuse-redis
      REDIS_AUTH: myredissecret
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: mysecret

  langfuse-clickhouse:
    image: clickhouse/clickhouse-server
    container_name: langfuse-clickhouse
    restart: always
    profiles:
      - tracing
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - "127.0.0.1:8123:8123"
      - "127.0.0.1:9000:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  langfuse-minio:
    image: minio/minio
    container_name: langfuse-minio
    restart: always
    profiles:
      - tracing
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9090:9000"
      - "127.0.0.1:9091:9001"
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  langfuse-redis:
    image: redis:7
    container_name: langfuse-redis
    restart: always
    profiles:
      - tracing
    command: >
      --requirepass ${REDIS_AUTH:-myredissecret}
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  langfuse-postgres:
    image: postgres:15
    container_name: langfuse-postgres
    restart: always
    profiles:
      - tracing
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    profiles:
      - kb-rag
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    profiles:
      - kb-rag
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.14
    command: ["milvus", "run", "standalone"]
    profiles:
      - kb-rag
    security_opt:
      - seccomp:unconfined
    environment:
      MINIO_REGION: us-east-1
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      LOG_LEVEL: error

    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - milvus-minio

volumes:
  langfuse_postgres_data:
    driver: local
  langfuse_clickhouse_data:
    driver: local
  langfuse_clickhouse_logs:
    driver: local
  langfuse_minio_data:
    driver: local
  milvus_etcd:
    driver: local
  milvus_minio:
    driver: local
  milvus_data:
    driver: local
